/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_nupropa_WRAP_H_
#define SWIG_nupropa_WRAP_H_

#include <map>
#include <string>


class SwigDirector_Channels : public nupropa::Channels, public Swig::Director {

public:
    SwigDirector_Channels(PyObject *self);
    SwigDirector_Channels(PyObject *self,std::vector< std::string,std::allocator< std::string > > interactionChannels,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > productsID,std::vector< bool,std::allocator< bool > > active,std::string interactionFolderPath);
    virtual ~SwigDirector_Channels();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;
};


class SwigDirector_ChannelsBundle : public nupropa::ChannelsBundle, public Swig::Director {

public:
    SwigDirector_ChannelsBundle(PyObject *self,crpropa::ref_ptr< nupropa::Channels > channels,std::string fname);
    virtual ~SwigDirector_ChannelsBundle();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;
};


class SwigDirector_NeutrinoField : public nupropa::NeutrinoField, public Swig::Director {

public:
    SwigDirector_NeutrinoField(PyObject *self);
    virtual ~SwigDirector_NeutrinoField();
    virtual double getNeutrinoDensity(double eNeutrino,double z=0.) const;
    virtual double getMinimumNeutrinoEnergy(double z) const;
    virtual double getMaximumNeutrinoEnergy(double z) const;
    virtual std::string getFieldName() const;
    virtual double getRedshiftScaling(double z) const;
    using nupropa::NeutrinoField::fieldName;
    using nupropa::NeutrinoField::isRedshiftDependent;
    using nupropa::NeutrinoField::mass;

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class NeutrinoField doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[6];
#endif

};


class SwigDirector_RelativisticInteraction : public nupropa::RelativisticInteraction, public Swig::Director {

public:
    SwigDirector_RelativisticInteraction(PyObject *self);
    SwigDirector_RelativisticInteraction(PyObject *self,double m1,double m2,double E,double s);
    SwigDirector_RelativisticInteraction(PyObject *self,double m1,double E,double s);
    virtual ~SwigDirector_RelativisticInteraction();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;
};


class SwigDirector_NeutrinoMixing : public nupropa::NeutrinoMixing, public Swig::Director {

public:
    SwigDirector_NeutrinoMixing(PyObject *self);
    SwigDirector_NeutrinoMixing(PyObject *self,double theta13,double theta23,double theta12,double delta);
    virtual ~SwigDirector_NeutrinoMixing();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;
};


#endif
