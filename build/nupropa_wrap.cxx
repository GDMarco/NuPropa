/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_THREADS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
#define SWIGPYTHON_BUILTIN

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if !defined(PY_SSIZE_T_CLEAN) && !defined(SWIG_NO_PY_SSIZE_T_CLEAN)
#define PY_SSIZE_T_CLEAN
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus) && __cplusplus >=201703L
#pragma GCC diagnostic ignored "-Wregister" /* For python-2.7 headers that use register */
#endif
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */

#if defined(_MSC_VER) && _MSC_VER >= 1929
/* Workaround compilation errors when redefining _DEBUG in MSVC 2019 version 16.10 and later
 * See https://github.com/swig/swig/issues/2090 */
# include <corecrt.h>
#endif

# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
  return (char *)PyUnicode_AsUTF8(str);
#else
  return PyString_AsString(str);
#endif
}

/* Was useful for Python 3.0.x-3.2.x - now provided only for compatibility
 * with any uses in user interface files. */
#define SWIG_Python_str_DelForPy3(x)


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
# define SWIGPY_USE_CAPSULE
#ifdef SWIGPYTHON_BUILTIN
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule_builtin" SWIG_TYPE_TABLE_NAME
#else
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
#endif
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    if (newvalue) {
      Py_XDECREF(value);
      PyErr_Restore(type, newvalue, traceback);
    } else {
      PyErr_Restore(type, value, traceback);
    }
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      if PY_VERSION_HEX < 0x03070000
#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()
#      else
#        define SWIG_PYTHON_INITIALIZE_THREADS
#      endif
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03030000
# error "This version of SWIG only supports Python 3 >= 3.3"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      if (result) {
        PyList_SET_ITEM(result, 0, o2);
      } else {
        Py_DECREF(obj);
        return o2;
      }
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
 
/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */
 
typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_InternFromString("<Swig global variables>");
#else
  return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
#if PY_VERSION_HEX >= 0x03000000
  PyObject *str = PyUnicode_InternFromString("(");
  PyObject *tail;
  PyObject *joined;
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    tail = PyUnicode_FromString(var->name);
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
    if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
    }
  }
  tail = PyUnicode_InternFromString(")");
  joined = PyUnicode_Concat(str, tail);
  Py_DecRef(str);
  Py_DecRef(tail);
  str = joined;
#else
  PyObject *str = PyString_FromString("(");
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    PyString_ConcatAndDel(&str,PyString_FromString(var->name));
    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
  }
  PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
  return str;
}

SWIGINTERN void
swig_varlink_dealloc(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  swig_globalvar *var = v->vars;
  while (var) {
    swig_globalvar *n = var->next;
    free(var->name);
    free(var);
    var = n;
  }
}

SWIGINTERN PyObject *
swig_varlink_getattr(PyObject *o, char *n) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  PyObject *res = NULL;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->get_attr)();
      break;
    }
    var = var->next;
  }
  if (res == NULL && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN int
swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  int res = 1;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->set_attr)(p);
      break;
    }
    var = var->next;
  }
  if (res == 1 && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN PyTypeObject*
swig_varlink_type(void) {
  static char varlink__doc__[] = "Swig var link object";
  static PyTypeObject varlink_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                  /* ob_size */
#endif
      "swigvarlink",                      /* tp_name */
      sizeof(swig_varlinkobject),         /* tp_basicsize */
      0,                                  /* tp_itemsize */
      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                       /*tp_print*/
#else
      (Py_ssize_t)0,                      /*tp_vectorcall_offset*/
#endif
      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
      0,                                  /* tp_compare */
      (reprfunc) swig_varlink_repr,       /* tp_repr */
      0,                                  /* tp_as_number */
      0,                                  /* tp_as_sequence */
      0,                                  /* tp_as_mapping */
      0,                                  /* tp_hash */
      0,                                  /* tp_call */
      (reprfunc) swig_varlink_str,        /* tp_str */
      0,                                  /* tp_getattro */
      0,                                  /* tp_setattro */
      0,                                  /* tp_as_buffer */
      0,                                  /* tp_flags */
      varlink__doc__,                     /* tp_doc */
      0,                                  /* tp_traverse */
      0,                                  /* tp_clear */
      0,                                  /* tp_richcompare */
      0,                                  /* tp_weaklistoffset */
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
      0,                                  /* tp_del */
      0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                  /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                  /* tp_allocs */
      0,                                  /* tp_frees */
      0,                                  /* tp_maxalloc */
      0,                                  /* tp_prev */
      0                                   /* tp_next */
#endif
    };
    varlink_type = tmp;
    type_init = 1;
    if (PyType_Ready(&varlink_type) < 0)
      return NULL;
  }
  return &varlink_type;
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
  if (result) {
    result->vars = 0;
  }
  return ((PyObject*) result);
}

SWIGINTERN void 
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v = (swig_varlinkobject *) p;
  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  if (gv) {
    size_t size = strlen(name)+1;
    gv->name = (char *)malloc(size);
    if (gv->name) {
      memcpy(gv->name, name, size);
      gv->get_attr = get_attr;
      gv->set_attr = set_attr;
      gv->next = v->vars;
    }
  }
  v->vars = gv;
}


static PyObject *Swig_Globals_global = NULL;
  
SWIGINTERN PyObject *
SWIG_globals(void) {
  if (Swig_Globals_global == NULL) {
    Swig_Globals_global = SWIG_newvarlink();
  }
  return Swig_Globals_global;
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      Py_INCREF(obj);
      data->newargs = obj;
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
        data->newargs = PyTuple_New(1);
        if (data->newargs) {
          Py_INCREF(obj);
          PyTuple_SET_ITEM(data->newargs, 0, obj);
        } else {
          Py_DECREF(data->newraw);
          Py_DECREF(data->klass);
          free(data);
          return 0;
        }
      } else {
        Py_INCREF(obj);
        data->newargs = obj;
      }
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data)
{
  Py_XDECREF(data->klass);
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
  free(data);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_XINCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    PyObject *val = SwigPyObject_long(v);
    if (val) {
      PyObject *ofmt;
      PyTuple_SET_ITEM(args, 0, val);
      ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
        res = PyUnicode_Format(ofmt,args);
#else
        res = PyString_Format(ofmt,args);
#endif
        Py_DECREF(ofmt);
      }
    }
    Py_DECREF(args);
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (repr && v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
    if (nrep) {
# if PY_VERSION_HEX >= 0x03000000
      PyObject *joined = PyUnicode_Concat(repr, nrep);
      Py_DecRef(repr);
      Py_DecRef(nrep);
      repr = joined;
# else
      PyString_ConcatAndDel(&repr,nrep);
# endif
    } else {
      Py_DecRef(repr);
      repr = NULL;
    }
  }
  return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

static PyObject* Swig_Capsule_global = NULL;

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        if (tmp) {
          res = SWIG_Python_CallFunctor(destroy, tmp);
        } else {
          res = 0;
        }
        Py_XDECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
    Py_XDECREF(Swig_Capsule_global);
  }
  Py_XDECREF(next);
#ifdef SWIGPYTHON_BUILTIN
  Py_XDECREF(sobj->dict);
#endif
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  ((SwigPyObject *)next)->next = sobj->next;
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        Py_DECREF(SwigPyObject_acquire(v,args));
      } else {
        Py_DECREF(SwigPyObject_disown(v,args));
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) != 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
    sobj->dict = 0;
#endif
    if (own == SWIG_POINTER_OWN) {
      /* Obtain a reference to the Python capsule wrapping the module information, so that the
       * module information is correctly destroyed after all SWIG python objects have been freed
       * by the GC (and corresponding destructors invoked) */
      Py_XINCREF(Swig_Capsule_global);
    }
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) != 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !sobj->own) {
      res = SWIG_ERROR_RELEASE_NOT_OWNED;
    } else {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
        sobj->own = 0;
      }
      if (flags & SWIG_POINTER_CLEAR) {
        sobj->ptr = 0;
      }
      res = SWIG_OK;
    }
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
        PyObject *dict = *dictptr;
        if (dict == NULL) {
          dict = PyDict_New();
          *dictptr = dict;
        }
        if (dict) {
          PyDict_SetItem(dict, SWIG_This(), swig_this);
        } else{
          Py_DECREF(inst);
          inst = 0;
        }
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            PyType_Modified(Py_TYPE(inst));
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    if (dict) {
      return PyDict_SetItem(dict, SWIG_This(), swig_this);
    } else{
      return -1;
    }
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      if (newobj) {
        newobj->dict = 0;
      }
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

static PyObject *Swig_TypeCache_global = NULL;

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  if (Swig_TypeCache_global == NULL) {
    Swig_TypeCache_global = PyDict_New();
  }
  return Swig_TypeCache_global;
}

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
#ifdef SWIG_LINK_RUNTIME
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
  }
#else
  void *type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
  if (PyErr_Occurred()) {
    PyErr_Clear();
    type_pointer = (void *)0;
  }
#endif
  return (swig_module_info *) type_pointer;
}


static int interpreter_counter = 0; // how many (sub-)interpreters are using swig_module's types

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  if (--interpreter_counter != 0) // another sub-interpreter may still be using the swig_module's types
    return;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      ty->clientdata = 0;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
  Py_DECREF(SWIG_globals());
  Swig_Globals_global = NULL;
  Py_DECREF(SWIG_Python_TypeCache());
  Swig_TypeCache_global = NULL;
  Swig_Capsule_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
      ++interpreter_counter;
      Swig_Capsule_global = pointer;
    } else {
      Py_DECREF(pointer);
    }
  } else {
    Py_XDECREF(pointer);
  }
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      if (obj) {
        PyDict_SetItem(cache, key, obj);
        Py_DECREF(obj);
      }
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) != 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        goto done;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN Py_hash_t
SwigPyObject_hash(PyObject *obj) {
  SwigPyObject *sobj = (SwigPyObject *)obj;
  void *ptr = sobj->ptr;
#if PY_VERSION_HEX < 0x03020000
  return (Py_hash_t)(Py_ssize_t)ptr;
#else
  return (Py_hash_t)ptr;
#endif
}

SWIGINTERN Py_hash_t
SWIG_PyNumber_AsPyHash(PyObject *obj) {
  Py_hash_t result = -1;
#if PY_VERSION_HEX < 0x03020000
  if (PyInt_Check(obj))
    result = PyInt_AsLong(obj);
  else if (PyLong_Check(obj))
    result = PyLong_AsLong(obj);
#else
  if (PyNumber_Check(obj))
    result = PyNumber_AsSsize_t(obj, NULL);
#endif
  else
    PyErr_Format(PyExc_TypeError, "Wrong type for hash function");
  return PyErr_Occurred() ? -1 : result;
}

SWIGINTERN int
SwigPyBuiltin_BadInit(PyObject *self, PyObject *SWIGUNUSEDPARM(args), PyObject *SWIGUNUSEDPARM(kwds)) {
  PyErr_Format(PyExc_TypeError, "Cannot create new instances of type '%.300s'", self->ob_type->tp_name);
  return -1;
}

SWIGINTERN void
SwigPyBuiltin_BadDealloc(PyObject *obj) {
  SwigPyObject *sobj = (SwigPyObject *)obj;
  if (sobj->own) {
    PyErr_Format(PyExc_TypeError, "Swig detected a memory leak in type '%.300s': no callable destructor found.", obj->ob_type->tp_name);
  }
}

typedef struct {
  PyCFunction get;
  PyCFunction set;
} SwigPyGetSet;

SWIGINTERN PyObject *
SwigPyBuiltin_GetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  tuple = PyTuple_New(0);
  assert(tuple);
  result = (*getset->get)(obj, tuple);
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyObject *
SwigPyBuiltin_FunpackGetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  result = (*getset->get)(obj, NULL);
  return result;
}

SWIGINTERN int
SwigPyBuiltin_SetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  tuple = PyTuple_New(1);
  assert(tuple);
  Py_INCREF(val);
  PyTuple_SET_ITEM(tuple, 0, val);
  result = (*getset->set)(obj, tuple);
  Py_DECREF(tuple);
  Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN int
SwigPyBuiltin_FunpackSetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  result = (*getset->set)(obj, val);
  Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN void
SwigPyStaticVar_dealloc(PyDescrObject *descr) {
  PyObject_GC_UnTrack(descr);
  Py_XDECREF(PyDescr_TYPE(descr));
  Py_XDECREF(PyDescr_NAME(descr));
  PyObject_GC_Del(descr);
}

SWIGINTERN PyObject *
SwigPyStaticVar_repr(PyGetSetDescrObject *descr) {
#if PY_VERSION_HEX >= 0x03000000

  return PyUnicode_FromFormat("<class attribute '%S' of type '%s'>", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  return PyString_FromFormat("<class attribute '%s' of type '%s'>", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
}

SWIGINTERN int
SwigPyStaticVar_traverse(PyObject *self, visitproc visit, void *arg) {
  PyDescrObject *descr;
  descr = (PyDescrObject *)self;
  Py_VISIT((PyObject*) PyDescr_TYPE(descr));
  return 0;
}

SWIGINTERN PyObject *
SwigPyStaticVar_get(PyGetSetDescrObject *descr, PyObject *obj, PyObject *SWIGUNUSEDPARM(type)) {
  if (descr->d_getset->get != NULL)
    return descr->d_getset->get(obj, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not readable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not readable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return NULL;
}

SWIGINTERN int
SwigPyStaticVar_set(PyGetSetDescrObject *descr, PyObject *obj, PyObject *value) {
  if (descr->d_getset->set != NULL)
    return descr->d_getset->set(obj, value, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not writable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not writable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return -1;
}

SWIGINTERN int
SwigPyObjectType_setattro(PyObject *typeobject, PyObject *name, PyObject *value) {
  PyObject *attribute;
  PyTypeObject *type;
  descrsetfunc local_set;

  assert(PyType_Check(typeobject));
  type = (PyTypeObject *)typeobject;
  attribute = _PyType_Lookup(type, name);
  if (attribute != NULL) {
    /* Implement descriptor functionality, if any */
    local_set = attribute->ob_type->tp_descr_set;
    if (local_set != NULL)
      return local_set(attribute, (PyObject *)type, value);
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400S'", type->tp_name, name);
#else 
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400S'", type->tp_name, name);
#else
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  }

  return -1;
}

SWIGINTERN PyTypeObject*
SwigPyStaticVar_Type(void) {
  static PyTypeObject staticvar_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
      PyObject_HEAD_INIT(&PyType_Type)
      0,                                        /* ob_size */
#endif
      "swig_static_var_getset_descriptor",      /* tp_name */
      sizeof(PyGetSetDescrObject),              /* tp_basicsize */
      0,                                        /* tp_itemsize */
      (destructor)SwigPyStaticVar_dealloc,      /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                             /* tp_print */
#else
      (Py_ssize_t)0,                            /* tp_vectorcall_offset */
#endif
      0,                                        /* tp_getattr */
      0,                                        /* tp_setattr */
      0,                                        /* tp_compare */
      (reprfunc)SwigPyStaticVar_repr,           /* tp_repr */
      0,                                        /* tp_as_number */
      0,                                        /* tp_as_sequence */
      0,                                        /* tp_as_mapping */
      0,                                        /* tp_hash */
      0,                                        /* tp_call */
      0,                                        /* tp_str */
      PyObject_GenericGetAttr,                  /* tp_getattro */
      0,                                        /* tp_setattro */
      0,                                        /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_CLASS, /* tp_flags */
      0,                                        /* tp_doc */
      SwigPyStaticVar_traverse,                 /* tp_traverse */
      0,                                        /* tp_clear */
      0,                                        /* tp_richcompare */
      0,                                        /* tp_weaklistoffset */
      0,                                        /* tp_iter */
      0,                                        /* tp_iternext */
      0,                                        /* tp_methods */
      0,                                        /* tp_members */
      0,                                        /* tp_getset */
      0,                                        /* tp_base */
      0,                                        /* tp_dict */
      (descrgetfunc)SwigPyStaticVar_get,        /* tp_descr_get */
      (descrsetfunc)SwigPyStaticVar_set,        /* tp_descr_set */
      0,                                        /* tp_dictoffset */
      0,                                        /* tp_init */
      0,                                        /* tp_alloc */
      0,                                        /* tp_new */
      0,                                        /* tp_free */
      0,                                        /* tp_is_gc */
      0,                                        /* tp_bases */
      0,                                        /* tp_mro */
      0,                                        /* tp_cache */
      0,                                        /* tp_subclasses */
      0,                                        /* tp_weaklist */
      0,                                        /* tp_del */
      0,                                        /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                        /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                        /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                        /* tp_allocs */
      0,                                        /* tp_frees */
      0,                                        /* tp_maxalloc */
      0,                                        /* tp_prev */
      0                                         /* tp_next */
#endif
    };
    staticvar_type = tmp;
    type_init = 1;
    if (PyType_Ready(&staticvar_type) < 0)
      return NULL;
  }
  return &staticvar_type;
}

SWIGINTERN PyTypeObject*
SwigPyObjectType(void) {
  static char swigpyobjecttype_doc[] = "Metaclass for SWIG wrapped types";
  static PyTypeObject swigpyobjecttype_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
      PyObject_HEAD_INIT(&PyType_Type)
      0,                                        /* ob_size */
#endif
      "SwigPyObjectType",                       /* tp_name */
      PyType_Type.tp_basicsize,                 /* tp_basicsize */
      0,                                        /* tp_itemsize */
      0,                                        /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                             /* tp_print */
#else
      (Py_ssize_t)0,                            /* tp_vectorcall_offset */
#endif
      0,                                        /* tp_getattr */
      0,                                        /* tp_setattr */
      0,                                        /* tp_compare */
      0,                                        /* tp_repr */
      0,                                        /* tp_as_number */
      0,                                        /* tp_as_sequence */
      0,                                        /* tp_as_mapping */
      0,                                        /* tp_hash */
      0,                                        /* tp_call */
      0,                                        /* tp_str */
      0,                                        /* tp_getattro */
      SwigPyObjectType_setattro,                /* tp_setattro */
      0,                                        /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_CLASS, /* tp_flags */
      swigpyobjecttype_doc,                     /* tp_doc */
      0,                                        /* tp_traverse */
      0,                                        /* tp_clear */
      0,                                        /* tp_richcompare */
      0,                                        /* tp_weaklistoffset */
      0,                                        /* tp_iter */
      0,                                        /* tp_iternext */
      0,                                        /* tp_methods */
      0,                                        /* tp_members */
      0,                                        /* tp_getset */
      0,                                        /* tp_base */
      0,                                        /* tp_dict */
      0,                                        /* tp_descr_get */
      0,                                        /* tp_descr_set */
      0,                                        /* tp_dictoffset */
      0,                                        /* tp_init */
      0,                                        /* tp_alloc */
      0,                                        /* tp_new */
      0,                                        /* tp_free */
      0,                                        /* tp_is_gc */
      0,                                        /* tp_bases */
      0,                                        /* tp_mro */
      0,                                        /* tp_cache */
      0,                                        /* tp_subclasses */
      0,                                        /* tp_weaklist */
      0,                                        /* tp_del */
      0,                                        /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                        /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                        /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                        /* tp_allocs */
      0,                                        /* tp_frees */
      0,                                        /* tp_maxalloc */
      0,                                        /* tp_prev */
      0                                         /* tp_next */
#endif
    };
    swigpyobjecttype_type = tmp;
    type_init = 1;
    swigpyobjecttype_type.tp_base = &PyType_Type;
    if (PyType_Ready(&swigpyobjecttype_type) < 0)
      return NULL;
  }
  return &swigpyobjecttype_type;
}

SWIGINTERN PyGetSetDescrObject *
SwigPyStaticVar_new_getset(PyTypeObject *type, PyGetSetDef *getset) {

  PyGetSetDescrObject *descr;
  descr = (PyGetSetDescrObject *)PyType_GenericAlloc(SwigPyStaticVar_Type(), 0);
  assert(descr);
  Py_XINCREF(type);
  PyDescr_TYPE(descr) = type;
  PyDescr_NAME(descr) = PyString_InternFromString(getset->name);
  descr->d_getset = getset;
  if (PyDescr_NAME(descr) == NULL) {
    Py_DECREF(descr);
    descr = NULL;
  }
  return descr;
}

SWIGINTERN void
SwigPyBuiltin_InitBases (PyTypeObject *type, PyTypeObject **bases) {
  Py_ssize_t base_count = 0;
  PyTypeObject **b;
  PyObject *tuple;
  Py_ssize_t i;

  if (!bases[0]) {
    bases[0] = SwigPyObject_type();
    bases[1] = NULL;
  }
  type->tp_base = bases[0];
  Py_INCREF((PyObject *)bases[0]);
  for (b = bases; *b != NULL; ++b)
    ++base_count;
  tuple = PyTuple_New(base_count);
  for (i = 0; i < base_count; ++i) {
    Py_INCREF((PyObject *)bases[i]);
    PyTuple_SET_ITEM(tuple, i, (PyObject *)bases[i]);
  }
  type->tp_bases = tuple;
}

SWIGINTERN PyObject *
SwigPyBuiltin_ThisClosure (PyObject *self, void *SWIGUNUSEDPARM(closure)) {
  PyObject *result;
  result = (PyObject *)SWIG_Python_GetSwigThis(self);
  Py_XINCREF(result);
  return result;
}

SWIGINTERN void
SwigPyBuiltin_SetMetaType (PyTypeObject *type, PyTypeObject *metatype)
{
#if PY_VERSION_HEX >= 0x030900a4
    Py_SET_TYPE(type, metatype);
#else
    Py_TYPE(type) = metatype;
#endif
}


/* Start of callback function macros for use in PyTypeObject */

typedef PyObject *(*SwigPyWrapperFunction)(PyObject *, PyObject *);

#define SWIGPY_UNARYFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_unaryfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_unaryfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_unaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_DESTRUCTOR_CLOSURE(wrapper)			\
SWIGINTERN void							\
wrapper##_destructor_closure(PyObject *a) {			\
    SwigPyBuiltin_destructor_closure(wrapper, #wrapper, a);	\
}
SWIGINTERN void
SwigPyBuiltin_destructor_closure(SwigPyWrapperFunction wrapper, const char *wrappername, PyObject *a) {
  SwigPyObject *sobj;
  sobj = (SwigPyObject *)a;
  Py_XDECREF(sobj->dict);
  if (sobj->own) {
    PyObject *o;
    PyObject *type = 0, *value = 0, *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    o = wrapper(a, NULL);
    if (!o) {
      PyObject *deallocname = PyString_FromString(wrappername);
      PyErr_WriteUnraisable(deallocname);
      Py_DECREF(deallocname);
    }
    PyErr_Restore(type, value, traceback);
    Py_XDECREF(o);
  }
  if (PyType_IS_GC(a->ob_type)) {
    PyObject_GC_Del(a);
  } else {
    PyObject_Del(a);
  }
}

#define SWIGPY_INQUIRY_CLOSURE(wrapper)			\
SWIGINTERN int						\
wrapper##_inquiry_closure(PyObject *a) {		\
  return SwigPyBuiltin_inquiry_closure(wrapper, a);	\
}
SWIGINTERN int
SwigPyBuiltin_inquiry_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *pyresult;
  int result;
  pyresult = wrapper(a, NULL);
  result = pyresult && PyObject_IsTrue(pyresult) ? 1 : 0;
  Py_XDECREF(pyresult);
  return result;
}

#define SWIGPY_GETITERFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_getiterfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_getiterfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_getiterfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_BINARYFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *						\
wrapper##_binaryfunc_closure(PyObject *a, PyObject *b) {	\
  return SwigPyBuiltin_binaryfunc_closure(wrapper, a, b);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_binaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(1);
  assert(tuple);
  Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

typedef ternaryfunc ternarycallfunc;

#define SWIGPY_TERNARYFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *							\
wrapper##_ternaryfunc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_ternaryfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ternaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(2);
  assert(tuple);
  Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  Py_INCREF(c);
  PyTuple_SET_ITEM(tuple, 1, c);
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_TERNARYCALLFUNC_CLOSURE(wrapper)					\
SWIGINTERN PyObject *								\
wrapper##_ternarycallfunc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_ternarycallfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ternarycallfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  (void) c;
  return wrapper(a, b);
}

#define SWIGPY_LENFUNC_CLOSURE(wrapper)			\
SWIGINTERN Py_ssize_t					\
wrapper##_lenfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_lenfunc_closure(wrapper, a);	\
}
SWIGINTERN Py_ssize_t
SwigPyBuiltin_lenfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *resultobj;
  Py_ssize_t result;
  resultobj = wrapper(a, NULL);
  result = PyNumber_AsSsize_t(resultobj, NULL);
  Py_DECREF(resultobj);
  return result;
}

#define SWIGPY_SSIZESSIZEARGFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *								\
wrapper##_ssizessizeargfunc_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c) {	\
  return SwigPyBuiltin_ssizessizeargfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ssizessizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, Py_ssize_t c) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_SSIZESSIZEOBJARGPROC_CLOSURE(wrapper)						\
SWIGINTERN int											\
wrapper##_ssizessizeobjargproc_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c, PyObject *d) {	\
  return SwigPyBuiltin_ssizessizeobjargproc_closure(wrapper, a, b, c, d);			\
}
SWIGINTERN int
SwigPyBuiltin_ssizessizeobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, Py_ssize_t c, PyObject *d) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(d ? 3 : 2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));
  if (d) {
    Py_INCREF(d);
    PyTuple_SET_ITEM(tuple, 2, d);
  }
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  Py_DECREF(tuple);
  Py_XDECREF(resultobj);
  return result;
}

#define SWIGPY_SSIZEARGFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *							\
wrapper##_ssizeargfunc_closure(PyObject *a, Py_ssize_t b) {		\
  return SwigPyBuiltin_funpack_ssizeargfunc_closure(wrapper, a, b);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_funpack_ssizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_FUNPACK_SSIZEARGFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *							\
wrapper##_ssizeargfunc_closure(PyObject *a, Py_ssize_t b) {		\
  return SwigPyBuiltin_ssizeargfunc_closure(wrapper, a, b);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ssizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b) {
  PyObject *arg, *result;
  arg = _PyLong_FromSsize_t(b);
  result = wrapper(a, arg);
  Py_DECREF(arg);
  return result;
}

#define SWIGPY_SSIZEOBJARGPROC_CLOSURE(wrapper)					\
SWIGINTERN int									\
wrapper##_ssizeobjargproc_closure(PyObject *a, Py_ssize_t b, PyObject *c) {	\
  return SwigPyBuiltin_ssizeobjargproc_closure(wrapper, a, b, c);		\
}
SWIGINTERN int
SwigPyBuiltin_ssizeobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, PyObject *c) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  Py_INCREF(c);
  PyTuple_SET_ITEM(tuple, 1, c);
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  Py_XDECREF(resultobj);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_OBJOBJPROC_CLOSURE(wrapper)			\
SWIGINTERN int							\
wrapper##_objobjproc_closure(PyObject *a, PyObject *b) {	\
  return SwigPyBuiltin_objobjproc_closure(wrapper, a, b);	\
}
SWIGINTERN int
SwigPyBuiltin_objobjproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b) {
  int result;
  PyObject *pyresult;
  PyObject *tuple;
  tuple = PyTuple_New(1);
  assert(tuple);
  Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  pyresult = wrapper(a, tuple);
  result = pyresult ? (PyObject_IsTrue(pyresult) ? 1 : 0) : -1;
  Py_XDECREF(pyresult);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_FUNPACK_OBJOBJPROC_CLOSURE(wrapper)			\
SWIGINTERN int								\
wrapper##_objobjproc_closure(PyObject *a, PyObject *b) {		\
  return SwigPyBuiltin_funpack_objobjproc_closure(wrapper, a, b);	\
}
SWIGINTERN int
SwigPyBuiltin_funpack_objobjproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b) {
  int result;
  PyObject *pyresult;
  pyresult = wrapper(a, b);
  result = pyresult ? (PyObject_IsTrue(pyresult) ? 1 : 0) : -1;
  Py_XDECREF(pyresult);
  return result;
}

#define SWIGPY_OBJOBJARGPROC_CLOSURE(wrapper)					\
SWIGINTERN int									\
wrapper##_objobjargproc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_objobjargproc_closure(wrapper, a, b, c);			\
}
SWIGINTERN int
SwigPyBuiltin_objobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(c ? 2 : 1);
  assert(tuple);
  Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  if (c) {
    Py_INCREF(c);
    PyTuple_SET_ITEM(tuple, 1, c);
  }
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  Py_XDECREF(resultobj);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_REPRFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_reprfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_reprfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_reprfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_HASHFUNC_CLOSURE(wrapper)		\
SWIGINTERN Py_hash_t					\
wrapper##_hashfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_hashfunc_closure(wrapper, a);	\
}
SWIGINTERN Py_hash_t
SwigPyBuiltin_hashfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *pyresult;
  Py_hash_t result;
  pyresult = wrapper(a, NULL);
  if (!pyresult)
    return -1;
  result = SWIG_PyNumber_AsPyHash(pyresult);
  Py_DECREF(pyresult);
  return result;
}

#define SWIGPY_ITERNEXTFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_iternextfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_iternextfunc_closure(wrapper, a);\
}
SWIGINTERN PyObject *
SwigPyBuiltin_iternextfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

/* End of callback function macros for use in PyTypeObject */

#ifdef __cplusplus
}
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, what());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard {
    PyThread_type_lock &mutex_;

  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex) {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }

    ~Guard() {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Eigen__Matrix3cd swig_types[0]
#define SWIGTYPE_p_PropertyMap swig_types[1]
#define SWIGTYPE_p_SwigPyObject swig_types[2]
#define SWIGTYPE_p_Vector3c swig_types[3]
#define SWIGTYPE_p_allocator_type swig_types[4]
#define SWIGTYPE_p_bool swig_types[5]
#define SWIGTYPE_p_candidate_vector_t swig_types[6]
#define SWIGTYPE_p_char swig_types[7]
#define SWIGTYPE_p_char_type swig_types[8]
#define SWIGTYPE_p_complex_d swig_types[9]
#define SWIGTYPE_p_complex_f swig_types[10]
#define SWIGTYPE_p_const_iterator swig_types[11]
#define SWIGTYPE_p_const_reference swig_types[12]
#define SWIGTYPE_p_crpropa__AbstractAccelerationModule swig_types[13]
#define SWIGTYPE_p_crpropa__AbstractCondition swig_types[14]
#define SWIGTYPE_p_crpropa__AdiabaticCooling swig_types[15]
#define SWIGTYPE_p_crpropa__AdvectionField swig_types[16]
#define SWIGTYPE_p_crpropa__AdvectionFieldList swig_types[17]
#define SWIGTYPE_p_crpropa__ArchimedeanSpiralField swig_types[18]
#define SWIGTYPE_p_crpropa__BlackbodyPhotonField swig_types[19]
#define SWIGTYPE_p_crpropa__CMB swig_types[20]
#define SWIGTYPE_p_crpropa__CMZField swig_types[21]
#define SWIGTYPE_p_crpropa__Candidate swig_types[22]
#define SWIGTYPE_p_crpropa__CandidateSplitting swig_types[23]
#define SWIGTYPE_p_crpropa__ConstantDensity swig_types[24]
#define SWIGTYPE_p_crpropa__ConstantMomentumDiffusion swig_types[25]
#define SWIGTYPE_p_crpropa__ConstantSphericalAdvectionField swig_types[26]
#define SWIGTYPE_p_crpropa__Cordes swig_types[27]
#define SWIGTYPE_p_crpropa__CubicBoundary swig_types[28]
#define SWIGTYPE_p_crpropa__CylindricalBoundary swig_types[29]
#define SWIGTYPE_p_crpropa__CylindricalProjectionMap swig_types[30]
#define SWIGTYPE_p_crpropa__Deactivation swig_types[31]
#define SWIGTYPE_p_crpropa__Density swig_types[32]
#define SWIGTYPE_p_crpropa__DensityGrid swig_types[33]
#define SWIGTYPE_p_crpropa__DensityList swig_types[34]
#define SWIGTYPE_p_crpropa__DetectionLength swig_types[35]
#define SWIGTYPE_p_crpropa__DiffusionSDE swig_types[36]
#define SWIGTYPE_p_crpropa__DirectedFlowOfScatterCenters swig_types[37]
#define SWIGTYPE_p_crpropa__DirectedFlowScattering swig_types[38]
#define SWIGTYPE_p_crpropa__EMDoublePairProduction swig_types[39]
#define SWIGTYPE_p_crpropa__EMInverseComptonScattering swig_types[40]
#define SWIGTYPE_p_crpropa__EMPairProduction swig_types[41]
#define SWIGTYPE_p_crpropa__EMTripletPairProduction swig_types[42]
#define SWIGTYPE_p_crpropa__ElasticScattering swig_types[43]
#define SWIGTYPE_p_crpropa__ElectronPairProduction swig_types[44]
#define SWIGTYPE_p_crpropa__EllipsoidalBoundary swig_types[45]
#define SWIGTYPE_p_crpropa__EmissionMap swig_types[46]
#define SWIGTYPE_p_crpropa__EmissionMapFiller swig_types[47]
#define SWIGTYPE_p_crpropa__Ferriere swig_types[48]
#define SWIGTYPE_p_crpropa__FutureRedshift swig_types[49]
#define SWIGTYPE_p_crpropa__GridProperties swig_types[50]
#define SWIGTYPE_p_crpropa__GridT_crpropa__Vector3T_double_t_t swig_types[51]
#define SWIGTYPE_p_crpropa__GridT_crpropa__Vector3T_float_t_t swig_types[52]
#define SWIGTYPE_p_crpropa__GridT_double_t swig_types[53]
#define SWIGTYPE_p_crpropa__GridT_float_t swig_types[54]
#define SWIGTYPE_p_crpropa__IRB_Dominguez11 swig_types[55]
#define SWIGTYPE_p_crpropa__IRB_Finke10 swig_types[56]
#define SWIGTYPE_p_crpropa__IRB_Finke22 swig_types[57]
#define SWIGTYPE_p_crpropa__IRB_Franceschini08 swig_types[58]
#define SWIGTYPE_p_crpropa__IRB_Gilmore12 swig_types[59]
#define SWIGTYPE_p_crpropa__IRB_Kneiske04 swig_types[60]
#define SWIGTYPE_p_crpropa__IRB_Saldana21 swig_types[61]
#define SWIGTYPE_p_crpropa__IRB_Saldana21_lower swig_types[62]
#define SWIGTYPE_p_crpropa__IRB_Saldana21_upper swig_types[63]
#define SWIGTYPE_p_crpropa__IRB_Stecker05 swig_types[64]
#define SWIGTYPE_p_crpropa__IRB_Stecker16_lower swig_types[65]
#define SWIGTYPE_p_crpropa__IRB_Stecker16_upper swig_types[66]
#define SWIGTYPE_p_crpropa__JF12Field swig_types[67]
#define SWIGTYPE_p_crpropa__JF12FieldSolenoidal swig_types[68]
#define SWIGTYPE_p_crpropa__KST24Field swig_types[69]
#define SWIGTYPE_p_crpropa__LogarithmicSpiralField swig_types[70]
#define SWIGTYPE_p_crpropa__MagneticDipoleField swig_types[71]
#define SWIGTYPE_p_crpropa__MagneticField swig_types[72]
#define SWIGTYPE_p_crpropa__MagneticFieldEvolution swig_types[73]
#define SWIGTYPE_p_crpropa__MagneticFieldGrid swig_types[74]
#define SWIGTYPE_p_crpropa__MagneticFieldList swig_types[75]
#define SWIGTYPE_p_crpropa__MaximumTrajectoryLength swig_types[76]
#define SWIGTYPE_p_crpropa__MinimumChargeNumber swig_types[77]
#define SWIGTYPE_p_crpropa__MinimumEnergy swig_types[78]
#define SWIGTYPE_p_crpropa__MinimumEnergyPerParticleId swig_types[79]
#define SWIGTYPE_p_crpropa__MinimumRedshift swig_types[80]
#define SWIGTYPE_p_crpropa__MinimumRigidity swig_types[81]
#define SWIGTYPE_p_crpropa__ModulatedMagneticFieldGrid swig_types[82]
#define SWIGTYPE_p_crpropa__Module swig_types[83]
#define SWIGTYPE_p_crpropa__ModuleList swig_types[84]
#define SWIGTYPE_p_crpropa__ModuleListRunner swig_types[85]
#define SWIGTYPE_p_crpropa__Nakanishi swig_types[86]
#define SWIGTYPE_p_crpropa__NuclearDecay swig_types[87]
#define SWIGTYPE_p_crpropa__ObliqueAdvectionShock swig_types[88]
#define SWIGTYPE_p_crpropa__Observer swig_types[89]
#define SWIGTYPE_p_crpropa__Observer1D swig_types[90]
#define SWIGTYPE_p_crpropa__ObserverDetectAll swig_types[91]
#define SWIGTYPE_p_crpropa__ObserverElectronVeto swig_types[92]
#define SWIGTYPE_p_crpropa__ObserverFeature swig_types[93]
#define SWIGTYPE_p_crpropa__ObserverInactiveVeto swig_types[94]
#define SWIGTYPE_p_crpropa__ObserverNeutrinoVeto swig_types[95]
#define SWIGTYPE_p_crpropa__ObserverNucleusVeto swig_types[96]
#define SWIGTYPE_p_crpropa__ObserverParticleIdVeto swig_types[97]
#define SWIGTYPE_p_crpropa__ObserverPhotonVeto swig_types[98]
#define SWIGTYPE_p_crpropa__ObserverRedshiftWindow swig_types[99]
#define SWIGTYPE_p_crpropa__ObserverSurface swig_types[100]
#define SWIGTYPE_p_crpropa__ObserverTimeEvolution swig_types[101]
#define SWIGTYPE_p_crpropa__ObserverTracking swig_types[102]
#define SWIGTYPE_p_crpropa__OneDimensionalCartesianShock swig_types[103]
#define SWIGTYPE_p_crpropa__OneDimensionalSphericalShock swig_types[104]
#define SWIGTYPE_p_crpropa__Output swig_types[105]
#define SWIGTYPE_p_crpropa__PT11Field swig_types[106]
#define SWIGTYPE_p_crpropa__ParaxialBox swig_types[107]
#define SWIGTYPE_p_crpropa__ParticleCollector swig_types[108]
#define SWIGTYPE_p_crpropa__ParticleFilter swig_types[109]
#define SWIGTYPE_p_crpropa__ParticleSplitting swig_types[110]
#define SWIGTYPE_p_crpropa__PerformanceModule swig_types[111]
#define SWIGTYPE_p_crpropa__PeriodicBox swig_types[112]
#define SWIGTYPE_p_crpropa__PeriodicMagneticField swig_types[113]
#define SWIGTYPE_p_crpropa__PhotoDisintegration swig_types[114]
#define SWIGTYPE_p_crpropa__PhotoPionProduction swig_types[115]
#define SWIGTYPE_p_crpropa__PhotonField swig_types[116]
#define SWIGTYPE_p_crpropa__PhotonOutput1D swig_types[117]
#define SWIGTYPE_p_crpropa__PlanckJF12bField swig_types[118]
#define SWIGTYPE_p_crpropa__Plane swig_types[119]
#define SWIGTYPE_p_crpropa__PlaneWaveTurbulence swig_types[120]
#define SWIGTYPE_p_crpropa__PolarizedSingleModeMagneticField swig_types[121]
#define SWIGTYPE_p_crpropa__PropagationBP swig_types[122]
#define SWIGTYPE_p_crpropa__PropagationCK swig_types[123]
#define SWIGTYPE_p_crpropa__QuasiLinearTheory swig_types[124]
#define SWIGTYPE_p_crpropa__Redshift swig_types[125]
#define SWIGTYPE_p_crpropa__Referenced swig_types[126]
#define SWIGTYPE_p_crpropa__ReflectiveBox swig_types[127]
#define SWIGTYPE_p_crpropa__ReflectiveShell swig_types[128]
#define SWIGTYPE_p_crpropa__RestrictToRegion swig_types[129]
#define SWIGTYPE_p_crpropa__SecondOrderFermi swig_types[130]
#define SWIGTYPE_p_crpropa__ShellOutput swig_types[131]
#define SWIGTYPE_p_crpropa__ShellOutput1D swig_types[132]
#define SWIGTYPE_p_crpropa__ShellPropertyOutput swig_types[133]
#define SWIGTYPE_p_crpropa__SimplePropagation swig_types[134]
#define SWIGTYPE_p_crpropa__Source swig_types[135]
#define SWIGTYPE_p_crpropa__SourceComposition swig_types[136]
#define SWIGTYPE_p_crpropa__SourceDensityGrid swig_types[137]
#define SWIGTYPE_p_crpropa__SourceDensityGrid1D swig_types[138]
#define SWIGTYPE_p_crpropa__SourceDirectedEmission swig_types[139]
#define SWIGTYPE_p_crpropa__SourceDirection swig_types[140]
#define SWIGTYPE_p_crpropa__SourceEmissionCone swig_types[141]
#define SWIGTYPE_p_crpropa__SourceEmissionMap swig_types[142]
#define SWIGTYPE_p_crpropa__SourceEnergy swig_types[143]
#define SWIGTYPE_p_crpropa__SourceFeature swig_types[144]
#define SWIGTYPE_p_crpropa__SourceInterface swig_types[145]
#define SWIGTYPE_p_crpropa__SourceIsotropicEmission swig_types[146]
#define SWIGTYPE_p_crpropa__SourceLambertDistributionOnSphere swig_types[147]
#define SWIGTYPE_p_crpropa__SourceList swig_types[148]
#define SWIGTYPE_p_crpropa__SourceMassDistribution swig_types[149]
#define SWIGTYPE_p_crpropa__SourceMultipleParticleTypes swig_types[150]
#define SWIGTYPE_p_crpropa__SourceMultiplePositions swig_types[151]
#define SWIGTYPE_p_crpropa__SourceParticleType swig_types[152]
#define SWIGTYPE_p_crpropa__SourcePosition swig_types[153]
#define SWIGTYPE_p_crpropa__SourcePowerLawSpectrum swig_types[154]
#define SWIGTYPE_p_crpropa__SourcePulsarDistribution swig_types[155]
#define SWIGTYPE_p_crpropa__SourceRedshift swig_types[156]
#define SWIGTYPE_p_crpropa__SourceRedshift1D swig_types[157]
#define SWIGTYPE_p_crpropa__SourceRedshiftEvolution swig_types[158]
#define SWIGTYPE_p_crpropa__SourceSNRDistribution swig_types[159]
#define SWIGTYPE_p_crpropa__SourceTag swig_types[160]
#define SWIGTYPE_p_crpropa__SourceUniform1D swig_types[161]
#define SWIGTYPE_p_crpropa__SourceUniformBox swig_types[162]
#define SWIGTYPE_p_crpropa__SourceUniformCylinder swig_types[163]
#define SWIGTYPE_p_crpropa__SourceUniformHollowSphere swig_types[164]
#define SWIGTYPE_p_crpropa__SourceUniformRedshift swig_types[165]
#define SWIGTYPE_p_crpropa__SourceUniformShell swig_types[166]
#define SWIGTYPE_p_crpropa__SourceUniformSphere swig_types[167]
#define SWIGTYPE_p_crpropa__Sphere swig_types[168]
#define SWIGTYPE_p_crpropa__SphericalAdvectionField swig_types[169]
#define SWIGTYPE_p_crpropa__SphericalAdvectionShock swig_types[170]
#define SWIGTYPE_p_crpropa__SphericalBoundary swig_types[171]
#define SWIGTYPE_p_crpropa__StepLengthModifier swig_types[172]
#define SWIGTYPE_p_crpropa__Surface swig_types[173]
#define SWIGTYPE_p_crpropa__SynchrotronRadiation swig_types[174]
#define SWIGTYPE_p_crpropa__TF17Field swig_types[175]
#define SWIGTYPE_p_crpropa__TabularPhotonField swig_types[176]
#define SWIGTYPE_p_crpropa__TextOutput swig_types[177]
#define SWIGTYPE_p_crpropa__ToroidalHaloField swig_types[178]
#define SWIGTYPE_p_crpropa__TurbulenceSpectrum swig_types[179]
#define SWIGTYPE_p_crpropa__TurbulentField swig_types[180]
#define SWIGTYPE_p_crpropa__UF23Field swig_types[181]
#define SWIGTYPE_p_crpropa__URB_Fixsen11 swig_types[182]
#define SWIGTYPE_p_crpropa__URB_Nitu21 swig_types[183]
#define SWIGTYPE_p_crpropa__URB_Protheroe96 swig_types[184]
#define SWIGTYPE_p_crpropa__UniformAdvectionField swig_types[185]
#define SWIGTYPE_p_crpropa__UniformMagneticField swig_types[186]
#define SWIGTYPE_p_crpropa__Vector3T_double_t swig_types[187]
#define SWIGTYPE_p_crpropa__Vector3T_float_t swig_types[188]
#define SWIGTYPE_p_crpropa__ref_ptrT_Channels_t swig_types[189]
#define SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoField_t swig_types[190]
#define SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoMixing_t swig_types[191]
#define SWIGTYPE_p_crpropa__ref_ptrT_crpropa__PhotonField_t swig_types[192]
#define SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t swig_types[193]
#define SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t swig_types[194]
#define SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t swig_types[195]
#define SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t swig_types[196]
#define SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t swig_types[197]
#define SWIGTYPE_p_difference_type swig_types[198]
#define SWIGTYPE_p_double swig_types[199]
#define SWIGTYPE_p_element_type swig_types[200]
#define SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void swig_types[201]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[202]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[203]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[204]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[205]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[206]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[207]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[208]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[209]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[210]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[211]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[212]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[213]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base swig_types[214]
#define SWIGTYPE_p_first_type swig_types[215]
#define SWIGTYPE_p_float swig_types[216]
#define SWIGTYPE_p_fmtflags swig_types[217]
#define SWIGTYPE_p_int swig_types[218]
#define SWIGTYPE_p_int_type swig_types[219]
#define SWIGTYPE_p_iostate swig_types[220]
#define SWIGTYPE_p_iterator swig_types[221]
#define SWIGTYPE_p_key_t swig_types[222]
#define SWIGTYPE_p_key_type swig_types[223]
#define SWIGTYPE_p_long swig_types[224]
#define SWIGTYPE_p_long_double swig_types[225]
#define SWIGTYPE_p_long_long swig_types[226]
#define SWIGTYPE_p_map_t swig_types[227]
#define SWIGTYPE_p_module_list_t swig_types[228]
#define SWIGTYPE_p_nupropa__BlackbodyNeutrinoField swig_types[229]
#define SWIGTYPE_p_nupropa__Channels swig_types[230]
#define SWIGTYPE_p_nupropa__ChannelsBundle swig_types[231]
#define SWIGTYPE_p_nupropa__CnuBm1 swig_types[232]
#define SWIGTYPE_p_nupropa__CnuBm2 swig_types[233]
#define SWIGTYPE_p_nupropa__CnuBm3 swig_types[234]
#define SWIGTYPE_p_nupropa__NeutrinoAntineutrinoInteraction swig_types[235]
#define SWIGTYPE_p_nupropa__NeutrinoField swig_types[236]
#define SWIGTYPE_p_nupropa__NeutrinoMixing swig_types[237]
#define SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction swig_types[238]
#define SWIGTYPE_p_nupropa__NeutrinoOscillation swig_types[239]
#define SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction swig_types[240]
#define SWIGTYPE_p_nupropa__ParticleData swig_types[241]
#define SWIGTYPE_p_nupropa__RelativisticInteraction swig_types[242]
#define SWIGTYPE_p_off_type swig_types[243]
#define SWIGTYPE_p_openmode swig_types[244]
#define SWIGTYPE_p_p_PyObject swig_types[245]
#define SWIGTYPE_p_p_void swig_types[246]
#define SWIGTYPE_p_pos_type swig_types[247]
#define SWIGTYPE_p_reference swig_types[248]
#define SWIGTYPE_p_second_type swig_types[249]
#define SWIGTYPE_p_seekdir swig_types[250]
#define SWIGTYPE_p_short swig_types[251]
#define SWIGTYPE_p_signed_char swig_types[252]
#define SWIGTYPE_p_size_t swig_types[253]
#define SWIGTYPE_p_size_type swig_types[254]
#define SWIGTYPE_p_state_type swig_types[255]
#define SWIGTYPE_p_std__allocatorT_char_t swig_types[256]
#define SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[257]
#define SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[258]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[259]
#define SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[260]
#define SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t swig_types[261]
#define SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[262]
#define SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator swig_types[263]
#define SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__reverse_iterator swig_types[264]
#define SWIGTYPE_p_std__invalid_argument swig_types[265]
#define SWIGTYPE_p_std__ios_base swig_types[266]
#define SWIGTYPE_p_std__locale swig_types[267]
#define SWIGTYPE_p_std__unordered_mapT_int_double_t swig_types[268]
#define SWIGTYPE_p_std__vectorT_bool_std__allocatorT_bool_t_t swig_types[269]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[270]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[271]
#define SWIGTYPE_p_std__vectorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_std__allocatorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_t_t swig_types[272]
#define SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t swig_types[273]
#define SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t swig_types[274]
#define SWIGTYPE_p_streamoff swig_types[275]
#define SWIGTYPE_p_streampos swig_types[276]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[277]
#define SWIGTYPE_p_traits_type swig_types[278]
#define SWIGTYPE_p_unsigned_char swig_types[279]
#define SWIGTYPE_p_unsigned_int swig_types[280]
#define SWIGTYPE_p_unsigned_long swig_types[281]
#define SWIGTYPE_p_unsigned_long_long swig_types[282]
#define SWIGTYPE_p_unsigned_short swig_types[283]
#define SWIGTYPE_p_value_type swig_types[284]
#define SWIGTYPE_p_vector_const_iterator swig_types[285]
#define SWIGTYPE_p_vector_iterator swig_types[286]
#define SWIGTYPE_p_vector_t swig_types[287]
static swig_type_info *swig_types[289];
static swig_module_info swig_module = {swig_types, 288, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _nupropa.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__nupropa

#else
#  define SWIG_init    init_nupropa

#endif
#define SWIG_name    "_nupropa"

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <stddef.h>


#include <stdint.h>		// Use the C99 official header


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICEOBJECT PyObject
#else
# define SWIGPY_SLICEOBJECT PySliceObject
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <complex> 


#ifndef SWIG_STD_NOMODERN_STL
# include <ios>
#else
# include <streambuf.h>
#endif


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    if (PyString_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      int res = SWIG_ERROR;
      swig_type_info *descriptor = type_info<Type>();
      if (val) {
        Type *p = 0;
        int newmem = 0;
        res = descriptor ? SWIG_ConvertPtrAndOwn(obj, (void **)&p, descriptor, 0, &newmem) : SWIG_ERROR;
        if (SWIG_IsOK(res)) {
          if (newmem & SWIG_CAST_NEW_MEMORY) {
            res |= SWIG_NEWOBJMASK;
          }
          *val = p;
        }
      } else {
        res = descriptor ? SWIG_ConvertPtr(obj, 0, descriptor, 0) : SWIG_ERROR;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


namespace swig {
  template <> struct traits< char > {
    typedef value_category category;
    static const char* type_name() { return"char"; }
  };
  template <>  struct traits_asval< char > {
    typedef char value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_char (obj, val);
    }
  };
  template <>  struct traits_from< char > {
    typedef char value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_char  (val);
    }
  };
}





SWIGINTERN int
SWIG_AsPtr_std_basic_string_Sl_char_Sg_ (PyObject* obj, std::string **val) {
  static swig_type_info* string_info = SWIG_TypeQuery("std::basic_string<char> *");
  std::string *vptr;
  if (SWIG_IsOK(SWIG_ConvertPtr(obj, (void**)&vptr, string_info, 0))) {
    if (val) *val = vptr;
    return SWIG_OLDOBJ;
  } else {
    PyErr_Clear();
    char* buf = 0 ; size_t size = 0; int alloc = 0;
    if (SWIG_IsOK(SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc))) {
      if (buf) {
	if (val) *val = new std::string(buf, size - 1);
	if (alloc == SWIG_NEWOBJ) delete[] buf;
	return SWIG_NEWOBJ;
      } else {
        if (val) *val = 0;
        return SWIG_OLDOBJ;
      }
    }
    return SWIG_ERROR;
  }
}

SWIGINTERN void std_basic_string_Sl_char_Sg__shrink_to_fit(std::basic_string< char > *self){
        #if __cplusplus >= 202002L
          self->shrink_to_fit();
        #else
          self->reserve();
        #endif
      }

SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_std_basic_string_Sl_char_Sg_  (const std::string& s) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  }

SWIGINTERN std::basic_string< char >::iterator std_basic_string_Sl_char_Sg__erase__SWIG_3(std::basic_string< char > *self,std::basic_string< char >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::basic_string< char >::iterator std_basic_string_Sl_char_Sg__erase__SWIG_4(std::basic_string< char > *self,std::basic_string< char >::iterator first,std::basic_string< char >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::basic_string< char >::iterator std_basic_string_Sl_char_Sg__insert__SWIG_4(std::basic_string< char > *self,std::basic_string< char >::iterator pos,std::basic_string< char >::value_type x){ return self->insert(pos, x); }
SWIGINTERN void std_basic_string_Sl_char_Sg__insert__SWIG_5(std::basic_string< char > *self,std::basic_string< char >::iterator pos,std::basic_string< char >::size_type n,std::basic_string< char >::value_type x){ self->insert(pos, n, x); }

#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount && it != self->end(); ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount && it != self->rend(); ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyForwardIteratorOpen_T<OutIterator>(curr, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

  protected:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> base0;
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == base0::begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }
  };


  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorOpen_T<OutIter>(current, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item);
      } catch (const std::invalid_argument& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check() const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item))
	  return false;
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}

SWIGINTERN swig::SwigPyIterator *std_basic_string_Sl_char_Sg__iterator(std::basic_string< char > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_basic_string_Sl_char_Sg____nonzero__(std::basic_string< char > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_basic_string_Sl_char_Sg____bool__(std::basic_string< char > const *self){
      return !(self->empty());
    }
SWIGINTERN std::basic_string< char >::size_type std_basic_string_Sl_char_Sg____len__(std::basic_string< char > const *self){
      return self->size();
    }
SWIGINTERN std::basic_string< char,std::char_traits< char >,std::allocator< char > > *std_basic_string_Sl_char_Sg____getslice__(std::basic_string< char > *self,std::basic_string< char >::difference_type i,std::basic_string< char >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_basic_string_Sl_char_Sg____setslice____SWIG_0(std::basic_string< char > *self,std::basic_string< char >::difference_type i,std::basic_string< char >::difference_type j){
      swig::setslice(self, i, j, 1, std::basic_string< char,std::char_traits< char >,std::allocator< char > >());
    }
SWIGINTERN void std_basic_string_Sl_char_Sg____setslice____SWIG_1(std::basic_string< char > *self,std::basic_string< char >::difference_type i,std::basic_string< char >::difference_type j,std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_basic_string_Sl_char_Sg____delslice__(std::basic_string< char > *self,std::basic_string< char >::difference_type i,std::basic_string< char >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_basic_string_Sl_char_Sg____delitem____SWIG_0(std::basic_string< char > *self,std::basic_string< char >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::basic_string< char,std::char_traits< char >,std::allocator< char > > *std_basic_string_Sl_char_Sg____getitem____SWIG_0(std::basic_string< char > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::basic_string< char,std::char_traits< char >,std::allocator< char > >::difference_type id = i;
      std::basic_string< char,std::char_traits< char >,std::allocator< char > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_basic_string_Sl_char_Sg____setitem____SWIG_0(std::basic_string< char > *self,SWIGPY_SLICEOBJECT *slice,std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::basic_string< char,std::char_traits< char >,std::allocator< char > >::difference_type id = i;
      std::basic_string< char,std::char_traits< char >,std::allocator< char > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_basic_string_Sl_char_Sg____setitem____SWIG_1(std::basic_string< char > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::basic_string< char,std::char_traits< char >,std::allocator< char > >::difference_type id = i;
      std::basic_string< char,std::char_traits< char >,std::allocator< char > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_basic_string_Sl_char_Sg____delitem____SWIG_1(std::basic_string< char > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::basic_string< char,std::char_traits< char >,std::allocator< char > >::difference_type id = i;
      std::basic_string< char,std::char_traits< char >,std::allocator< char > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::basic_string< char >::value_type std_basic_string_Sl_char_Sg____getitem____SWIG_1(std::basic_string< char > *self,std::basic_string< char >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_basic_string_Sl_char_Sg____setitem____SWIG_2(std::basic_string< char > *self,std::basic_string< char >::difference_type i,std::basic_string< char >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_basic_string_Sl_char_Sg____setitem____SWIG_3(std::basic_string< char > *self,std::basic_string< char >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::basic_string< char,std::char_traits< char >,std::allocator< char > > *std_basic_string_Sl_char_Sg____add__(std::basic_string< char > *self,std::basic_string< char > const &v){
	std::basic_string< char,std::char_traits< char >,std::allocator< char > >* res = new std::basic_string< char,std::char_traits< char >,std::allocator< char > >(*self);
	*res += v;      
	return res;
      }
SWIGINTERN std::basic_string< char,std::char_traits< char >,std::allocator< char > > *std_basic_string_Sl_char_Sg____radd__(std::basic_string< char > *self,std::basic_string< char > const &v){
	std::basic_string< char,std::char_traits< char >,std::allocator< char > >* res = new std::basic_string< char,std::char_traits< char >,std::allocator< char > >(v);
	*res += *self;      
	return res;
      }
SWIGINTERN std::basic_string< char,std::char_traits< char >,std::allocator< char > > std_basic_string_Sl_char_Sg____str__(std::basic_string< char > *self){
	return *self;
      }
SWIGINTERN std::basic_ostream< char,std::char_traits< char > > &std_basic_string_Sl_char_Sg____rlshift__(std::basic_string< char > *self,std::basic_ostream< char,std::char_traits< char > > &out){
	out << *self;
	return out;
      }
SWIGINTERN bool std_basic_string_Sl_char_Sg__operator_Se__Se_(std::basic_string< char > *self,std::basic_string< char > const &v){
    return *self == v;
  }
SWIGINTERN bool std_basic_string_Sl_char_Sg__operator_SN__Se_(std::basic_string< char > *self,std::basic_string< char > const &v){
    return *self != v;
  }
SWIGINTERN bool std_basic_string_Sl_char_Sg__operator_Sg_(std::basic_string< char > *self,std::basic_string< char > const &v){
    return *self > v;
  }
SWIGINTERN bool std_basic_string_Sl_char_Sg__operator_Sl_(std::basic_string< char > *self,std::basic_string< char > const &v){
    return *self < v;
  }
SWIGINTERN bool std_basic_string_Sl_char_Sg__operator_Sg__Se_(std::basic_string< char > *self,std::basic_string< char > const &v){
    return *self >= v;
  }
SWIGINTERN bool std_basic_string_Sl_char_Sg__operator_Sl__Se_(std::basic_string< char > *self,std::basic_string< char > const &v){
    return *self <= v;
  }

#include <iostream>


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}

SWIGINTERN std::basic_ostream< char,std::char_traits< char > > &std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(std::basic_ostream< char > *self,std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &s){
	  *self << s;
	  return *self;
	}

#include <list>


#include <utility>


#include <map>


#include <algorithm>


#include <set>


#include <vector>


#include "CRPropa.h"
#include "nupropa/NeutrinoNeutrinoInteraction.h"
#include "nupropa/NeutrinoAntineutrinoInteraction.h"
#include "nupropa/NeutrinoPhotonInteraction.h"
#include "nupropa/Channels.h"
#include "nupropa/ChannelsBundle.h"
#include "nupropa/NeutrinoField.h"
#include "nupropa/RelativisticInteraction.h"
#include "nupropa/ParticleData.h" 
#include "nupropa/NeutrinoMixing.h"
#include "nupropa/NeutrinoOscillation.h"

using namespace nupropa;


  #define SWIG_From_double   PyFloat_FromDouble 



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "nupropa_wrap.h"

SwigDirector_Channels::SwigDirector_Channels(PyObject *self): nupropa::Channels(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((nupropa::Channels *)this, this); 
}




SwigDirector_Channels::SwigDirector_Channels(PyObject *self,std::vector< std::string,std::allocator< std::string > > interactionChannels,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > productsID,std::vector< bool,std::allocator< bool > > active,std::string interactionFolderPath): nupropa::Channels(interactionChannels, productsID, active, interactionFolderPath), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((nupropa::Channels *)this, this); 
}




SwigDirector_Channels::~SwigDirector_Channels() {
}

SwigDirector_ChannelsBundle::SwigDirector_ChannelsBundle(PyObject *self,crpropa::ref_ptr< nupropa::Channels > channels,std::string fname): nupropa::ChannelsBundle(channels, fname), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((nupropa::ChannelsBundle *)this, this); 
}




SwigDirector_ChannelsBundle::~SwigDirector_ChannelsBundle() {
}

SwigDirector_NeutrinoField::SwigDirector_NeutrinoField(PyObject *self): nupropa::NeutrinoField(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((nupropa::NeutrinoField *)this, this); 
}




SwigDirector_NeutrinoField::~SwigDirector_NeutrinoField() {
}

double SwigDirector_NeutrinoField::getNeutrinoDensity(double eNeutrino,double z) const {
  double c_result = SwigValueInit< double >() ;
  
  PyObject *self = NULL;
  (void)self;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_double(static_cast< double >(eNeutrino));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_double(static_cast< double >(z));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call NeutrinoField.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 0;
    const char *const swig_method_name = "getNeutrinoDensity";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("getNeutrinoDensity");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      {
        if( error != NULL ) {
          PyObject *ptype, *pvalue, *ptraceback;
          PyErr_Fetch( &ptype, &pvalue, &ptraceback );
          PyErr_Restore( ptype, pvalue, ptraceback );
          PyErr_Print();
          Py_Exit(1);
        }
      }
    }
    double swig_val;
    int swig_res = SWIG_AsVal_double(result, &swig_val);
    if (!SWIG_IsOK(swig_res)) {
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""double""'");
    }
    c_result = static_cast< double >(swig_val);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (double) c_result;
}


double SwigDirector_NeutrinoField::getMinimumNeutrinoEnergy(double z) const {
  double c_result = SwigValueInit< double >() ;
  
  PyObject *self = NULL;
  (void)self;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_double(static_cast< double >(z));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call NeutrinoField.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 2;
    const char *const swig_method_name = "getMinimumNeutrinoEnergy";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("getMinimumNeutrinoEnergy");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      {
        if( error != NULL ) {
          PyObject *ptype, *pvalue, *ptraceback;
          PyErr_Fetch( &ptype, &pvalue, &ptraceback );
          PyErr_Restore( ptype, pvalue, ptraceback );
          PyErr_Print();
          Py_Exit(1);
        }
      }
    }
    double swig_val;
    int swig_res = SWIG_AsVal_double(result, &swig_val);
    if (!SWIG_IsOK(swig_res)) {
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""double""'");
    }
    c_result = static_cast< double >(swig_val);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (double) c_result;
}


double SwigDirector_NeutrinoField::getMaximumNeutrinoEnergy(double z) const {
  double c_result = SwigValueInit< double >() ;
  
  PyObject *self = NULL;
  (void)self;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_double(static_cast< double >(z));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call NeutrinoField.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 3;
    const char *const swig_method_name = "getMaximumNeutrinoEnergy";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("getMaximumNeutrinoEnergy");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      {
        if( error != NULL ) {
          PyObject *ptype, *pvalue, *ptraceback;
          PyErr_Fetch( &ptype, &pvalue, &ptraceback );
          PyErr_Restore( ptype, pvalue, ptraceback );
          PyErr_Print();
          Py_Exit(1);
        }
      }
    }
    double swig_val;
    int swig_res = SWIG_AsVal_double(result, &swig_val);
    if (!SWIG_IsOK(swig_res)) {
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""double""'");
    }
    c_result = static_cast< double >(swig_val);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (double) c_result;
}


std::string SwigDirector_NeutrinoField::getFieldName() const {
  std::string c_result;
  PyObject *self = NULL;
  (void)self;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call NeutrinoField.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 4;
    const char *const swig_method_name = "getFieldName";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject args = PyTuple_New(0);
    swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("getFieldName");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      {
        if( error != NULL ) {
          PyObject *ptype, *pvalue, *ptraceback;
          PyErr_Fetch( &ptype, &pvalue, &ptraceback );
          PyErr_Restore( ptype, pvalue, ptraceback );
          PyErr_Print();
          Py_Exit(1);
        }
      }
    }
    std::basic_string<char> *swig_optr = 0;
    int swig_ores = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(result, &swig_optr);
    if (!SWIG_IsOK(swig_ores) || !swig_optr) {
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError((swig_optr ? swig_ores : SWIG_TypeError))), "in output value of type '""std::string""'");
    }
    c_result = *swig_optr;
    if (SWIG_IsNewObj(swig_ores)) delete swig_optr;
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (std::string) c_result;
}


double SwigDirector_NeutrinoField::getRedshiftScaling(double z) const {
  double c_result = SwigValueInit< double >() ;
  
  PyObject *self = NULL;
  (void)self;
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_double(static_cast< double >(z));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call NeutrinoField.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 5;
    const char *const swig_method_name = "getRedshiftScaling";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("getRedshiftScaling");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      {
        if( error != NULL ) {
          PyObject *ptype, *pvalue, *ptraceback;
          PyErr_Fetch( &ptype, &pvalue, &ptraceback );
          PyErr_Restore( ptype, pvalue, ptraceback );
          PyErr_Print();
          Py_Exit(1);
        }
      }
    }
    double swig_val;
    int swig_res = SWIG_AsVal_double(result, &swig_val);
    if (!SWIG_IsOK(swig_res)) {
      Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""double""'");
    }
    c_result = static_cast< double >(swig_val);
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
  return (double) c_result;
}


SwigDirector_RelativisticInteraction::SwigDirector_RelativisticInteraction(PyObject *self): nupropa::RelativisticInteraction(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((nupropa::RelativisticInteraction *)this, this); 
}




SwigDirector_RelativisticInteraction::SwigDirector_RelativisticInteraction(PyObject *self,double m1,double m2,double E,double s): nupropa::RelativisticInteraction(m1, m2, E, s), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((nupropa::RelativisticInteraction *)this, this); 
}




SwigDirector_RelativisticInteraction::SwigDirector_RelativisticInteraction(PyObject *self,double m1,double E,double s): nupropa::RelativisticInteraction(m1, E, s), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((nupropa::RelativisticInteraction *)this, this); 
}




SwigDirector_RelativisticInteraction::~SwigDirector_RelativisticInteraction() {
}

SwigDirector_NeutrinoMixing::SwigDirector_NeutrinoMixing(PyObject *self): nupropa::NeutrinoMixing(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((nupropa::NeutrinoMixing *)this, this); 
}




SwigDirector_NeutrinoMixing::SwigDirector_NeutrinoMixing(PyObject *self,double theta13,double theta23,double theta12,double delta): nupropa::NeutrinoMixing(theta13, theta23, theta12, delta), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((nupropa::NeutrinoMixing *)this, this); 
}




SwigDirector_NeutrinoMixing::~SwigDirector_NeutrinoMixing() {
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_SwigPyIterator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_value", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (swig::SwigPyIterator *)(arg1)->incr();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_incr", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (swig::SwigPyIterator *)(arg1)->decr();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_decr", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ptrdiff_t result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_copy", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_next", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (PyObject *)(arg1)->next();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___next__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (PyObject *)(arg1)->__next__();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_previous", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (PyObject *)(arg1)->previous();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ptrdiff_t result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator___sub__", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_SwigPyIterator) /* defines _wrap_delete_SwigPyIterator_destructor_closure */

SWIGPY_ITERNEXTFUNC_CLOSURE(_wrap_SwigPyIterator___next__) /* defines _wrap_SwigPyIterator___next___iternextfunc_closure */

SWIGPY_BINARYFUNC_CLOSURE(_wrap_SwigPyIterator___sub__) /* defines _wrap_SwigPyIterator___sub___binaryfunc_closure */

SWIGINTERN int Swig_var_ios_base_boolalpha_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_boolalpha is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_boolalpha_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::boolalpha));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_boolalpha_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_boolalpha_get();
}


SWIGINTERN int Swig_var_ios_base_dec_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_dec is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_dec_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::dec));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_dec_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_dec_get();
}


SWIGINTERN int Swig_var_ios_base_fixed_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_fixed is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_fixed_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::fixed));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_fixed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_fixed_get();
}


SWIGINTERN int Swig_var_ios_base_hex_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_hex is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_hex_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::hex));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_hex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_hex_get();
}


SWIGINTERN int Swig_var_ios_base_internal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_internal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_internal_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::internal));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_internal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_internal_get();
}


SWIGINTERN int Swig_var_ios_base_left_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_left is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_left_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::left));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_left_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_left_get();
}


SWIGINTERN int Swig_var_ios_base_oct_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_oct is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_oct_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::oct));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_oct_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_oct_get();
}


SWIGINTERN int Swig_var_ios_base_right_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_right is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_right_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::right));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_right_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_right_get();
}


SWIGINTERN int Swig_var_ios_base_scientific_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_scientific is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_scientific_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::scientific));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_scientific_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_scientific_get();
}


SWIGINTERN int Swig_var_ios_base_showbase_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showbase is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showbase_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showbase));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_showbase_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_showbase_get();
}


SWIGINTERN int Swig_var_ios_base_showpoint_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showpoint is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showpoint_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showpoint));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_showpoint_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_showpoint_get();
}


SWIGINTERN int Swig_var_ios_base_showpos_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showpos is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showpos_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showpos));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_showpos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_showpos_get();
}


SWIGINTERN int Swig_var_ios_base_skipws_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_skipws is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_skipws_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::skipws));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_skipws_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_skipws_get();
}


SWIGINTERN int Swig_var_ios_base_unitbuf_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_unitbuf is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_unitbuf_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::unitbuf));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_unitbuf_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_unitbuf_get();
}


SWIGINTERN int Swig_var_ios_base_uppercase_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_uppercase is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_uppercase_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::uppercase));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_uppercase_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_uppercase_get();
}


SWIGINTERN int Swig_var_ios_base_adjustfield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_adjustfield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_adjustfield_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::adjustfield));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_adjustfield_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_adjustfield_get();
}


SWIGINTERN int Swig_var_ios_base_basefield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_basefield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_basefield_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::basefield));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_basefield_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_basefield_get();
}


SWIGINTERN int Swig_var_ios_base_floatfield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_floatfield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_floatfield_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::floatfield));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_floatfield_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_floatfield_get();
}


SWIGINTERN int Swig_var_ios_base_badbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_badbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_badbit_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::badbit));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_badbit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_badbit_get();
}


SWIGINTERN int Swig_var_ios_base_eofbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_eofbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_eofbit_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::eofbit));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_eofbit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_eofbit_get();
}


SWIGINTERN int Swig_var_ios_base_failbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_failbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_failbit_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::failbit));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_failbit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_failbit_get();
}


SWIGINTERN int Swig_var_ios_base_goodbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_goodbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_goodbit_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::goodbit));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_goodbit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_goodbit_get();
}


SWIGINTERN int Swig_var_ios_base_app_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_app is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_app_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::app));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_app_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_app_get();
}


SWIGINTERN int Swig_var_ios_base_ate_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_ate is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_ate_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::ate));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_ate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_ate_get();
}


SWIGINTERN int Swig_var_ios_base_binary_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_binary is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_binary_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::binary));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_binary_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_binary_get();
}


SWIGINTERN int Swig_var_ios_base_ios_base_in_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_ios_base_in is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_ios_base_in_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::in));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_ios_base_in_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_ios_base_in_get();
}


SWIGINTERN int Swig_var_ios_base_out_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_out is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_out_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::out));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_out_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_out_get();
}


SWIGINTERN int Swig_var_ios_base_trunc_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_trunc is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_trunc_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::trunc));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_trunc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_trunc_get();
}


SWIGINTERN int Swig_var_ios_base_beg_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_beg is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_beg_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::beg));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_beg_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_beg_get();
}


SWIGINTERN int Swig_var_ios_base_cur_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_cur is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_cur_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::cur));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_cur_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_cur_get();
}


SWIGINTERN int Swig_var_ios_base_end_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_end is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_end_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::end));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_end_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_end_get();
}


SWIGINTERN PyObject *_wrap_ios_base_register_callback(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::event_callback arg2 = (std::ios_base::event_callback) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ios_base_register_callback", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_register_callback" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ios_base_register_callback" "', argument " "2"" of type '" "std::ios_base::event_callback""'"); 
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_base_register_callback" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->register_callback(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::ios_base::fmtflags result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_flags" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::ios_base::fmtflags)((std::ios_base const *)arg1)->flags();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::ios_base::fmtflags result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_flags" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_flags" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::ios_base::fmtflags)(arg1)->flags(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_base_flags", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_flags__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_flags__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_base_flags'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::flags() const\n"
    "    std::ios_base::flags(std::ios_base::fmtflags)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_setf__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::ios_base::fmtflags result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_setf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_setf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::ios_base::fmtflags)(arg1)->setf(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  std::ios_base::fmtflags arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::ios_base::fmtflags result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_setf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_setf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_base_setf" "', argument " "3"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg3 = static_cast< std::ios_base::fmtflags >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::ios_base::fmtflags)(arg1)->setf(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_base_setf", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_setf__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ios_base_setf__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_base_setf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::setf(std::ios_base::fmtflags)\n"
    "    std::ios_base::setf(std::ios_base::fmtflags,std::ios_base::fmtflags)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_unsetf(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_unsetf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_unsetf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->unsetf(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::streamsize result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_precision" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::ios_base const *)arg1)->precision();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::streamsize result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_precision" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_precision" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->precision(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_base_precision", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_precision__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_precision__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_base_precision'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::precision() const\n"
    "    std::ios_base::precision(std::streamsize)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_width__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::streamsize result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_width" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::ios_base const *)arg1)->width();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::streamsize result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_width" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_width" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->width(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_base_width", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_width__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_width__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_base_width'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::width() const\n"
    "    std::ios_base::width(std::streamsize)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ios_base_sync_with_stdio" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std::ios_base::sync_with_stdio(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  bool result;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std::ios_base::sync_with_stdio();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_base_sync_with_stdio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_ios_base_sync_with_stdio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ios_base_sync_with_stdio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_base_sync_with_stdio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::sync_with_stdio(bool)\n"
    "    std::ios_base::sync_with_stdio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_imbue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::locale *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::locale result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_imbue" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_base_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_base_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->imbue((std::locale const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::locale(result)), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_getloc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::locale result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ios_base_getloc", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_getloc" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::ios_base const *)arg1)->getloc();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::locale(result)), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_xalloc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ios_base_xalloc", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)std::ios_base::xalloc();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_iword(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  long *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_iword" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_iword" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (long *) &(arg1)->iword(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_long, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_pword(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  void **result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_pword" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_pword" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (void **) &(arg1)->pword(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ios_base(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_ios_base", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ios_base" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ios_base) /* defines _wrap_delete_ios_base_destructor_closure */

SWIGINTERN PyObject *_wrap_ios_rdstate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::ios_base::iostate result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ios_rdstate", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdstate" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::ios_base::iostate)((std::basic_ios< char > const *)arg1)->rdstate();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_clear" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_clear" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->clear(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_clear" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->clear();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_clear", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_clear__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_clear__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_clear'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::clear(std::ios_base::iostate)\n"
    "    std::basic_ios< char >::clear()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_setstate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_setstate" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_setstate" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setstate(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_good(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ios_good", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_good" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((std::basic_ios< char > const *)arg1)->good();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_eof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ios_eof", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_eof" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((std::basic_ios< char > const *)arg1)->eof();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fail(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ios_fail", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fail" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((std::basic_ios< char > const *)arg1)->fail();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_bad(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ios_bad", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_bad" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((std::basic_ios< char > const *)arg1)->bad();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::ios_base::iostate result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_exceptions" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::ios_base::iostate)((std::basic_ios< char > const *)arg1)->exceptions();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_exceptions" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_exceptions" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->exceptions(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_exceptions", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_exceptions__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_exceptions__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_exceptions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::exceptions() const\n"
    "    std::basic_ios< char >::exceptions(std::ios_base::iostate)\n");
  return 0;
}


SWIGINTERN int _wrap_new_ios(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ios< char > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ios")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_ios", 1, 1, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ios" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ios< char > *)new std::basic_ios< char >(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_ios(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_ios", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ios" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_tie" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *)((std::basic_ios< char > const *)arg1)->tie();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = (std::basic_ostream< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_tie" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_tie" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *)(arg1)->tie(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_tie", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_tie__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ios_tie__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_tie'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::tie() const\n"
    "    std::basic_ios< char >::tie(std::basic_ostream< char,std::char_traits< char > > *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdbuf" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_streambuf< char,std::char_traits< char > > *)((std::basic_ios< char > const *)arg1)->rdbuf();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdbuf" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_rdbuf" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_streambuf< char,std::char_traits< char > > *)(arg1)->rdbuf(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_rdbuf", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_rdbuf__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ios_rdbuf__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_rdbuf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::rdbuf() const\n"
    "    std::basic_ios< char >::rdbuf(std::basic_streambuf< char,std::char_traits< char > > *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_copyfmt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_ios< char > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_copyfmt" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_copyfmt" "', argument " "2"" of type '" "std::basic_ios< char > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_copyfmt" "', argument " "2"" of type '" "std::basic_ios< char > const &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ios< char > * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ios< char > *) &(arg1)->copyfmt((std::basic_ios< char > const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ios< char >::char_type result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fill" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ios< char >::char_type)((std::basic_ios< char > const *)arg1)->fill();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::basic_ios< char >::char_type result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fill" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_fill" "', argument " "2"" of type '" "std::basic_ios< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ios< char >::char_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ios< char >::char_type)(arg1)->fill(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_fill", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_fill__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_fill__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_fill'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::fill() const\n"
    "    std::basic_ios< char >::fill(std::basic_ios< char >::char_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_imbue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::locale *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::locale result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_imbue" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->imbue((std::locale const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::locale(result)), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_narrow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char >::char_type arg2 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  char result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ios_narrow", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_narrow" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_narrow" "', argument " "2"" of type '" "std::basic_ios< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ios< char >::char_type >(val2);
  ecode3 = SWIG_AsVal_char(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_narrow" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char)((std::basic_ios< char > const *)arg1)->narrow(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_widen(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_ios< char >::char_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_widen" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_widen" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ios< char >::char_type)((std::basic_ios< char > const *)arg1)->widen(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ios) /* defines _wrap_delete_ios_destructor_closure */

SWIGINTERN int Swig_var_string_npos_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable string_npos is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_string_npos_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_size_t(static_cast< size_t >(std::basic_string< char >::npos));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_string_npos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_string_npos_get();
}


SWIGINTERN int _wrap_new_string__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_string" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_string" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *)new std::basic_string< char >((char const *)arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_BUILTIN_INIT |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return -1;
}


SWIGINTERN PyObject *_wrap_string_length(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "string_length", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_length" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->length();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_max_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "string_max_size", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_max_size" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->max_size();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "string_capacity", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_capacity" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->capacity();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_reserve" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_reserve" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->reserve(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_shrink_to_fit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "string_shrink_to_fit", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_shrink_to_fit" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    std_basic_string_Sl_char_Sg__shrink_to_fit(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_assign__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_assign" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_assign" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_assign" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->assign((std::basic_string< char > const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_assign__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_assign" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_assign" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_assign" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_assign" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_assign" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->assign((std::basic_string< char > const &)*arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_assign__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char *arg2 = (char *) 0 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_assign" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_assign" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_assign" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->assign((char const *)arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_insert" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res3 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "string_insert" "', argument " "3"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_insert" "', argument " "3"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->insert(arg2,(std::basic_string< char > const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char > *arg3 = 0 ;
  std::basic_string< char >::size_type arg4 ;
  std::basic_string< char >::size_type arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_insert" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res3 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "string_insert" "', argument " "3"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_insert" "', argument " "3"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_insert" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  ecode5 = SWIG_AsVal_size_t(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "string_insert" "', argument " "5"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg5 = static_cast< std::basic_string< char >::size_type >(val5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->insert(arg2,(std::basic_string< char > const &)*arg3,arg4,arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_insert__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  char *arg3 = (char *) 0 ;
  std::basic_string< char >::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_insert" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "string_insert" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_insert" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->insert(arg2,(char const *)arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_insert__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char >::size_type arg3 ;
  char arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_insert" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_insert" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_char(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_insert" "', argument " "4"" of type '" "char""'");
  } 
  arg4 = static_cast< char >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->insert(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_erase" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_erase" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_erase" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->erase(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_erase" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_erase" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->erase(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_erase__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_erase" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->erase();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_replace__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_replace" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res4 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->replace(arg2,arg3,(std::basic_string< char > const &)*arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_replace__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char > *arg4 = 0 ;
  std::basic_string< char >::size_type arg5 ;
  std::basic_string< char >::size_type arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  size_t val5 ;
  int ecode5 = 0 ;
  size_t val6 ;
  int ecode6 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_replace" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res4 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_size_t(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "string_replace" "', argument " "5"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg5 = static_cast< std::basic_string< char >::size_type >(val5);
  ecode6 = SWIG_AsVal_size_t(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "string_replace" "', argument " "6"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg6 = static_cast< std::basic_string< char >::size_type >(val6);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->replace(arg2,arg3,(std::basic_string< char > const &)*arg4,arg5,arg6);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_replace__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char >::size_type arg3 ;
  char *arg4 = (char *) 0 ;
  std::basic_string< char >::size_type arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_replace" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "string_replace" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_size_t(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "string_replace" "', argument " "5"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg5 = static_cast< std::basic_string< char >::size_type >(val5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->replace(arg2,arg3,(char const *)arg4,arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_replace__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::size_type arg4 ;
  char arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  char val5 ;
  int ecode5 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_replace" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  ecode5 = SWIG_AsVal_char(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "string_replace" "', argument " "5"" of type '" "char""'");
  } 
  arg5 = static_cast< char >(val5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->replace(arg2,arg3,arg4,arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_copy__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char *arg2 = (char *) 0 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_copy" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_copy" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_copy" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_copy" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->copy(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_copy__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char *arg2 = (char *) 0 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_copy" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_copy" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_copy" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->copy(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_copy(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_copy", 0, 4, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_copy__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_copy__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_copy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::copy(char *,std::basic_string< char >::size_type,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::copy(char *,std::basic_string< char >::size_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_c_str(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "string_c_str", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_c_str" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *)((std::basic_string< char > const *)arg1)->c_str();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char *arg2 = (char *) 0 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_find" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find((char const *)arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find((std::basic_string< char > const &)*arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find((std::basic_string< char > const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_find", 0, 4, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string_find__SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_string_find__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_find__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_find'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::find(char const *,std::basic_string< char >::size_type,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find(std::basic_string< char > const &,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find(std::basic_string< char > const &) const\n"
    "    std::basic_string< char >::find(char,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find(char) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_rfind__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_rfind" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_rfind" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_rfind" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_rfind" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->rfind((std::basic_string< char > const &)*arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_rfind__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_rfind" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_rfind" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_rfind" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->rfind((std::basic_string< char > const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_rfind__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char *arg2 = (char *) 0 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_rfind" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_rfind" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_rfind" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_rfind" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->rfind((char const *)arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_rfind__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_rfind" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_rfind" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_rfind" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->rfind(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_rfind__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_rfind" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_rfind" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->rfind(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_rfind(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_rfind", 0, 4, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string_rfind__SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_string_rfind__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_rfind__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_rfind__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_rfind__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_rfind'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::rfind(std::basic_string< char > const &,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::rfind(std::basic_string< char > const &) const\n"
    "    std::basic_string< char >::rfind(char const *,std::basic_string< char >::size_type,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::rfind(char,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::rfind(char) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_find_first_of__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_first_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find_first_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_first_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_first_of((std::basic_string< char > const &)*arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_of__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_first_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find_first_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_first_of((std::basic_string< char > const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_of__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char *arg2 = (char *) 0 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_first_of" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_first_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_find_first_of" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_first_of((char const *)arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_of__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find_first_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_first_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_first_of(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_of__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find_first_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_first_of(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_of(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_find_first_of", 0, 4, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string_find_first_of__SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_string_find_first_of__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find_first_of__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find_first_of__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_find_first_of__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_find_first_of'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::find_first_of(std::basic_string< char > const &,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_first_of(std::basic_string< char > const &) const\n"
    "    std::basic_string< char >::find_first_of(char const *,std::basic_string< char >::size_type,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_first_of(char,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_first_of(char) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_find_last_of__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_last_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find_last_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_last_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_last_of((std::basic_string< char > const &)*arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_of__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_last_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find_last_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_last_of((std::basic_string< char > const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_of__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char *arg2 = (char *) 0 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_last_of" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_last_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_find_last_of" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_last_of((char const *)arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_of__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find_last_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_last_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_last_of(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_of__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find_last_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_last_of(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_of(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_find_last_of", 0, 4, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string_find_last_of__SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_string_find_last_of__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find_last_of__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find_last_of__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_find_last_of__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_find_last_of'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::find_last_of(std::basic_string< char > const &,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_last_of(std::basic_string< char > const &) const\n"
    "    std::basic_string< char >::find_last_of(char const *,std::basic_string< char >::size_type,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_last_of(char,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_last_of(char) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_find_first_not_of__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_first_not_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find_first_not_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_first_not_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_first_not_of((std::basic_string< char > const &)*arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_not_of__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_first_not_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find_first_not_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_first_not_of((std::basic_string< char > const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_not_of__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char *arg2 = (char *) 0 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_first_not_of" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_first_not_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_find_first_not_of" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_first_not_of((char const *)arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_not_of__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find_first_not_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_first_not_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_first_not_of(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_not_of__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find_first_not_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_first_not_of(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_not_of(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_find_first_not_of", 0, 4, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string_find_first_not_of__SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_string_find_first_not_of__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find_first_not_of__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find_first_not_of__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_find_first_not_of__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_find_first_not_of'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::find_first_not_of(std::basic_string< char > const &,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_first_not_of(std::basic_string< char > const &) const\n"
    "    std::basic_string< char >::find_first_not_of(char const *,std::basic_string< char >::size_type,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_first_not_of(char,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_first_not_of(char) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_find_last_not_of__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_last_not_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find_last_not_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_last_not_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_last_not_of((std::basic_string< char > const &)*arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_not_of__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_last_not_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find_last_not_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_last_not_of((std::basic_string< char > const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_not_of__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char *arg2 = (char *) 0 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_last_not_of" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_last_not_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_find_last_not_of" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_last_not_of((char const *)arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_not_of__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find_last_not_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_last_not_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_last_not_of(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_not_of__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find_last_not_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->find_last_not_of(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_not_of(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_find_last_not_of", 0, 4, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string_find_last_not_of__SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_string_find_last_not_of__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find_last_not_of__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find_last_not_of__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_find_last_not_of__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_find_last_not_of'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::find_last_not_of(std::basic_string< char > const &,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_last_not_of(std::basic_string< char > const &) const\n"
    "    std::basic_string< char >::find_last_not_of(char const *,std::basic_string< char >::size_type,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_last_not_of(char,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_last_not_of(char) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_substr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_substr" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_substr" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_substr" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->substr(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_substr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::basic_string< char > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_substr" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_substr" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->substr(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_substr__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_string< char > result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_substr" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->substr();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_substr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_substr", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_string_substr__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string_substr__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_substr__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_substr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::substr(std::basic_string< char >::size_type,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::substr(std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::substr() const\n");
  return 0;
}


SWIGINTERN int _wrap_new_string__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *)new std::basic_string< char >();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_string__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res1 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_string" "', argument " "1"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_string" "', argument " "1"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *)new std::basic_string< char >((std::basic_string< char > const &)*arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN PyObject *_wrap_string_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "string_empty", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_empty" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((std::basic_string< char > const *)arg1)->empty();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "string_size", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_size" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->size();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_swap" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_swap" "', argument " "2"" of type '" "std::basic_string< char > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_swap" "', argument " "2"" of type '" "std::basic_string< char > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_string< char > * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->swap(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_string< char >::iterator result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "string_begin", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_begin" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->begin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::basic_string< char >::iterator(result)), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_string< char >::iterator result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "string_end", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_end" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->end();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::basic_string< char >::iterator(result)), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_string< char >::reverse_iterator result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "string_rbegin", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_rbegin" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rbegin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::basic_string< char >::reverse_iterator(result)), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__reverse_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_string< char >::reverse_iterator result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "string_rend", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_rend" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rend();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::basic_string< char >::reverse_iterator(result)), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__reverse_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< char > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "string_get_allocator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_get_allocator" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_string< char > const *)arg1)->get_allocator();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::basic_string< char >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_char_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_resize" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_resize" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_erase__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::basic_string< char >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_erase" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_erase" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_erase" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    } else {
      std::basic_string< char >::iterator * temp = reinterpret_cast< std::basic_string< char >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_basic_string_Sl_char_Sg__erase__SWIG_3(arg1,SWIG_STD_MOVE(arg2));
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::basic_string< char >::iterator(result)), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_erase__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  std::basic_string< char >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::basic_string< char >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_erase" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_erase" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_erase" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    } else {
      std::basic_string< char >::iterator * temp = reinterpret_cast< std::basic_string< char >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "string_erase" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_erase" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
    } else {
      std::basic_string< char >::iterator * temp = reinterpret_cast< std::basic_string< char >::iterator * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_basic_string_Sl_char_Sg__erase__SWIG_4(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::basic_string< char >::iterator(result)), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_erase", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_string_erase__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_string_erase__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string_erase__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_string_erase__SWIG_4(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_erase__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::erase(std::basic_string< char >::size_type,std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::erase(std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::erase()\n"
    "    std::basic_string< char >::erase(std::basic_string< char >::iterator)\n"
    "    std::basic_string< char >::erase(std::basic_string< char >::iterator,std::basic_string< char >::iterator)\n");
  return 0;
}


SWIGINTERN int _wrap_new_string__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char >::size_type arg1 ;
  std::basic_string< char >::value_type arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_string" "', argument " "1"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg1 = static_cast< std::basic_string< char >::size_type >(val1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_string" "', argument " "2"" of type '" "std::basic_string< char >::value_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::value_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *)new std::basic_string< char >(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_string(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_string")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_string", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_string__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_string__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_string__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_string__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_string'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::basic_string(char const *,std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::basic_string()\n"
    "    std::basic_string< char >::basic_string(std::basic_string< char > const &)\n"
    "    std::basic_string< char >::basic_string(std::basic_string< char >::size_type,std::basic_string< char >::value_type)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_string_assign__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char >::value_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_assign" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_assign" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_assign" "', argument " "3"" of type '" "std::basic_string< char >::value_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::value_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->assign(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_assign(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_assign", 0, 4, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_string_assign__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_assign__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_assign__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_assign__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::assign(std::basic_string< char > const &)\n"
    "    std::basic_string< char >::assign(std::basic_string< char > const &,std::basic_string< char >::size_type,std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::assign(char const *,std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::assign(std::basic_string< char >::size_type,std::basic_string< char >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char >::value_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_resize" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_resize" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_resize" "', argument " "3"" of type '" "std::basic_string< char >::value_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::value_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_resize", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::resize(std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::resize(std::basic_string< char >::size_type,std::basic_string< char >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_insert__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  std::basic_string< char >::value_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_insert" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    } else {
      std::basic_string< char >::iterator * temp = reinterpret_cast< std::basic_string< char >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_insert" "', argument " "3"" of type '" "std::basic_string< char >::value_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::value_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_basic_string_Sl_char_Sg__insert__SWIG_4(arg1,SWIG_STD_MOVE(arg2),arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::basic_string< char >::iterator(result)), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_insert__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::value_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_insert" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    } else {
      std::basic_string< char >::iterator * temp = reinterpret_cast< std::basic_string< char >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_insert" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_char(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_insert" "', argument " "4"" of type '" "std::basic_string< char >::value_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::value_type >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    std_basic_string_Sl_char_Sg__insert__SWIG_5(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "string_iterator", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_iterator" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (swig::SwigPyIterator *)std_basic_string_Sl_char_Sg__iterator(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "string___nonzero__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___nonzero__" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_basic_string_Sl_char_Sg____nonzero__((std::basic_string< char > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "string___bool__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___bool__" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_basic_string_Sl_char_Sg____bool__((std::basic_string< char > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_string< char >::size_type result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "string___len__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___len__" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_basic_string_Sl_char_Sg____len__((std::basic_string< char > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::difference_type arg2 ;
  std::basic_string< char >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "string___getslice__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___getslice__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string___getslice__" "', argument " "2"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string___getslice__" "', argument " "3"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::difference_type >(val3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (std::basic_string< char,std::char_traits< char >,std::allocator< char > > *)std_basic_string_Sl_char_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::difference_type arg2 ;
  std::basic_string< char >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___setslice__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string___setslice__" "', argument " "2"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string___setslice__" "', argument " "3"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::difference_type >(val3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_basic_string_Sl_char_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::difference_type arg2 ;
  std::basic_string< char >::difference_type arg3 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___setslice__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string___setslice__" "', argument " "2"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string___setslice__" "', argument " "3"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::difference_type >(val3);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res4 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "string___setslice__" "', argument " "4"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___setslice__" "', argument " "4"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_basic_string_Sl_char_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "string___setslice__", 0, 4, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[3], (std::basic_string<char>**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_string___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::__setslice__(std::basic_string< char >::difference_type,std::basic_string< char >::difference_type)\n"
    "    std::basic_string< char >::__setslice__(std::basic_string< char >::difference_type,std::basic_string< char >::difference_type,std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::difference_type arg2 ;
  std::basic_string< char >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "string___delslice__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___delslice__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string___delslice__" "', argument " "2"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string___delslice__" "', argument " "3"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::difference_type >(val3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_basic_string_Sl_char_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___delitem__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string___delitem__" "', argument " "2"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::difference_type >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_basic_string_Sl_char_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___getitem__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (std::basic_string< char,std::char_traits< char >,std::allocator< char > > *)std_basic_string_Sl_char_Sg____getitem____SWIG_0(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___setitem__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res3 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "string___setitem__" "', argument " "3"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___setitem__" "', argument " "3"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_basic_string_Sl_char_Sg____setitem____SWIG_0(arg1,arg2,(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___setitem__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_basic_string_Sl_char_Sg____setitem____SWIG_1(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___delitem__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_basic_string_Sl_char_Sg____delitem____SWIG_1(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "string___delitem__", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_string___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::__delitem__(std::basic_string< char >::difference_type)\n"
    "    std::basic_string< char >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::basic_string< char >::value_type result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___getitem__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string___getitem__" "', argument " "2"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::difference_type >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (std::basic_string< char >::value_type)std_basic_string_Sl_char_Sg____getitem____SWIG_1(arg1,SWIG_STD_MOVE(arg2));
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "string___getitem__", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_string___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::basic_string< char >::__getitem__(std::basic_string< char >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::difference_type arg2 ;
  std::basic_string< char >::value_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___setitem__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string___setitem__" "', argument " "2"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string___setitem__" "', argument " "3"" of type '" "std::basic_string< char >::value_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::value_type >(val3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_basic_string_Sl_char_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___setitem____SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___setitem__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string___setitem__" "', argument " "2"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::difference_type >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_basic_string_Sl_char_Sg____setitem____SWIG_3(arg1,SWIG_STD_MOVE(arg2));
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "string___setitem__", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_string___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string___setitem____SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[2], (std::basic_string<char>**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_string___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::__setitem__(SWIGPY_SLICEOBJECT *,std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)\n"
    "    std::basic_string< char >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::basic_string< char >::__setitem__(std::basic_string< char >::difference_type,std::basic_string< char >::value_type)\n"
    "    std::basic_string< char >::__setitem__(std::basic_string< char >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_insert__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  std::basic_string< char >::size_type arg3 ;
  char arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_insert" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_insert" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_char(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_insert" "', argument " "4"" of type '" "char""'");
  } 
  arg4 = static_cast< char >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->insert(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_insert", 0, 5, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_insert__SWIG_4(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[2], (std::basic_string<char>**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_string_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_insert__SWIG_5(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_insert__SWIG_6(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_insert__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_insert__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[2], (std::basic_string<char>**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_string_insert__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::insert(std::basic_string< char >::size_type,std::basic_string< char > const &)\n"
    "    std::basic_string< char >::insert(std::basic_string< char >::size_type,std::basic_string< char > const &,std::basic_string< char >::size_type,std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::insert(std::basic_string< char >::size_type,char const *,std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::insert(std::basic_string< char >::size_type,std::basic_string< char >::size_type,char)\n"
    "    std::basic_string< char >::insert(std::basic_string< char >::iterator,std::basic_string< char >::value_type)\n"
    "    std::basic_string< char >::insert(std::basic_string< char >::iterator,std::basic_string< char >::size_type,std::basic_string< char >::value_type)\n"
    "    std::basic_string< char >::insert(std::basic_string< char >::iterator,std::basic_string< char >::size_type,char)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_replace__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  std::basic_string< char >::iterator arg3 ;
  std::basic_string< char > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  int res4 = SWIG_OLDOBJ ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_replace" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res4 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->replace(arg2,arg3,(std::basic_string< char > const &)*arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_replace__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  std::basic_string< char >::iterator arg3 ;
  char *arg4 = (char *) 0 ;
  std::basic_string< char >::size_type arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_replace" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "string_replace" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_size_t(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "string_replace" "', argument " "5"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg5 = static_cast< std::basic_string< char >::size_type >(val5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->replace(arg2,arg3,(char const *)arg4,arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_replace__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  std::basic_string< char >::iterator arg3 ;
  std::basic_string< char >::size_type arg4 ;
  char arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  size_t val4 ;
  int ecode4 = 0 ;
  char val5 ;
  int ecode5 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_replace" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  ecode5 = SWIG_AsVal_char(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "string_replace" "', argument " "5"" of type '" "char""'");
  } 
  arg5 = static_cast< char >(val5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->replace(arg2,arg3,arg4,arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_replace__SWIG_7(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  std::basic_string< char >::iterator arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_replace" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "string_replace" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "string_replace" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->replace(arg2,arg3,(char const *)arg4,(char const *)arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_replace__SWIG_8(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  std::basic_string< char >::iterator arg3 ;
  std::basic_string< char >::const_iterator arg4 ;
  std::basic_string< char >::const_iterator arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  swig::SwigPyIterator *iter4 = 0 ;
  int res4 ;
  swig::SwigPyIterator *iter5 = 0 ;
  int res5 ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_replace" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], SWIG_as_voidptrptr(&iter4), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res4) || !iter4) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char >::const_iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::const_iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::const_iterator > *>(iter4);
    if (iter_t) {
      arg4 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char >::const_iterator""'");
    }
  }
  res5 = SWIG_ConvertPtr(swig_obj[4], SWIG_as_voidptrptr(&iter5), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res5) || !iter5) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "5"" of type '" "std::basic_string< char >::const_iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::const_iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::const_iterator > *>(iter5);
    if (iter_t) {
      arg5 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "5"" of type '" "std::basic_string< char >::const_iterator""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->replace(arg2,arg3,arg4,arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_replace(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_replace", 0, 6, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
        if (_v) {
          int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[3], (std::basic_string<char>**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_string_replace__SWIG_4(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[3], (std::basic_string<char>**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_string_replace__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
        if (_v) {
          swig::SwigPyIterator *iter = 0;
          int res = SWIG_ConvertPtr(argv[3], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
          _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::const_iterator > *>(iter) != 0));
          if (_v) {
            swig::SwigPyIterator *iter = 0;
            int res = SWIG_ConvertPtr(argv[4], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
            _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::const_iterator > *>(iter) != 0));
            if (_v) {
              return _wrap_string_replace__SWIG_8(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_string_replace__SWIG_6(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_string_replace__SWIG_5(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_string_replace__SWIG_7(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_string_replace__SWIG_3(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_string_replace__SWIG_2(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[3], (std::basic_string<char>**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_size_t(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_string_replace__SWIG_1(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_replace'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::replace(std::basic_string< char >::size_type,std::basic_string< char >::size_type,std::basic_string< char > const &)\n"
    "    std::basic_string< char >::replace(std::basic_string< char >::size_type,std::basic_string< char >::size_type,std::basic_string< char > const &,std::basic_string< char >::size_type,std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::replace(std::basic_string< char >::size_type,std::basic_string< char >::size_type,char const *,std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::replace(std::basic_string< char >::size_type,std::basic_string< char >::size_type,std::basic_string< char >::size_type,char)\n"
    "    std::basic_string< char >::replace(std::basic_string< char >::iterator,std::basic_string< char >::iterator,std::basic_string< char > const &)\n"
    "    std::basic_string< char >::replace(std::basic_string< char >::iterator,std::basic_string< char >::iterator,char const *,std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::replace(std::basic_string< char >::iterator,std::basic_string< char >::iterator,std::basic_string< char >::size_type,char)\n"
    "    std::basic_string< char >::replace(std::basic_string< char >::iterator,std::basic_string< char >::iterator,char const *,char const *)\n"
    "    std::basic_string< char >::replace(std::basic_string< char >::iterator,std::basic_string< char >::iterator,std::basic_string< char >::const_iterator,std::basic_string< char >::const_iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string___iadd__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::basic_string< char > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___iadd__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___iadd__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___iadd__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char > *) &(arg1)->operator +=((std::basic_string< char > const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___add__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___add__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___add__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char,std::char_traits< char >,std::allocator< char > > *)std_basic_string_Sl_char_Sg____add__(arg1,(std::basic_string< char > const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_string___radd__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___radd__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___radd__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___radd__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_string< char,std::char_traits< char >,std::allocator< char > > *)std_basic_string_Sl_char_Sg____radd__(arg1,(std::basic_string< char > const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_string___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "string___str__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___str__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_basic_string_Sl_char_Sg____str__(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___rlshift__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___rlshift__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___rlshift__" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___rlshift__" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &std_basic_string_Sl_char_Sg____rlshift__(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_string___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___eq__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___eq__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___eq__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_basic_string_Sl_char_Sg__operator_Se__Se_(arg1,(std::basic_string< char > const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_string___ne__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___ne__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___ne__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___ne__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_basic_string_Sl_char_Sg__operator_SN__Se_(arg1,(std::basic_string< char > const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_string___gt__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___gt__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___gt__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___gt__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_basic_string_Sl_char_Sg__operator_Sg_(arg1,(std::basic_string< char > const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_string___lt__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___lt__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___lt__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___lt__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_basic_string_Sl_char_Sg__operator_Sl_(arg1,(std::basic_string< char > const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_string___ge__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___ge__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___ge__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___ge__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_basic_string_Sl_char_Sg__operator_Sg__Se_(arg1,(std::basic_string< char > const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_string___le__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___le__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___le__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___le__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_basic_string_Sl_char_Sg__operator_Sl__Se_(arg1,(std::basic_string< char > const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_delete_string(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_string", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_string" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_GETITERFUNC_CLOSURE(_wrap_string_iterator) /* defines _wrap_string_iterator_getiterfunc_closure */

SWIGPY_INQUIRY_CLOSURE(_wrap_string___nonzero__) /* defines _wrap_string___nonzero___inquiry_closure */

SWIGPY_LENFUNC_CLOSURE(_wrap_string___len__) /* defines _wrap_string___len___lenfunc_closure */

SWIGPY_BINARYFUNC_CLOSURE(_wrap_string___getitem__) /* defines _wrap_string___getitem___binaryfunc_closure */

SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap_string___setitem__) /* defines _wrap_string___setitem___objobjargproc_closure */

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_string) /* defines _wrap_delete_string_destructor_closure */

SWIGINTERN int Swig_var_cin_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cin is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cin_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cin), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_cout_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cout is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cout_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cout), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_cerr_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cerr is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cerr_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cerr), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_clog_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable clog is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_clog_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::clog), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int _wrap_new_ostream(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ostream")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_ostream", 1, 1, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ostream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char > *)new std::basic_ostream< char >(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_ostream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_ostream", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ostream" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > &(*arg2)(std::basic_ostream< char,std::char_traits< char > > &) = (std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)""'"); 
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ios< char,std::char_traits< char > > &(*arg2)(std::basic_ios< char,std::char_traits< char > > &) = (std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)""'"); 
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::ios_base &(*)(std::ios_base &)""'"); 
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_7(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_8(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_9(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_10(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_11(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_12(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_13(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_14(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long double""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_15(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "void const *""'"); 
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<((void const *)arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_16(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_17(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(arg1,(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "ostream___lshift__", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_14(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_16(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_15(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_5(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_7(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_6(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_9(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_8(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_11(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_10(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_13(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_12(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_17(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream_put(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_put" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream_put" "', argument " "2"" of type '" "std::basic_ostream< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ostream< char >::char_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->put(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::char_type *arg2 = (std::basic_ostream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ostream_write", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_write" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_write" "', argument " "2"" of type '" "std::basic_ostream< char >::char_type const *""'");
  }
  arg2 = reinterpret_cast< std::basic_ostream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ostream_write" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->write((std::basic_ostream< char >::char_type const *)arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_flush(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ostream_flush", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_flush" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->flush();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_tellp(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ostream< char >::pos_type result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ostream_tellp", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_tellp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->tellp();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::basic_ostream< char >::pos_type(result)), SWIGTYPE_p_streampos, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::pos_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_seekp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streampos,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::pos_type""'");
    } else {
      std::basic_ostream< char >::pos_type * temp = reinterpret_cast< std::basic_ostream< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->seekp(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_seekp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streamoff,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::off_type""'");
    } else {
      std::basic_ostream< char >::off_type * temp = reinterpret_cast< std::basic_ostream< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ostream_seekp" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->seekp(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "ostream_seekp", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streampos, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream_seekp__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streamoff, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ostream_seekp__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ostream_seekp'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ostream< char >::seekp(std::basic_ostream< char >::pos_type)\n"
    "    std::basic_ostream< char >::seekp(std::basic_ostream< char >::off_type,std::ios_base::seekdir)\n");
  return 0;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ostream) /* defines _wrap_delete_ostream_destructor_closure */

SWIGPY_BINARYFUNC_CLOSURE(_wrap_ostream___lshift__) /* defines _wrap_ostream___lshift___binaryfunc_closure */

SWIGINTERN int _wrap_new_istream(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_istream< char > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_istream")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_istream", 1, 1, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_istream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char > *)new std::basic_istream< char >(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_istream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_istream", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_istream" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char,std::char_traits< char > > &(*arg2)(std::basic_istream< char,std::char_traits< char > > &) = (std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)""'"); 
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_ios< char,std::char_traits< char > > &(*arg2)(std::basic_ios< char,std::char_traits< char > > &) = (std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)""'"); 
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::ios_base &(*)(std::ios_base &)""'"); 
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "short &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "short &""'"); 
  }
  arg2 = reinterpret_cast< short * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned short &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned short &""'"); 
  }
  arg2 = reinterpret_cast< unsigned short * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "int &""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_7(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned int &""'"); 
  }
  arg2 = reinterpret_cast< unsigned int * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_8(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long &""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_9(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_10(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long long &""'"); 
  }
  arg2 = reinterpret_cast< long long * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_11(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_long_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long long * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_12(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_13(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_14(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long double &""'"); 
  }
  arg2 = reinterpret_cast< long double * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_15(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_p_void,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "void *&""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "void *&""'"); 
  }
  arg2 = reinterpret_cast< void ** >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_16(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "istream___rshift__", 0, 2, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bool, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_short, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_short, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_5(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_6(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_int, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_7(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_8(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_9(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long_long, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_10(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long_long, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_11(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_12(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_13(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_14(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_void, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_15(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_16(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream_gcount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::streamsize result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "istream_gcount", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_gcount" "', argument " "1"" of type '" "std::basic_istream< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::basic_istream< char > const *)arg1)->gcount();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char >::int_type result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char >::int_type)(arg1)->get();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_char,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream< char >::char_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  ecode4 = SWIG_AsVal_char(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "istream_get" "', argument " "4"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg4 = static_cast< std::basic_istream< char >::char_type >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = 0 ;
  std::basic_istream< char >::char_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg3 = static_cast< std::basic_istream< char >::char_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(*arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "istream_get", 0, 4, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_istream_get__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_char, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_get__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_get__SWIG_5(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_get__SWIG_4(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_get__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_istream_get__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'istream_get'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::get()\n"
    "    std::basic_istream< char >::get(std::basic_istream< char >::char_type &)\n"
    "    std::basic_istream< char >::get(std::basic_istream< char >::char_type *,std::streamsize,std::basic_istream< char >::char_type)\n"
    "    std::basic_istream< char >::get(std::basic_istream< char >::char_type *,std::streamsize)\n"
    "    std::basic_istream< char >::get(std::basic_streambuf< char,std::char_traits< char > > &,std::basic_istream< char >::char_type)\n"
    "    std::basic_istream< char >::get(std::basic_streambuf< char,std::char_traits< char > > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_istream_getline__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream< char >::char_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_getline" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_getline" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_getline" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  ecode4 = SWIG_AsVal_char(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "istream_getline" "', argument " "4"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg4 = static_cast< std::basic_istream< char >::char_type >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->getline(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_getline" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_getline" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_getline" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->getline(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "istream_getline", 0, 4, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_getline__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_istream_getline__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'istream_getline'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::getline(std::basic_istream< char >::char_type *,std::streamsize,std::basic_istream< char >::char_type)\n"
    "    std::basic_istream< char >::getline(std::basic_istream< char >::char_type *,std::streamsize)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::streamsize arg2 ;
  std::basic_istream< char >::int_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_ignore" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_ignore" "', argument " "3"" of type '" "std::basic_istream< char >::int_type""'");
  } 
  arg3 = static_cast< std::basic_istream< char >::int_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->ignore(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_ignore" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->ignore(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->ignore();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "istream_ignore", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_istream_ignore__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_istream_ignore__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_ignore__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'istream_ignore'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::ignore(std::streamsize,std::basic_istream< char >::int_type)\n"
    "    std::basic_istream< char >::ignore(std::streamsize)\n"
    "    std::basic_istream< char >::ignore()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_istream_peek(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char >::int_type result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "istream_peek", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_peek" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char >::int_type)(arg1)->peek();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_read(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "istream_read", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_read" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_read" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_read" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->read(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_readsome(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::streamsize result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "istream_readsome", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_readsome" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_readsome" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_readsome" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->readsome(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_putback(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_putback" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_putback" "', argument " "2"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_istream< char >::char_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->putback(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_unget(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "istream_unget", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_unget" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->unget();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_sync(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "istream_sync", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_sync" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->sync();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_tellg(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char >::pos_type result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "istream_tellg", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_tellg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->tellg();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::basic_istream< char >::pos_type(result)), SWIGTYPE_p_streampos, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::pos_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_seekg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streampos,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::pos_type""'");
    } else {
      std::basic_istream< char >::pos_type * temp = reinterpret_cast< std::basic_istream< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->seekg(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_seekg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streamoff,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::off_type""'");
    } else {
      std::basic_istream< char >::off_type * temp = reinterpret_cast< std::basic_istream< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_seekg" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->seekg(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "istream_seekg", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streampos, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_seekg__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streamoff, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_seekg__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'istream_seekg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::seekg(std::basic_istream< char >::pos_type)\n"
    "    std::basic_istream< char >::seekg(std::basic_istream< char >::off_type,std::ios_base::seekdir)\n");
  return 0;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_istream) /* defines _wrap_delete_istream_destructor_closure */

SWIGPY_BINARYFUNC_CLOSURE(_wrap_istream___rshift__) /* defines _wrap_istream___rshift___binaryfunc_closure */

SWIGINTERN int _wrap_new_iostream(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_iostream< char > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_iostream")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_iostream", 1, 1, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_iostream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_iostream< char > *)new std::basic_iostream< char >(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_iostream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_iostream< char > *arg1 = (std::basic_iostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_iostream", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_iostream" "', argument " "1"" of type '" "std::basic_iostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_iostream< char > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_iostream) /* defines _wrap_delete_iostream_destructor_closure */

SWIGINTERN PyObject *_wrap_endl(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "endl" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "endl" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &std::SWIGTEMPLATEDISAMBIGUATOR endl< char,std::char_traits< char > >(*arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ends(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ends" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ends" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &std::SWIGTEMPLATEDISAMBIGUATOR ends< char,std::char_traits< char > >(*arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flush(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flush" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flush" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::basic_ostream< char,std::char_traits< char > > *) &std::SWIGTEMPLATEDISAMBIGUATOR flush< char,std::char_traits< char > >(*arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_ChannelsRefPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (crpropa::ref_ptr< nupropa::Channels > *)new crpropa::ref_ptr< nupropa::Channels >();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_ChannelsRefPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nupropa::Channels *arg1 = (nupropa::Channels *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  crpropa::ref_ptr< nupropa::Channels > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_nupropa__Channels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ChannelsRefPtr" "', argument " "1"" of type '" "nupropa::Channels *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::Channels * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (crpropa::ref_ptr< nupropa::Channels > *)new crpropa::ref_ptr< nupropa::Channels >(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_ChannelsRefPtr__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  crpropa::ref_ptr< nupropa::Channels > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ChannelsRefPtr" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ChannelsRefPtr" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > const &""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (crpropa::ref_ptr< nupropa::Channels > *)new crpropa::ref_ptr< nupropa::Channels >((crpropa::ref_ptr< nupropa::Channels > const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_ChannelsRefPtr(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ChannelsRefPtr")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ChannelsRefPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_ChannelsRefPtr__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_nupropa__Channels, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ChannelsRefPtr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ChannelsRefPtr__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, SWIG_POINTER_NO_NULL | SWIG_POINTER_IMPLICIT_CONV);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ChannelsRefPtr__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ChannelsRefPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    crpropa::ref_ptr< nupropa::Channels >::ref_ptr()\n"
    "    crpropa::ref_ptr< nupropa::Channels >::ref_ptr(nupropa::Channels *)\n"
    "    crpropa::ref_ptr< nupropa::Channels >::ref_ptr(crpropa::ref_ptr< nupropa::Channels > const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_ChannelsRefPtr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_ChannelsRefPtr", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ChannelsRefPtr" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr___ref__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::Channels *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsRefPtr___ref__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr___ref__" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::Channels *) &((crpropa::ref_ptr< nupropa::Channels > const *)arg1)->operator *();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__Channels, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr___deref__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::Channels *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsRefPtr___deref__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr___deref__" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::Channels *)((crpropa::ref_ptr< nupropa::Channels > const *)arg1)->operator ->();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__Channels, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::Channels *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsRefPtr_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_get" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::Channels *)((crpropa::ref_ptr< nupropa::Channels > const *)arg1)->get();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__Channels, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_valid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsRefPtr_valid", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_valid" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((crpropa::ref_ptr< nupropa::Channels > const *)arg1)->valid();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_release(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::Channels *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsRefPtr_release", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_release" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::Channels *)(arg1)->release();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__Channels, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  crpropa::ref_ptr< nupropa::Channels > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_swap" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsRefPtr_swap" "', argument " "2"" of type '" "crpropa::ref_ptr< nupropa::Channels > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsRefPtr_swap" "', argument " "2"" of type '" "crpropa::ref_ptr< nupropa::Channels > &""'"); 
  }
  arg2 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->swap(*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_getInteractionChannels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::allocator< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsRefPtr_getInteractionChannels", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_getInteractionChannels" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->getInteractionChannels();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(result)), SWIGTYPE_p_std__vectorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_std__allocatorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_getActiveChannels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< bool,std::allocator< bool > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsRefPtr_getActiveChannels", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_getActiveChannels" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->getActiveChannels();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< bool,std::allocator< bool > >(result)), SWIGTYPE_p_std__vectorT_bool_std__allocatorT_bool_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_getInteractionFolderPath(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsRefPtr_getInteractionFolderPath", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_getInteractionFolderPath" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->getInteractionFolderPath();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_getProductsID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsRefPtr_getProductsID", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_getProductsID" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->getProductsID();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >(result)), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_getChannelIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_getChannelIndex" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ChannelsRefPtr_getChannelIndex" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)(*arg1)->getChannelIndex(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_loadInteractionChannels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_loadInteractionChannels" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ChannelsRefPtr_loadInteractionChannels" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->loadInteractionChannels(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_loadProductsID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_loadProductsID" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ChannelsRefPtr_loadProductsID" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->loadProductsID(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_activeAll(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsRefPtr_activeAll", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_activeAll" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->activeAll();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_setInteractionChannels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  SwigValueWrapper< std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::allocator< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_setInteractionChannels" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_std__allocatorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsRefPtr_setInteractionChannels" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsRefPtr_setInteractionChannels" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > >""'");
    } else {
      std::vector< std::string,std::allocator< std::string > > * temp = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->setInteractionChannels(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_setChannelsActive(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  SwigValueWrapper< std::vector< bool,std::allocator< bool > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_setChannelsActive" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_bool_std__allocatorT_bool_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsRefPtr_setChannelsActive" "', argument " "2"" of type '" "std::vector< bool,std::allocator< bool > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsRefPtr_setChannelsActive" "', argument " "2"" of type '" "std::vector< bool,std::allocator< bool > >""'");
    } else {
      std::vector< bool,std::allocator< bool > > * temp = reinterpret_cast< std::vector< bool,std::allocator< bool > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->setChannelsActive(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_setInteractionFolderPath(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_setInteractionFolderPath" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ChannelsRefPtr_setInteractionFolderPath" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->setInteractionFolderPath(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_setProductsID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  SwigValueWrapper< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_setProductsID" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsRefPtr_setProductsID" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsRefPtr_setProductsID" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >""'");
    } else {
      std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > * temp = reinterpret_cast< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->setProductsID(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_setInactiveChannel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_setInactiveChannel" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ChannelsRefPtr_setInactiveChannel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->setInactiveChannel(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_addReference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsRefPtr_addReference", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_addReference" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->addReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_removeReference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsRefPtr_removeReference", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_removeReference" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->removeReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_removeReferenceNoDelete(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsRefPtr_removeReferenceNoDelete", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_removeReferenceNoDelete" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)(*arg1)->removeReferenceNoDelete();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsRefPtr_getReferenceCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::Channels > *arg1 = (crpropa::ref_ptr< nupropa::Channels > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsRefPtr_getReferenceCount", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsRefPtr_getReferenceCount" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::Channels > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->getReferenceCount();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ChannelsRefPtr) /* defines _wrap_delete_ChannelsRefPtr_destructor_closure */

SWIGINTERN int _wrap_new_ChannelsBundleRefPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (crpropa::ref_ptr< nupropa::ChannelsBundle > *)new crpropa::ref_ptr< nupropa::ChannelsBundle >();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_ChannelsBundleRefPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ChannelsBundleRefPtr" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (crpropa::ref_ptr< nupropa::ChannelsBundle > *)new crpropa::ref_ptr< nupropa::ChannelsBundle >(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_ChannelsBundleRefPtr__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ChannelsBundleRefPtr" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ChannelsBundleRefPtr" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > const &""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (crpropa::ref_ptr< nupropa::ChannelsBundle > *)new crpropa::ref_ptr< nupropa::ChannelsBundle >((crpropa::ref_ptr< nupropa::ChannelsBundle > const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_ChannelsBundleRefPtr(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ChannelsBundleRefPtr")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ChannelsBundleRefPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_ChannelsBundleRefPtr__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_nupropa__ChannelsBundle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ChannelsBundleRefPtr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ChannelsBundleRefPtr__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, SWIG_POINTER_NO_NULL | SWIG_POINTER_IMPLICIT_CONV);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ChannelsBundleRefPtr__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ChannelsBundleRefPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    crpropa::ref_ptr< nupropa::ChannelsBundle >::ref_ptr()\n"
    "    crpropa::ref_ptr< nupropa::ChannelsBundle >::ref_ptr(nupropa::ChannelsBundle *)\n"
    "    crpropa::ref_ptr< nupropa::ChannelsBundle >::ref_ptr(crpropa::ref_ptr< nupropa::ChannelsBundle > const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_ChannelsBundleRefPtr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_ChannelsBundleRefPtr", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ChannelsBundleRefPtr" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr___ref__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::ChannelsBundle *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr___ref__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr___ref__" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::ChannelsBundle *) &((crpropa::ref_ptr< nupropa::ChannelsBundle > const *)arg1)->operator *();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr___deref__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::ChannelsBundle *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr___deref__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr___deref__" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::ChannelsBundle *)((crpropa::ref_ptr< nupropa::ChannelsBundle > const *)arg1)->operator ->();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::ChannelsBundle *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_get" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::ChannelsBundle *)((crpropa::ref_ptr< nupropa::ChannelsBundle > const *)arg1)->get();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_valid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr_valid", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_valid" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((crpropa::ref_ptr< nupropa::ChannelsBundle > const *)arg1)->valid();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_release(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::ChannelsBundle *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr_release", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_release" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::ChannelsBundle *)(arg1)->release();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_swap" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsBundleRefPtr_swap" "', argument " "2"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsBundleRefPtr_swap" "', argument " "2"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > &""'"); 
  }
  arg2 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->swap(*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_loadRateFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_loadRateFile" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsBundleRefPtr_loadRateFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsBundleRefPtr_loadRateFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->loadRateFile((std::string const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_loadCumulativeRateFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_loadCumulativeRateFile" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsBundleRefPtr_loadCumulativeRateFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsBundleRefPtr_loadCumulativeRateFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->loadCumulativeRateFile((std::string const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_loadProductsChannelId(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_loadProductsChannelId" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsBundleRefPtr_loadProductsChannelId" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsBundleRefPtr_loadProductsChannelId" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->loadProductsChannelId((std::string const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_findClosestRedshift(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  double arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr_findClosestRedshift", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_findClosestRedshift" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ChannelsBundleRefPtr_findClosestRedshift" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[1], &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ChannelsBundleRefPtr_findClosestRedshift" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsBundleRefPtr_findClosestRedshift" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(*arg1)->findClosestRedshift(arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_selectIndexes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  std::string arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr_selectIndexes", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_selectIndexes" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ChannelsBundleRefPtr_selectIndexes" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ChannelsBundleRefPtr_selectIndexes" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ChannelsBundleRefPtr_selectIndexes" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->selectIndexes(arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_getAlphasBetas(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::allocator< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr_getAlphasBetas", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_getAlphasBetas" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ChannelsBundleRefPtr_getAlphasBetas" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ChannelsBundleRefPtr_getAlphasBetas" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->getAlphasBetas(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(result)), SWIGTYPE_p_std__vectorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_std__allocatorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_selectProdChanId(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr_selectProdChanId", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_selectProdChanId" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->selectProdChanId();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< int,std::allocator< int > >(result)), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_selectedRates(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_selectedRates" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsBundleRefPtr_selectedRates" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsBundleRefPtr_selectedRates" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->selectedRates((std::vector< int,std::allocator< int > > const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >(result)), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_selectedEnergies(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_selectedEnergies" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsBundleRefPtr_selectedEnergies" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsBundleRefPtr_selectedEnergies" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->selectedEnergies((std::vector< int,std::allocator< int > > const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >(result)), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_getRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::string arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr_getRate", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_getRate" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ChannelsBundleRefPtr_getRate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ChannelsBundleRefPtr_getRate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ChannelsBundleRefPtr_getRate" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode5 = SWIG_AsVal_double(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ChannelsBundleRefPtr_getRate" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ChannelsBundleRefPtr_getRate" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(*arg1)->getRate(arg2,arg3,arg4,arg5,arg6);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_fillTableZeros(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr_fillTableZeros", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_fillTableZeros" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsBundleRefPtr_fillTableZeros" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsBundleRefPtr_fillTableZeros" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > >""'");
    } else {
      std::vector< double,std::allocator< double > > * temp = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ChannelsBundleRefPtr_fillTableZeros" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->fillTableZeros(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< double,std::allocator< double > >(result)), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_computeInteractionProbabilities(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_computeInteractionProbabilities" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsBundleRefPtr_computeInteractionProbabilities" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsBundleRefPtr_computeInteractionProbabilities" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >""'");
    } else {
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * temp = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->computeInteractionProbabilities(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_selectIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr_selectIndex", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_selectIndex" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsBundleRefPtr_selectIndex" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsBundleRefPtr_selectIndex" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > >""'");
    } else {
      std::vector< double,std::allocator< double > > * temp = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ChannelsBundleRefPtr_selectIndex" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->selectIndex(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_selectCDF(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr_selectCDF", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_selectCDF" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->selectCDF();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >(result)), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_selects(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr_selects", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_selects" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->selects();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< double,std::allocator< double > >(result)), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_selectE(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr_selectE", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_selectE" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->selectE();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< double,std::allocator< double > >(result)), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_getSelectedIndexes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr_getSelectedIndexes", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_getSelectedIndexes" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->getSelectedIndexes();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< int,std::allocator< int > >(result)), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_getSelectedIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr_getSelectedIndex", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_getSelectedIndex" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)(*arg1)->getSelectedIndex();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_addReference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr_addReference", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_addReference" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->addReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_removeReference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr_removeReference", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_removeReference" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->removeReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_removeReferenceNoDelete(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr_removeReferenceNoDelete", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_removeReferenceNoDelete" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)(*arg1)->removeReferenceNoDelete();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundleRefPtr_getReferenceCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::ChannelsBundle > *arg1 = (crpropa::ref_ptr< nupropa::ChannelsBundle > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundleRefPtr_getReferenceCount", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundleRefPtr_getReferenceCount" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::ChannelsBundle > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::ChannelsBundle > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->getReferenceCount();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ChannelsBundleRefPtr) /* defines _wrap_delete_ChannelsBundleRefPtr_destructor_closure */

SWIGINTERN int _wrap_new_NeutrinoFieldRefPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (crpropa::ref_ptr< nupropa::NeutrinoField > *)new crpropa::ref_ptr< nupropa::NeutrinoField >();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_NeutrinoFieldRefPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoField *arg1 = (nupropa::NeutrinoField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  crpropa::ref_ptr< nupropa::NeutrinoField > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeutrinoFieldRefPtr" "', argument " "1"" of type '" "nupropa::NeutrinoField *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoField * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (crpropa::ref_ptr< nupropa::NeutrinoField > *)new crpropa::ref_ptr< nupropa::NeutrinoField >(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_NeutrinoFieldRefPtr__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  crpropa::ref_ptr< nupropa::NeutrinoField > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeutrinoFieldRefPtr" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeutrinoFieldRefPtr" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > const &""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (crpropa::ref_ptr< nupropa::NeutrinoField > *)new crpropa::ref_ptr< nupropa::NeutrinoField >((crpropa::ref_ptr< nupropa::NeutrinoField > const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_NeutrinoFieldRefPtr(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_NeutrinoFieldRefPtr")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_NeutrinoFieldRefPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_NeutrinoFieldRefPtr__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_nupropa__NeutrinoField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NeutrinoFieldRefPtr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NeutrinoFieldRefPtr__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, SWIG_POINTER_NO_NULL | SWIG_POINTER_IMPLICIT_CONV);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NeutrinoFieldRefPtr__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_NeutrinoFieldRefPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    crpropa::ref_ptr< nupropa::NeutrinoField >::ref_ptr()\n"
    "    crpropa::ref_ptr< nupropa::NeutrinoField >::ref_ptr(nupropa::NeutrinoField *)\n"
    "    crpropa::ref_ptr< nupropa::NeutrinoField >::ref_ptr(crpropa::ref_ptr< nupropa::NeutrinoField > const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_NeutrinoFieldRefPtr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_NeutrinoFieldRefPtr", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NeutrinoFieldRefPtr" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr___ref__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::NeutrinoField *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoFieldRefPtr___ref__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoFieldRefPtr___ref__" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::NeutrinoField *) &((crpropa::ref_ptr< nupropa::NeutrinoField > const *)arg1)->operator *();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr___deref__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::NeutrinoField *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoFieldRefPtr___deref__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoFieldRefPtr___deref__" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::NeutrinoField *)((crpropa::ref_ptr< nupropa::NeutrinoField > const *)arg1)->operator ->();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::NeutrinoField *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoFieldRefPtr_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoFieldRefPtr_get" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::NeutrinoField *)((crpropa::ref_ptr< nupropa::NeutrinoField > const *)arg1)->get();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr_valid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoFieldRefPtr_valid", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoFieldRefPtr_valid" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((crpropa::ref_ptr< nupropa::NeutrinoField > const *)arg1)->valid();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr_release(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::NeutrinoField *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoFieldRefPtr_release", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoFieldRefPtr_release" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::NeutrinoField *)(arg1)->release();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoFieldRefPtr_swap" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoFieldRefPtr_swap" "', argument " "2"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeutrinoFieldRefPtr_swap" "', argument " "2"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > &""'"); 
  }
  arg2 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->swap(*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr_getNeutrinoDensity__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoFieldRefPtr_getNeutrinoDensity" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoFieldRefPtr_getNeutrinoDensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NeutrinoFieldRefPtr_getNeutrinoDensity" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(*arg1)->getNeutrinoDensity(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr_getNeutrinoDensity__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoFieldRefPtr_getNeutrinoDensity" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoFieldRefPtr_getNeutrinoDensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(*arg1)->getNeutrinoDensity(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr_getNeutrinoDensity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "NeutrinoFieldRefPtr_getNeutrinoDensity", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NeutrinoFieldRefPtr_getNeutrinoDensity__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NeutrinoFieldRefPtr_getNeutrinoDensity__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'NeutrinoFieldRefPtr_getNeutrinoDensity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nupropa::NeutrinoField::getNeutrinoDensity(double,double) const\n"
    "    nupropa::NeutrinoField::getNeutrinoDensity(double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr_getMinimumNeutrinoEnergy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoFieldRefPtr_getMinimumNeutrinoEnergy" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoFieldRefPtr_getMinimumNeutrinoEnergy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(*arg1)->getMinimumNeutrinoEnergy(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr_getMaximumNeutrinoEnergy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoFieldRefPtr_getMaximumNeutrinoEnergy" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoFieldRefPtr_getMaximumNeutrinoEnergy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(*arg1)->getMaximumNeutrinoEnergy(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr_getFieldName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoFieldRefPtr_getFieldName", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoFieldRefPtr_getFieldName" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->getFieldName();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr_getRedshiftScaling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoFieldRefPtr_getRedshiftScaling" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoFieldRefPtr_getRedshiftScaling" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(*arg1)->getRedshiftScaling(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr_hasRedshiftDependence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoFieldRefPtr_hasRedshiftDependence", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoFieldRefPtr_hasRedshiftDependence" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)(*arg1)->hasRedshiftDependence();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr_setFieldName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoFieldRefPtr_setFieldName" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NeutrinoFieldRefPtr_setFieldName" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->setFieldName(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr_getMass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoFieldRefPtr_getMass", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoFieldRefPtr_getMass" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)(*arg1)->getMass();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr_addReference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoFieldRefPtr_addReference", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoFieldRefPtr_addReference" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->addReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr_removeReference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoFieldRefPtr_removeReference", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoFieldRefPtr_removeReference" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->removeReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr_removeReferenceNoDelete(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoFieldRefPtr_removeReferenceNoDelete", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoFieldRefPtr_removeReferenceNoDelete" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)(*arg1)->removeReferenceNoDelete();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoFieldRefPtr_getReferenceCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoField > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoField > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoFieldRefPtr_getReferenceCount", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoFieldRefPtr_getReferenceCount" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoField > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoField > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->getReferenceCount();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_NeutrinoFieldRefPtr) /* defines _wrap_delete_NeutrinoFieldRefPtr_destructor_closure */

SWIGINTERN int _wrap_new_NeutrinoMixingRefPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *)new crpropa::ref_ptr< nupropa::NeutrinoMixing >();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_NeutrinoMixingRefPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoMixing *arg1 = (nupropa::NeutrinoMixing *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeutrinoMixingRefPtr" "', argument " "1"" of type '" "nupropa::NeutrinoMixing *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoMixing * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *)new crpropa::ref_ptr< nupropa::NeutrinoMixing >(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_NeutrinoMixingRefPtr__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeutrinoMixingRefPtr" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeutrinoMixingRefPtr" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > const &""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *)new crpropa::ref_ptr< nupropa::NeutrinoMixing >((crpropa::ref_ptr< nupropa::NeutrinoMixing > const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_NeutrinoMixingRefPtr(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_NeutrinoMixingRefPtr")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_NeutrinoMixingRefPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_NeutrinoMixingRefPtr__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_nupropa__NeutrinoMixing, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NeutrinoMixingRefPtr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NeutrinoMixingRefPtr__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, SWIG_POINTER_NO_NULL | SWIG_POINTER_IMPLICIT_CONV);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NeutrinoMixingRefPtr__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_NeutrinoMixingRefPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    crpropa::ref_ptr< nupropa::NeutrinoMixing >::ref_ptr()\n"
    "    crpropa::ref_ptr< nupropa::NeutrinoMixing >::ref_ptr(nupropa::NeutrinoMixing *)\n"
    "    crpropa::ref_ptr< nupropa::NeutrinoMixing >::ref_ptr(crpropa::ref_ptr< nupropa::NeutrinoMixing > const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_NeutrinoMixingRefPtr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_NeutrinoMixingRefPtr", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NeutrinoMixingRefPtr" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr___ref__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::NeutrinoMixing *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixingRefPtr___ref__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr___ref__" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::NeutrinoMixing *) &((crpropa::ref_ptr< nupropa::NeutrinoMixing > const *)arg1)->operator *();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr___deref__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::NeutrinoMixing *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixingRefPtr___deref__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr___deref__" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::NeutrinoMixing *)((crpropa::ref_ptr< nupropa::NeutrinoMixing > const *)arg1)->operator ->();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::NeutrinoMixing *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixingRefPtr_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_get" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::NeutrinoMixing *)((crpropa::ref_ptr< nupropa::NeutrinoMixing > const *)arg1)->get();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_valid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixingRefPtr_valid", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_valid" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((crpropa::ref_ptr< nupropa::NeutrinoMixing > const *)arg1)->valid();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_release(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::NeutrinoMixing *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixingRefPtr_release", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_release" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::NeutrinoMixing *)(arg1)->release();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_swap" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoMixingRefPtr_swap" "', argument " "2"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeutrinoMixingRefPtr_swap" "', argument " "2"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > &""'"); 
  }
  arg2 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->swap(*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_setTheta(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixingRefPtr_setTheta", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_setTheta" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixingRefPtr_setTheta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NeutrinoMixingRefPtr_setTheta" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NeutrinoMixingRefPtr_setTheta" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->setTheta(arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_setDelta(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_setDelta" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixingRefPtr_setDelta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->setDelta(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_setMasses(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixingRefPtr_setMasses", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_setMasses" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixingRefPtr_setMasses" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NeutrinoMixingRefPtr_setMasses" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NeutrinoMixingRefPtr_setMasses" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->setMasses(arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_buildUpmnsMatrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixingRefPtr_buildUpmnsMatrix", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_buildUpmnsMatrix" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->buildUpmnsMatrix();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_getUpmnsMatrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::Matrix3cd result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixingRefPtr_getUpmnsMatrix", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_getUpmnsMatrix" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->getUpmnsMatrix();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new Eigen::Matrix3cd(result)), SWIGTYPE_p_Eigen__Matrix3cd, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_getFlavourMassProbabilities(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::Matrix3cd result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixingRefPtr_getFlavourMassProbabilities", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_getFlavourMassProbabilities" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->getFlavourMassProbabilities();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new Eigen::Matrix3cd(result)), SWIGTYPE_p_Eigen__Matrix3cd, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_IdToFlavourIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_IdToFlavourIndex" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixingRefPtr_IdToFlavourIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)(*arg1)->IdToFlavourIndex(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_flavourIndexToId(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_flavourIndexToId" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixingRefPtr_flavourIndexToId" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)(*arg1)->flavourIndexToId(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_massIndexToMass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_massIndexToMass" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixingRefPtr_massIndexToMass" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(*arg1)->massIndexToMass(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_massToIndexMass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_massToIndexMass" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixingRefPtr_massToIndexMass" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)(*arg1)->massToIndexMass(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_fromFlavourToMass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_fromFlavourToMass" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixingRefPtr_fromFlavourToMass" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(*arg1)->fromFlavourToMass(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_fromMassToFlavour(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_fromMassToFlavour" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixingRefPtr_fromMassToFlavour" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)(*arg1)->fromMassToFlavour(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_precomputeOscillationTerms(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixingRefPtr_precomputeOscillationTerms", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_precomputeOscillationTerms" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->precomputeOscillationTerms();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_oscillateFlavour(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixingRefPtr_oscillateFlavour", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_oscillateFlavour" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixingRefPtr_oscillateFlavour" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NeutrinoMixingRefPtr_oscillateFlavour" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NeutrinoMixingRefPtr_oscillateFlavour" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)(*arg1)->oscillateFlavour(arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_addReference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixingRefPtr_addReference", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_addReference" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->addReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_removeReference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixingRefPtr_removeReference", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_removeReference" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->removeReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_removeReferenceNoDelete(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixingRefPtr_removeReferenceNoDelete", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_removeReferenceNoDelete" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)(*arg1)->removeReferenceNoDelete();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixingRefPtr_getReferenceCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > *arg1 = (crpropa::ref_ptr< nupropa::NeutrinoMixing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixingRefPtr_getReferenceCount", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixingRefPtr_getReferenceCount" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->getReferenceCount();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_NeutrinoMixingRefPtr) /* defines _wrap_delete_NeutrinoMixingRefPtr_destructor_closure */

SWIGINTERN int _wrap_new_RelativisticInteractionRefPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *)new crpropa::ref_ptr< nupropa::RelativisticInteraction >();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_RelativisticInteractionRefPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nupropa::RelativisticInteraction *arg1 = (nupropa::RelativisticInteraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_nupropa__RelativisticInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RelativisticInteractionRefPtr" "', argument " "1"" of type '" "nupropa::RelativisticInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::RelativisticInteraction * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *)new crpropa::ref_ptr< nupropa::RelativisticInteraction >(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_RelativisticInteractionRefPtr__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t,  0  | SWIG_POINTER_IMPLICIT_CONV);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RelativisticInteractionRefPtr" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RelativisticInteractionRefPtr" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > const &""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *)new crpropa::ref_ptr< nupropa::RelativisticInteraction >((crpropa::ref_ptr< nupropa::RelativisticInteraction > const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_RelativisticInteractionRefPtr(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_RelativisticInteractionRefPtr")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_RelativisticInteractionRefPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_RelativisticInteractionRefPtr__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_nupropa__RelativisticInteraction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RelativisticInteractionRefPtr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RelativisticInteractionRefPtr__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, SWIG_POINTER_NO_NULL | SWIG_POINTER_IMPLICIT_CONV);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RelativisticInteractionRefPtr__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_RelativisticInteractionRefPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    crpropa::ref_ptr< nupropa::RelativisticInteraction >::ref_ptr()\n"
    "    crpropa::ref_ptr< nupropa::RelativisticInteraction >::ref_ptr(nupropa::RelativisticInteraction *)\n"
    "    crpropa::ref_ptr< nupropa::RelativisticInteraction >::ref_ptr(crpropa::ref_ptr< nupropa::RelativisticInteraction > const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_RelativisticInteractionRefPtr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg1 = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_RelativisticInteractionRefPtr", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RelativisticInteractionRefPtr" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteractionRefPtr___ref__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg1 = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::RelativisticInteraction *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteractionRefPtr___ref__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteractionRefPtr___ref__" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::RelativisticInteraction *) &((crpropa::ref_ptr< nupropa::RelativisticInteraction > const *)arg1)->operator *();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__RelativisticInteraction, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RelativisticInteractionRefPtr___deref__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg1 = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::RelativisticInteraction *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteractionRefPtr___deref__", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteractionRefPtr___deref__" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::RelativisticInteraction *)((crpropa::ref_ptr< nupropa::RelativisticInteraction > const *)arg1)->operator ->();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__RelativisticInteraction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteractionRefPtr_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg1 = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::RelativisticInteraction *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteractionRefPtr_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteractionRefPtr_get" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::RelativisticInteraction *)((crpropa::ref_ptr< nupropa::RelativisticInteraction > const *)arg1)->get();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__RelativisticInteraction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteractionRefPtr_valid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg1 = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteractionRefPtr_valid", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteractionRefPtr_valid" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((crpropa::ref_ptr< nupropa::RelativisticInteraction > const *)arg1)->valid();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteractionRefPtr_release(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg1 = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nupropa::RelativisticInteraction *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteractionRefPtr_release", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteractionRefPtr_release" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::RelativisticInteraction *)(arg1)->release();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__RelativisticInteraction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteractionRefPtr_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg1 = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *) 0 ;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteractionRefPtr_swap" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RelativisticInteractionRefPtr_swap" "', argument " "2"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RelativisticInteractionRefPtr_swap" "', argument " "2"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > &""'"); 
  }
  arg2 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->swap(*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteractionRefPtr_setBetaCom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg1 = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteractionRefPtr_setBetaCom", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteractionRefPtr_setBetaCom" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelativisticInteractionRefPtr_setBetaCom" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RelativisticInteractionRefPtr_setBetaCom" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RelativisticInteractionRefPtr_setBetaCom" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RelativisticInteractionRefPtr_setBetaCom" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->setBetaCom(arg2,arg3,arg4,arg5);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteractionRefPtr_setBetaPhotonCom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg1 = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteractionRefPtr_setBetaPhotonCom", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteractionRefPtr_setBetaPhotonCom" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelativisticInteractionRefPtr_setBetaPhotonCom" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RelativisticInteractionRefPtr_setBetaPhotonCom" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RelativisticInteractionRefPtr_setBetaPhotonCom" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->setBetaPhotonCom(arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteractionRefPtr_setGammaCom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg1 = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteractionRefPtr_setGammaCom", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteractionRefPtr_setGammaCom" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelativisticInteractionRefPtr_setGammaCom" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RelativisticInteractionRefPtr_setGammaCom" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (*arg1)->setGammaCom(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteractionRefPtr_getBetaCom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg1 = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteractionRefPtr_getBetaCom", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteractionRefPtr_getBetaCom" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(*arg1)->getBetaCom();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteractionRefPtr_getGammaCom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg1 = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteractionRefPtr_getGammaCom", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteractionRefPtr_getGammaCom" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(*arg1)->getGammaCom();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteractionRefPtr_computeProductsMomentumCom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg1 = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteractionRefPtr_computeProductsMomentumCom", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteractionRefPtr_computeProductsMomentumCom" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelativisticInteractionRefPtr_computeProductsMomentumCom" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RelativisticInteractionRefPtr_computeProductsMomentumCom" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RelativisticInteractionRefPtr_computeProductsMomentumCom" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(*arg1)->computeProductsMomentumCom(arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteractionRefPtr_getProductEnergiesLab(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg1 = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteractionRefPtr_getProductEnergiesLab", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteractionRefPtr_getProductEnergiesLab" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelativisticInteractionRefPtr_getProductEnergiesLab" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RelativisticInteractionRefPtr_getProductEnergiesLab" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RelativisticInteractionRefPtr_getProductEnergiesLab" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RelativisticInteractionRefPtr_getProductEnergiesLab" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->getProductEnergiesLab(arg2,arg3,arg4,arg5);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< double,std::allocator< double > >(result)), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteractionRefPtr_addReference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg1 = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteractionRefPtr_addReference", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteractionRefPtr_addReference" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->addReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteractionRefPtr_removeReference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg1 = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteractionRefPtr_removeReference", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteractionRefPtr_removeReference" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->removeReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteractionRefPtr_removeReferenceNoDelete(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg1 = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteractionRefPtr_removeReferenceNoDelete", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteractionRefPtr_removeReferenceNoDelete" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)(*arg1)->removeReferenceNoDelete();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteractionRefPtr_getReferenceCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::RelativisticInteraction > *arg1 = (crpropa::ref_ptr< nupropa::RelativisticInteraction > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteractionRefPtr_getReferenceCount", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteractionRefPtr_getReferenceCount" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::RelativisticInteraction > const *""'"); 
  }
  arg1 = reinterpret_cast< crpropa::ref_ptr< nupropa::RelativisticInteraction > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (*arg1)->getReferenceCount();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_RelativisticInteractionRefPtr) /* defines _wrap_delete_RelativisticInteractionRefPtr_destructor_closure */

SWIGINTERN int _wrap_new_NeutrinoNeutrinoInteraction__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SwigValueWrapper< crpropa::ref_ptr< NeutrinoField > > arg1 ;
  SwigValueWrapper< crpropa::ref_ptr< NeutrinoMixing > > arg2 ;
  bool arg3 ;
  double arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  nupropa::NeutrinoNeutrinoInteraction *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoField_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeutrinoNeutrinoInteraction" "', argument " "1"" of type '" "crpropa::ref_ptr< NeutrinoField >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeutrinoNeutrinoInteraction" "', argument " "1"" of type '" "crpropa::ref_ptr< NeutrinoField >""'");
    } else {
      crpropa::ref_ptr< NeutrinoField > * temp = reinterpret_cast< crpropa::ref_ptr< NeutrinoField > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoMixing_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NeutrinoNeutrinoInteraction" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeutrinoNeutrinoInteraction" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'");
    } else {
      crpropa::ref_ptr< NeutrinoMixing > * temp = reinterpret_cast< crpropa::ref_ptr< NeutrinoMixing > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NeutrinoNeutrinoInteraction" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_NeutrinoNeutrinoInteraction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::NeutrinoNeutrinoInteraction *)new nupropa::NeutrinoNeutrinoInteraction(arg1,arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_NeutrinoNeutrinoInteraction__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SwigValueWrapper< crpropa::ref_ptr< NeutrinoField > > arg1 ;
  SwigValueWrapper< crpropa::ref_ptr< NeutrinoMixing > > arg2 ;
  bool arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  nupropa::NeutrinoNeutrinoInteraction *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoField_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeutrinoNeutrinoInteraction" "', argument " "1"" of type '" "crpropa::ref_ptr< NeutrinoField >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeutrinoNeutrinoInteraction" "', argument " "1"" of type '" "crpropa::ref_ptr< NeutrinoField >""'");
    } else {
      crpropa::ref_ptr< NeutrinoField > * temp = reinterpret_cast< crpropa::ref_ptr< NeutrinoField > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoMixing_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NeutrinoNeutrinoInteraction" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeutrinoNeutrinoInteraction" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'");
    } else {
      crpropa::ref_ptr< NeutrinoMixing > * temp = reinterpret_cast< crpropa::ref_ptr< NeutrinoMixing > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NeutrinoNeutrinoInteraction" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::NeutrinoNeutrinoInteraction *)new nupropa::NeutrinoNeutrinoInteraction(arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_NeutrinoNeutrinoInteraction__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SwigValueWrapper< crpropa::ref_ptr< NeutrinoField > > arg1 ;
  SwigValueWrapper< crpropa::ref_ptr< NeutrinoMixing > > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  nupropa::NeutrinoNeutrinoInteraction *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoField_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeutrinoNeutrinoInteraction" "', argument " "1"" of type '" "crpropa::ref_ptr< NeutrinoField >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeutrinoNeutrinoInteraction" "', argument " "1"" of type '" "crpropa::ref_ptr< NeutrinoField >""'");
    } else {
      crpropa::ref_ptr< NeutrinoField > * temp = reinterpret_cast< crpropa::ref_ptr< NeutrinoField > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoMixing_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NeutrinoNeutrinoInteraction" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeutrinoNeutrinoInteraction" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'");
    } else {
      crpropa::ref_ptr< NeutrinoMixing > * temp = reinterpret_cast< crpropa::ref_ptr< NeutrinoMixing > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::NeutrinoNeutrinoInteraction *)new nupropa::NeutrinoNeutrinoInteraction(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_NeutrinoNeutrinoInteraction(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_NeutrinoNeutrinoInteraction")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_NeutrinoNeutrinoInteraction", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoField_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoMixing_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NeutrinoNeutrinoInteraction__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoField_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoMixing_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_NeutrinoNeutrinoInteraction__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoField_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoMixing_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_NeutrinoNeutrinoInteraction__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_NeutrinoNeutrinoInteraction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nupropa::NeutrinoNeutrinoInteraction::NeutrinoNeutrinoInteraction(crpropa::ref_ptr< NeutrinoField >,crpropa::ref_ptr< NeutrinoMixing >,bool,double)\n"
    "    nupropa::NeutrinoNeutrinoInteraction::NeutrinoNeutrinoInteraction(crpropa::ref_ptr< NeutrinoField >,crpropa::ref_ptr< NeutrinoMixing >,bool)\n"
    "    nupropa::NeutrinoNeutrinoInteraction::NeutrinoNeutrinoInteraction(crpropa::ref_ptr< NeutrinoField >,crpropa::ref_ptr< NeutrinoMixing >)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_NeutrinoNeutrinoInteraction_setNeutrinoField(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoNeutrinoInteraction *arg1 = (nupropa::NeutrinoNeutrinoInteraction *) 0 ;
  SwigValueWrapper< crpropa::ref_ptr< NeutrinoField > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoNeutrinoInteraction_setNeutrinoField" "', argument " "1"" of type '" "nupropa::NeutrinoNeutrinoInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoNeutrinoInteraction * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoField_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoNeutrinoInteraction_setNeutrinoField" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoField >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeutrinoNeutrinoInteraction_setNeutrinoField" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoField >""'");
    } else {
      crpropa::ref_ptr< NeutrinoField > * temp = reinterpret_cast< crpropa::ref_ptr< NeutrinoField > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setNeutrinoField(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoNeutrinoInteraction_setNeutrinoMixing(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoNeutrinoInteraction *arg1 = (nupropa::NeutrinoNeutrinoInteraction *) 0 ;
  SwigValueWrapper< crpropa::ref_ptr< NeutrinoMixing > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoNeutrinoInteraction_setNeutrinoMixing" "', argument " "1"" of type '" "nupropa::NeutrinoNeutrinoInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoNeutrinoInteraction * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoMixing_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoNeutrinoInteraction_setNeutrinoMixing" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeutrinoNeutrinoInteraction_setNeutrinoMixing" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'");
    } else {
      crpropa::ref_ptr< NeutrinoMixing > * temp = reinterpret_cast< crpropa::ref_ptr< NeutrinoMixing > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setNeutrinoMixing(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoNeutrinoInteraction_setHaveSecondaries(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoNeutrinoInteraction *arg1 = (nupropa::NeutrinoNeutrinoInteraction *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoNeutrinoInteraction_setHaveSecondaries" "', argument " "1"" of type '" "nupropa::NeutrinoNeutrinoInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoNeutrinoInteraction * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoNeutrinoInteraction_setHaveSecondaries" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setHaveSecondaries(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoNeutrinoInteraction_setLimit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoNeutrinoInteraction *arg1 = (nupropa::NeutrinoNeutrinoInteraction *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoNeutrinoInteraction_setLimit" "', argument " "1"" of type '" "nupropa::NeutrinoNeutrinoInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoNeutrinoInteraction * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoNeutrinoInteraction_setLimit" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setLimit(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoNeutrinoInteraction_setInteractionTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoNeutrinoInteraction *arg1 = (nupropa::NeutrinoNeutrinoInteraction *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoNeutrinoInteraction_setInteractionTag" "', argument " "1"" of type '" "nupropa::NeutrinoNeutrinoInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoNeutrinoInteraction * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NeutrinoNeutrinoInteraction_setInteractionTag" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setInteractionTag(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoNeutrinoInteraction_getInteractionTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoNeutrinoInteraction *arg1 = (nupropa::NeutrinoNeutrinoInteraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoNeutrinoInteraction_getInteractionTag", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoNeutrinoInteraction_getInteractionTag" "', argument " "1"" of type '" "nupropa::NeutrinoNeutrinoInteraction const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoNeutrinoInteraction * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((nupropa::NeutrinoNeutrinoInteraction const *)arg1)->getInteractionTag();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoNeutrinoInteraction_setRelativisticInteraction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoNeutrinoInteraction *arg1 = (nupropa::NeutrinoNeutrinoInteraction *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoNeutrinoInteraction_setRelativisticInteraction", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoNeutrinoInteraction_setRelativisticInteraction" "', argument " "1"" of type '" "nupropa::NeutrinoNeutrinoInteraction const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoNeutrinoInteraction * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoNeutrinoInteraction_setRelativisticInteraction" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NeutrinoNeutrinoInteraction_setRelativisticInteraction" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NeutrinoNeutrinoInteraction_setRelativisticInteraction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NeutrinoNeutrinoInteraction_setRelativisticInteraction" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        ((nupropa::NeutrinoNeutrinoInteraction const *)arg1)->setRelativisticInteraction(arg2,arg3,arg4,arg5);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoNeutrinoInteraction_loadRateFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoNeutrinoInteraction *arg1 = (nupropa::NeutrinoNeutrinoInteraction *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoNeutrinoInteraction_loadRateFile" "', argument " "1"" of type '" "nupropa::NeutrinoNeutrinoInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoNeutrinoInteraction * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoNeutrinoInteraction_loadRateFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeutrinoNeutrinoInteraction_loadRateFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->loadRateFile((std::string const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoNeutrinoInteraction_loadCumulativeRateFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoNeutrinoInteraction *arg1 = (nupropa::NeutrinoNeutrinoInteraction *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoNeutrinoInteraction_loadCumulativeRateFile" "', argument " "1"" of type '" "nupropa::NeutrinoNeutrinoInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoNeutrinoInteraction * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoNeutrinoInteraction_loadCumulativeRateFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeutrinoNeutrinoInteraction_loadCumulativeRateFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->loadCumulativeRateFile((std::string const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoNeutrinoInteraction_initRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoNeutrinoInteraction *arg1 = (nupropa::NeutrinoNeutrinoInteraction *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoNeutrinoInteraction_initRate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoNeutrinoInteraction_initRate" "', argument " "1"" of type '" "nupropa::NeutrinoNeutrinoInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoNeutrinoInteraction * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NeutrinoNeutrinoInteraction_initRate" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NeutrinoNeutrinoInteraction_initRate" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->initRate(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoNeutrinoInteraction_initCumulativeRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoNeutrinoInteraction *arg1 = (nupropa::NeutrinoNeutrinoInteraction *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoNeutrinoInteraction_initCumulativeRate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoNeutrinoInteraction_initCumulativeRate" "', argument " "1"" of type '" "nupropa::NeutrinoNeutrinoInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoNeutrinoInteraction * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NeutrinoNeutrinoInteraction_initCumulativeRate" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NeutrinoNeutrinoInteraction_initCumulativeRate" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->initCumulativeRate(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoNeutrinoInteraction_findClosestRedshift(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoNeutrinoInteraction *arg1 = (nupropa::NeutrinoNeutrinoInteraction *) 0 ;
  double arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoNeutrinoInteraction_findClosestRedshift", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoNeutrinoInteraction_findClosestRedshift" "', argument " "1"" of type '" "nupropa::NeutrinoNeutrinoInteraction const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoNeutrinoInteraction * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoNeutrinoInteraction_findClosestRedshift" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[1], &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NeutrinoNeutrinoInteraction_findClosestRedshift" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeutrinoNeutrinoInteraction_findClosestRedshift" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)((nupropa::NeutrinoNeutrinoInteraction const *)arg1)->findClosestRedshift(arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoNeutrinoInteraction_interactionIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoNeutrinoInteraction *arg1 = (nupropa::NeutrinoNeutrinoInteraction *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoNeutrinoInteraction_interactionIndex", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoNeutrinoInteraction_interactionIndex" "', argument " "1"" of type '" "nupropa::NeutrinoNeutrinoInteraction const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoNeutrinoInteraction * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoNeutrinoInteraction_interactionIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NeutrinoNeutrinoInteraction_interactionIndex" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NeutrinoNeutrinoInteraction_interactionIndex" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NeutrinoNeutrinoInteraction_interactionIndex" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)((nupropa::NeutrinoNeutrinoInteraction const *)arg1)->interactionIndex(arg2,arg3,arg4,arg5);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoNeutrinoInteraction_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoNeutrinoInteraction *arg1 = (nupropa::NeutrinoNeutrinoInteraction *) 0 ;
  crpropa::Candidate *arg2 = (crpropa::Candidate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoNeutrinoInteraction_process" "', argument " "1"" of type '" "nupropa::NeutrinoNeutrinoInteraction const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoNeutrinoInteraction * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2,SWIGTYPE_p_crpropa__Candidate, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoNeutrinoInteraction_process" "', argument " "2"" of type '" "crpropa::Candidate *""'"); 
  }
  arg2 = reinterpret_cast< crpropa::Candidate * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        ((nupropa::NeutrinoNeutrinoInteraction const *)arg1)->process(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoNeutrinoInteraction_performInteraction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoNeutrinoInteraction *arg1 = (nupropa::NeutrinoNeutrinoInteraction *) 0 ;
  crpropa::Candidate *arg2 = (crpropa::Candidate *) 0 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoNeutrinoInteraction_performInteraction", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoNeutrinoInteraction_performInteraction" "', argument " "1"" of type '" "nupropa::NeutrinoNeutrinoInteraction const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoNeutrinoInteraction * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2,SWIGTYPE_p_crpropa__Candidate, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoNeutrinoInteraction_performInteraction" "', argument " "2"" of type '" "crpropa::Candidate *""'"); 
  }
  arg2 = reinterpret_cast< crpropa::Candidate * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NeutrinoNeutrinoInteraction_performInteraction" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NeutrinoNeutrinoInteraction_performInteraction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        ((nupropa::NeutrinoNeutrinoInteraction const *)arg1)->performInteraction(arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NeutrinoNeutrinoInteraction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoNeutrinoInteraction *arg1 = (nupropa::NeutrinoNeutrinoInteraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_NeutrinoNeutrinoInteraction", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoNeutrinoInteraction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NeutrinoNeutrinoInteraction" "', argument " "1"" of type '" "nupropa::NeutrinoNeutrinoInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoNeutrinoInteraction * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        arg1->removeReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_NeutrinoNeutrinoInteraction) /* defines _wrap_delete_NeutrinoNeutrinoInteraction_destructor_closure */

SWIGINTERN int _wrap_new_NeutrinoAntineutrinoInteraction(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SwigValueWrapper< crpropa::ref_ptr< NeutrinoField > > arg1 ;
  SwigValueWrapper< crpropa::ref_ptr< Channels > > arg2 ;
  bool arg3 ;
  double arg4 ;
  SwigValueWrapper< crpropa::ref_ptr< NeutrinoMixing > > arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  nupropa::NeutrinoAntineutrinoInteraction *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_NeutrinoAntineutrinoInteraction")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_NeutrinoAntineutrinoInteraction", 5, 5, swig_obj)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoField_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeutrinoAntineutrinoInteraction" "', argument " "1"" of type '" "crpropa::ref_ptr< NeutrinoField >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeutrinoAntineutrinoInteraction" "', argument " "1"" of type '" "crpropa::ref_ptr< NeutrinoField >""'");
    } else {
      crpropa::ref_ptr< NeutrinoField > * temp = reinterpret_cast< crpropa::ref_ptr< NeutrinoField > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_Channels_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NeutrinoAntineutrinoInteraction" "', argument " "2"" of type '" "crpropa::ref_ptr< Channels >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeutrinoAntineutrinoInteraction" "', argument " "2"" of type '" "crpropa::ref_ptr< Channels >""'");
    } else {
      crpropa::ref_ptr< Channels > * temp = reinterpret_cast< crpropa::ref_ptr< Channels > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NeutrinoAntineutrinoInteraction" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_NeutrinoAntineutrinoInteraction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoMixing_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_NeutrinoAntineutrinoInteraction" "', argument " "5"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeutrinoAntineutrinoInteraction" "', argument " "5"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'");
    } else {
      crpropa::ref_ptr< NeutrinoMixing > * temp = reinterpret_cast< crpropa::ref_ptr< NeutrinoMixing > * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::NeutrinoAntineutrinoInteraction *)new nupropa::NeutrinoAntineutrinoInteraction(arg1,arg2,arg3,arg4,arg5);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoAntineutrinoInteraction, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_NeutrinoAntineutrinoInteraction_setNeutrinoField(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoAntineutrinoInteraction *arg1 = (nupropa::NeutrinoAntineutrinoInteraction *) 0 ;
  SwigValueWrapper< crpropa::ref_ptr< NeutrinoField > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoAntineutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoAntineutrinoInteraction_setNeutrinoField" "', argument " "1"" of type '" "nupropa::NeutrinoAntineutrinoInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoAntineutrinoInteraction * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoField_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoAntineutrinoInteraction_setNeutrinoField" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoField >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeutrinoAntineutrinoInteraction_setNeutrinoField" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoField >""'");
    } else {
      crpropa::ref_ptr< NeutrinoField > * temp = reinterpret_cast< crpropa::ref_ptr< NeutrinoField > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setNeutrinoField(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoAntineutrinoInteraction_setNeutrinoMixing(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoAntineutrinoInteraction *arg1 = (nupropa::NeutrinoAntineutrinoInteraction *) 0 ;
  SwigValueWrapper< crpropa::ref_ptr< NeutrinoMixing > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoAntineutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoAntineutrinoInteraction_setNeutrinoMixing" "', argument " "1"" of type '" "nupropa::NeutrinoAntineutrinoInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoAntineutrinoInteraction * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoMixing_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoAntineutrinoInteraction_setNeutrinoMixing" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeutrinoAntineutrinoInteraction_setNeutrinoMixing" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'");
    } else {
      crpropa::ref_ptr< NeutrinoMixing > * temp = reinterpret_cast< crpropa::ref_ptr< NeutrinoMixing > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setNeutrinoMixing(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoAntineutrinoInteraction_setHaveSecondaries(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoAntineutrinoInteraction *arg1 = (nupropa::NeutrinoAntineutrinoInteraction *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoAntineutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoAntineutrinoInteraction_setHaveSecondaries" "', argument " "1"" of type '" "nupropa::NeutrinoAntineutrinoInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoAntineutrinoInteraction * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoAntineutrinoInteraction_setHaveSecondaries" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setHaveSecondaries(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoAntineutrinoInteraction_setLimit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoAntineutrinoInteraction *arg1 = (nupropa::NeutrinoAntineutrinoInteraction *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoAntineutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoAntineutrinoInteraction_setLimit" "', argument " "1"" of type '" "nupropa::NeutrinoAntineutrinoInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoAntineutrinoInteraction * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoAntineutrinoInteraction_setLimit" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setLimit(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoAntineutrinoInteraction_setChannels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoAntineutrinoInteraction *arg1 = (nupropa::NeutrinoAntineutrinoInteraction *) 0 ;
  SwigValueWrapper< crpropa::ref_ptr< Channels > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoAntineutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoAntineutrinoInteraction_setChannels" "', argument " "1"" of type '" "nupropa::NeutrinoAntineutrinoInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoAntineutrinoInteraction * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_Channels_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoAntineutrinoInteraction_setChannels" "', argument " "2"" of type '" "crpropa::ref_ptr< Channels >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeutrinoAntineutrinoInteraction_setChannels" "', argument " "2"" of type '" "crpropa::ref_ptr< Channels >""'");
    } else {
      crpropa::ref_ptr< Channels > * temp = reinterpret_cast< crpropa::ref_ptr< Channels > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setChannels(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoAntineutrinoInteraction_setChannelsBundle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoAntineutrinoInteraction *arg1 = (nupropa::NeutrinoAntineutrinoInteraction *) 0 ;
  SwigValueWrapper< crpropa::ref_ptr< Channels > > arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoAntineutrinoInteraction_setChannelsBundle", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoAntineutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoAntineutrinoInteraction_setChannelsBundle" "', argument " "1"" of type '" "nupropa::NeutrinoAntineutrinoInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoAntineutrinoInteraction * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_Channels_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoAntineutrinoInteraction_setChannelsBundle" "', argument " "2"" of type '" "crpropa::ref_ptr< Channels >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeutrinoAntineutrinoInteraction_setChannelsBundle" "', argument " "2"" of type '" "crpropa::ref_ptr< Channels >""'");
    } else {
      crpropa::ref_ptr< Channels > * temp = reinterpret_cast< crpropa::ref_ptr< Channels > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NeutrinoAntineutrinoInteraction_setChannelsBundle" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setChannelsBundle(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoAntineutrinoInteraction_setRelativisticInteraction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoAntineutrinoInteraction *arg1 = (nupropa::NeutrinoAntineutrinoInteraction *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoAntineutrinoInteraction_setRelativisticInteraction", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoAntineutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoAntineutrinoInteraction_setRelativisticInteraction" "', argument " "1"" of type '" "nupropa::NeutrinoAntineutrinoInteraction const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoAntineutrinoInteraction * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoAntineutrinoInteraction_setRelativisticInteraction" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NeutrinoAntineutrinoInteraction_setRelativisticInteraction" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NeutrinoAntineutrinoInteraction_setRelativisticInteraction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NeutrinoAntineutrinoInteraction_setRelativisticInteraction" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        ((nupropa::NeutrinoAntineutrinoInteraction const *)arg1)->setRelativisticInteraction(arg2,arg3,arg4,arg5);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoAntineutrinoInteraction_setInteractionTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoAntineutrinoInteraction *arg1 = (nupropa::NeutrinoAntineutrinoInteraction *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoAntineutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoAntineutrinoInteraction_setInteractionTag" "', argument " "1"" of type '" "nupropa::NeutrinoAntineutrinoInteraction const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoAntineutrinoInteraction * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NeutrinoAntineutrinoInteraction_setInteractionTag" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        ((nupropa::NeutrinoAntineutrinoInteraction const *)arg1)->setInteractionTag(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoAntineutrinoInteraction_getInteractionTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoAntineutrinoInteraction *arg1 = (nupropa::NeutrinoAntineutrinoInteraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoAntineutrinoInteraction_getInteractionTag", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoAntineutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoAntineutrinoInteraction_getInteractionTag" "', argument " "1"" of type '" "nupropa::NeutrinoAntineutrinoInteraction const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoAntineutrinoInteraction * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((nupropa::NeutrinoAntineutrinoInteraction const *)arg1)->getInteractionTag();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoAntineutrinoInteraction_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoAntineutrinoInteraction *arg1 = (nupropa::NeutrinoAntineutrinoInteraction *) 0 ;
  crpropa::Candidate *arg2 = (crpropa::Candidate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoAntineutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoAntineutrinoInteraction_process" "', argument " "1"" of type '" "nupropa::NeutrinoAntineutrinoInteraction const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoAntineutrinoInteraction * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2,SWIGTYPE_p_crpropa__Candidate, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoAntineutrinoInteraction_process" "', argument " "2"" of type '" "crpropa::Candidate *""'"); 
  }
  arg2 = reinterpret_cast< crpropa::Candidate * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        ((nupropa::NeutrinoAntineutrinoInteraction const *)arg1)->process(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoAntineutrinoInteraction_performInteraction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoAntineutrinoInteraction *arg1 = (nupropa::NeutrinoAntineutrinoInteraction *) 0 ;
  crpropa::Candidate *arg2 = (crpropa::Candidate *) 0 ;
  double arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoAntineutrinoInteraction_performInteraction", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoAntineutrinoInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoAntineutrinoInteraction_performInteraction" "', argument " "1"" of type '" "nupropa::NeutrinoAntineutrinoInteraction const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoAntineutrinoInteraction * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2,SWIGTYPE_p_crpropa__Candidate, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoAntineutrinoInteraction_performInteraction" "', argument " "2"" of type '" "crpropa::Candidate *""'"); 
  }
  arg2 = reinterpret_cast< crpropa::Candidate * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NeutrinoAntineutrinoInteraction_performInteraction" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NeutrinoAntineutrinoInteraction_performInteraction" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        ((nupropa::NeutrinoAntineutrinoInteraction const *)arg1)->performInteraction(arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NeutrinoAntineutrinoInteraction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoAntineutrinoInteraction *arg1 = (nupropa::NeutrinoAntineutrinoInteraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_NeutrinoAntineutrinoInteraction", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoAntineutrinoInteraction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NeutrinoAntineutrinoInteraction" "', argument " "1"" of type '" "nupropa::NeutrinoAntineutrinoInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoAntineutrinoInteraction * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        arg1->removeReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_NeutrinoAntineutrinoInteraction) /* defines _wrap_delete_NeutrinoAntineutrinoInteraction_destructor_closure */

SWIGINTERN int _wrap_new_NeutrinoPhotonInteraction__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< crpropa::PhotonField > arg1 ;
  SwigValueWrapper< crpropa::ref_ptr< NeutrinoMixing > > arg2 ;
  bool arg3 ;
  double arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  nupropa::NeutrinoPhotonInteraction *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_crpropa__ref_ptrT_crpropa__PhotonField_t,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeutrinoPhotonInteraction" "', argument " "1"" of type '" "crpropa::ref_ptr< crpropa::PhotonField >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeutrinoPhotonInteraction" "', argument " "1"" of type '" "crpropa::ref_ptr< crpropa::PhotonField >""'");
    } else {
      crpropa::ref_ptr< crpropa::PhotonField > * temp = reinterpret_cast< crpropa::ref_ptr< crpropa::PhotonField > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoMixing_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NeutrinoPhotonInteraction" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeutrinoPhotonInteraction" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'");
    } else {
      crpropa::ref_ptr< NeutrinoMixing > * temp = reinterpret_cast< crpropa::ref_ptr< NeutrinoMixing > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NeutrinoPhotonInteraction" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_NeutrinoPhotonInteraction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::NeutrinoPhotonInteraction *)new nupropa::NeutrinoPhotonInteraction(arg1,arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_NeutrinoPhotonInteraction__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< crpropa::PhotonField > arg1 ;
  SwigValueWrapper< crpropa::ref_ptr< NeutrinoMixing > > arg2 ;
  bool arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  nupropa::NeutrinoPhotonInteraction *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_crpropa__ref_ptrT_crpropa__PhotonField_t,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeutrinoPhotonInteraction" "', argument " "1"" of type '" "crpropa::ref_ptr< crpropa::PhotonField >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeutrinoPhotonInteraction" "', argument " "1"" of type '" "crpropa::ref_ptr< crpropa::PhotonField >""'");
    } else {
      crpropa::ref_ptr< crpropa::PhotonField > * temp = reinterpret_cast< crpropa::ref_ptr< crpropa::PhotonField > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoMixing_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NeutrinoPhotonInteraction" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeutrinoPhotonInteraction" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'");
    } else {
      crpropa::ref_ptr< NeutrinoMixing > * temp = reinterpret_cast< crpropa::ref_ptr< NeutrinoMixing > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NeutrinoPhotonInteraction" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::NeutrinoPhotonInteraction *)new nupropa::NeutrinoPhotonInteraction(arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_NeutrinoPhotonInteraction__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< crpropa::PhotonField > arg1 ;
  SwigValueWrapper< crpropa::ref_ptr< NeutrinoMixing > > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  nupropa::NeutrinoPhotonInteraction *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_crpropa__ref_ptrT_crpropa__PhotonField_t,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeutrinoPhotonInteraction" "', argument " "1"" of type '" "crpropa::ref_ptr< crpropa::PhotonField >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeutrinoPhotonInteraction" "', argument " "1"" of type '" "crpropa::ref_ptr< crpropa::PhotonField >""'");
    } else {
      crpropa::ref_ptr< crpropa::PhotonField > * temp = reinterpret_cast< crpropa::ref_ptr< crpropa::PhotonField > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoMixing_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NeutrinoPhotonInteraction" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeutrinoPhotonInteraction" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'");
    } else {
      crpropa::ref_ptr< NeutrinoMixing > * temp = reinterpret_cast< crpropa::ref_ptr< NeutrinoMixing > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::NeutrinoPhotonInteraction *)new nupropa::NeutrinoPhotonInteraction(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_NeutrinoPhotonInteraction(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_NeutrinoPhotonInteraction")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_NeutrinoPhotonInteraction", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_crpropa__ref_ptrT_crpropa__PhotonField_t, SWIG_POINTER_NO_NULL | SWIG_POINTER_IMPLICIT_CONV);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoMixing_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NeutrinoPhotonInteraction__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_crpropa__ref_ptrT_crpropa__PhotonField_t, SWIG_POINTER_NO_NULL | SWIG_POINTER_IMPLICIT_CONV);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoMixing_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_NeutrinoPhotonInteraction__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_crpropa__ref_ptrT_crpropa__PhotonField_t, SWIG_POINTER_NO_NULL | SWIG_POINTER_IMPLICIT_CONV);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoMixing_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_NeutrinoPhotonInteraction__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_NeutrinoPhotonInteraction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nupropa::NeutrinoPhotonInteraction::NeutrinoPhotonInteraction(crpropa::ref_ptr< crpropa::PhotonField >,crpropa::ref_ptr< NeutrinoMixing >,bool,double)\n"
    "    nupropa::NeutrinoPhotonInteraction::NeutrinoPhotonInteraction(crpropa::ref_ptr< crpropa::PhotonField >,crpropa::ref_ptr< NeutrinoMixing >,bool)\n"
    "    nupropa::NeutrinoPhotonInteraction::NeutrinoPhotonInteraction(crpropa::ref_ptr< crpropa::PhotonField >,crpropa::ref_ptr< NeutrinoMixing >)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_NeutrinoPhotonInteraction_setPhotonField(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoPhotonInteraction *arg1 = (nupropa::NeutrinoPhotonInteraction *) 0 ;
  crpropa::ref_ptr< crpropa::PhotonField > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoPhotonInteraction_setPhotonField" "', argument " "1"" of type '" "nupropa::NeutrinoPhotonInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoPhotonInteraction * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_crpropa__PhotonField_t,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoPhotonInteraction_setPhotonField" "', argument " "2"" of type '" "crpropa::ref_ptr< crpropa::PhotonField >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeutrinoPhotonInteraction_setPhotonField" "', argument " "2"" of type '" "crpropa::ref_ptr< crpropa::PhotonField >""'");
    } else {
      crpropa::ref_ptr< crpropa::PhotonField > * temp = reinterpret_cast< crpropa::ref_ptr< crpropa::PhotonField > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setPhotonField(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoPhotonInteraction_setNeutrinoMixing(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoPhotonInteraction *arg1 = (nupropa::NeutrinoPhotonInteraction *) 0 ;
  SwigValueWrapper< crpropa::ref_ptr< NeutrinoMixing > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoPhotonInteraction_setNeutrinoMixing" "', argument " "1"" of type '" "nupropa::NeutrinoPhotonInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoPhotonInteraction * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_NeutrinoMixing_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoPhotonInteraction_setNeutrinoMixing" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeutrinoPhotonInteraction_setNeutrinoMixing" "', argument " "2"" of type '" "crpropa::ref_ptr< NeutrinoMixing >""'");
    } else {
      crpropa::ref_ptr< NeutrinoMixing > * temp = reinterpret_cast< crpropa::ref_ptr< NeutrinoMixing > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setNeutrinoMixing(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoPhotonInteraction_setHaveSecondaries(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoPhotonInteraction *arg1 = (nupropa::NeutrinoPhotonInteraction *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoPhotonInteraction_setHaveSecondaries" "', argument " "1"" of type '" "nupropa::NeutrinoPhotonInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoPhotonInteraction * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoPhotonInteraction_setHaveSecondaries" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setHaveSecondaries(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoPhotonInteraction_setLimit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoPhotonInteraction *arg1 = (nupropa::NeutrinoPhotonInteraction *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoPhotonInteraction_setLimit" "', argument " "1"" of type '" "nupropa::NeutrinoPhotonInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoPhotonInteraction * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoPhotonInteraction_setLimit" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setLimit(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoPhotonInteraction_setInteractionTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoPhotonInteraction *arg1 = (nupropa::NeutrinoPhotonInteraction *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoPhotonInteraction_setInteractionTag" "', argument " "1"" of type '" "nupropa::NeutrinoPhotonInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoPhotonInteraction * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NeutrinoPhotonInteraction_setInteractionTag" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setInteractionTag(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoPhotonInteraction_getInteractionTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoPhotonInteraction *arg1 = (nupropa::NeutrinoPhotonInteraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoPhotonInteraction_getInteractionTag", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoPhotonInteraction_getInteractionTag" "', argument " "1"" of type '" "nupropa::NeutrinoPhotonInteraction const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoPhotonInteraction * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((nupropa::NeutrinoPhotonInteraction const *)arg1)->getInteractionTag();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoPhotonInteraction_loadRateFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoPhotonInteraction *arg1 = (nupropa::NeutrinoPhotonInteraction *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoPhotonInteraction_loadRateFile" "', argument " "1"" of type '" "nupropa::NeutrinoPhotonInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoPhotonInteraction * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoPhotonInteraction_loadRateFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeutrinoPhotonInteraction_loadRateFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->loadRateFile((std::string const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoPhotonInteraction_loadCumulativeRateFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoPhotonInteraction *arg1 = (nupropa::NeutrinoPhotonInteraction *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoPhotonInteraction_loadCumulativeRateFile" "', argument " "1"" of type '" "nupropa::NeutrinoPhotonInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoPhotonInteraction * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoPhotonInteraction_loadCumulativeRateFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeutrinoPhotonInteraction_loadCumulativeRateFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->loadCumulativeRateFile((std::string const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoPhotonInteraction_initRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoPhotonInteraction *arg1 = (nupropa::NeutrinoPhotonInteraction *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoPhotonInteraction_initRate" "', argument " "1"" of type '" "nupropa::NeutrinoPhotonInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoPhotonInteraction * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NeutrinoPhotonInteraction_initRate" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->initRate(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoPhotonInteraction_initCumulativeRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoPhotonInteraction *arg1 = (nupropa::NeutrinoPhotonInteraction *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoPhotonInteraction_initCumulativeRate" "', argument " "1"" of type '" "nupropa::NeutrinoPhotonInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoPhotonInteraction * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NeutrinoPhotonInteraction_initCumulativeRate" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->initCumulativeRate(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoPhotonInteraction_setRelativisticInteraction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoPhotonInteraction *arg1 = (nupropa::NeutrinoPhotonInteraction *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoPhotonInteraction_setRelativisticInteraction", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoPhotonInteraction_setRelativisticInteraction" "', argument " "1"" of type '" "nupropa::NeutrinoPhotonInteraction const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoPhotonInteraction * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoPhotonInteraction_setRelativisticInteraction" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NeutrinoPhotonInteraction_setRelativisticInteraction" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NeutrinoPhotonInteraction_setRelativisticInteraction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        ((nupropa::NeutrinoPhotonInteraction const *)arg1)->setRelativisticInteraction(arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoPhotonInteraction_fromIDtoChannel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoPhotonInteraction *arg1 = (nupropa::NeutrinoPhotonInteraction *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoPhotonInteraction_fromIDtoChannel" "', argument " "1"" of type '" "nupropa::NeutrinoPhotonInteraction const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoPhotonInteraction * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoPhotonInteraction_fromIDtoChannel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)((nupropa::NeutrinoPhotonInteraction const *)arg1)->fromIDtoChannel(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoPhotonInteraction_interactionIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoPhotonInteraction *arg1 = (nupropa::NeutrinoPhotonInteraction *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoPhotonInteraction_interactionIndex", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoPhotonInteraction_interactionIndex" "', argument " "1"" of type '" "nupropa::NeutrinoPhotonInteraction const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoPhotonInteraction * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoPhotonInteraction_interactionIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NeutrinoPhotonInteraction_interactionIndex" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)((nupropa::NeutrinoPhotonInteraction const *)arg1)->interactionIndex(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoPhotonInteraction_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoPhotonInteraction *arg1 = (nupropa::NeutrinoPhotonInteraction *) 0 ;
  crpropa::Candidate *arg2 = (crpropa::Candidate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoPhotonInteraction_process" "', argument " "1"" of type '" "nupropa::NeutrinoPhotonInteraction const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoPhotonInteraction * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2,SWIGTYPE_p_crpropa__Candidate, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoPhotonInteraction_process" "', argument " "2"" of type '" "crpropa::Candidate *""'"); 
  }
  arg2 = reinterpret_cast< crpropa::Candidate * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        ((nupropa::NeutrinoPhotonInteraction const *)arg1)->process(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoPhotonInteraction_performInteraction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoPhotonInteraction *arg1 = (nupropa::NeutrinoPhotonInteraction *) 0 ;
  crpropa::Candidate *arg2 = (crpropa::Candidate *) 0 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoPhotonInteraction_performInteraction", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoPhotonInteraction_performInteraction" "', argument " "1"" of type '" "nupropa::NeutrinoPhotonInteraction const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoPhotonInteraction * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2,SWIGTYPE_p_crpropa__Candidate, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoPhotonInteraction_performInteraction" "', argument " "2"" of type '" "crpropa::Candidate *""'"); 
  }
  arg2 = reinterpret_cast< crpropa::Candidate * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NeutrinoPhotonInteraction_performInteraction" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NeutrinoPhotonInteraction_performInteraction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        ((nupropa::NeutrinoPhotonInteraction const *)arg1)->performInteraction(arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NeutrinoPhotonInteraction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoPhotonInteraction *arg1 = (nupropa::NeutrinoPhotonInteraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_NeutrinoPhotonInteraction", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoPhotonInteraction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NeutrinoPhotonInteraction" "', argument " "1"" of type '" "nupropa::NeutrinoPhotonInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoPhotonInteraction * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        arg1->removeReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_NeutrinoPhotonInteraction) /* defines _wrap_delete_NeutrinoPhotonInteraction_destructor_closure */

SWIGINTERN int _wrap_new_Channels__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  nupropa::Channels *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  arg1 = self;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        if ( self->ob_type != ((SwigPyClientData *)(SWIGTYPE_p_nupropa__Channels)->clientdata)->pytype ) {
          /* subclassed */
          result = (nupropa::Channels *)new SwigDirector_Channels(arg1); 
        } else {
          result = (nupropa::Channels *)new nupropa::Channels(); 
        }
        
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__Channels, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Channels__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  SwigValueWrapper< std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::allocator< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > > > arg2 ;
  SwigValueWrapper< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > > arg3 ;
  SwigValueWrapper< std::vector< bool,std::allocator< bool > > > arg4 ;
  std::string arg5 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  nupropa::Channels *result = 0 ;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  arg1 = self;
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_std__allocatorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Channels" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Channels" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > >""'");
    } else {
      std::vector< std::string,std::allocator< std::string > > * temp = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Channels" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Channels" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >""'");
    } else {
      std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > * temp = reinterpret_cast< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_std__vectorT_bool_std__allocatorT_bool_t_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Channels" "', argument " "4"" of type '" "std::vector< bool,std::allocator< bool > >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Channels" "', argument " "4"" of type '" "std::vector< bool,std::allocator< bool > >""'");
    } else {
      std::vector< bool,std::allocator< bool > > * temp = reinterpret_cast< std::vector< bool,std::allocator< bool > > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Channels" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        if ( self->ob_type != ((SwigPyClientData *)(SWIGTYPE_p_nupropa__Channels)->clientdata)->pytype ) {
          /* subclassed */
          result = (nupropa::Channels *)new SwigDirector_Channels(arg1,arg2,arg3,arg4,arg5); 
        } else {
          result = (nupropa::Channels *)new nupropa::Channels(arg2,arg3,arg4,arg5); 
        }
        
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__Channels, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Channels(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_Channels")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Channels", 0, 5, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      return _wrap_new_Channels__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 5) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_std__allocatorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_bool_std__allocatorT_bool_t_t, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[4], (std::basic_string<char>**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_Channels__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Channels'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nupropa::Channels::Channels()\n"
    "    nupropa::Channels::Channels(PyObject *,std::vector< std::string,std::allocator< std::string > >,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >,std::vector< bool,std::allocator< bool > >,std::string)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_Channels_getInteractionChannels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::Channels *arg1 = (nupropa::Channels *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::allocator< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Channels_getInteractionChannels", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__Channels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Channels_getInteractionChannels" "', argument " "1"" of type '" "nupropa::Channels const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::Channels * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((nupropa::Channels const *)arg1)->getInteractionChannels();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(result)), SWIGTYPE_p_std__vectorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_std__allocatorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Channels_getActiveChannels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::Channels *arg1 = (nupropa::Channels *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< bool,std::allocator< bool > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Channels_getActiveChannels", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__Channels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Channels_getActiveChannels" "', argument " "1"" of type '" "nupropa::Channels const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::Channels * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((nupropa::Channels const *)arg1)->getActiveChannels();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< bool,std::allocator< bool > >(result)), SWIGTYPE_p_std__vectorT_bool_std__allocatorT_bool_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Channels_getInteractionFolderPath(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::Channels *arg1 = (nupropa::Channels *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Channels_getInteractionFolderPath", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__Channels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Channels_getInteractionFolderPath" "', argument " "1"" of type '" "nupropa::Channels const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::Channels * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((nupropa::Channels const *)arg1)->getInteractionFolderPath();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Channels_getProductsID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::Channels *arg1 = (nupropa::Channels *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Channels_getProductsID", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__Channels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Channels_getProductsID" "', argument " "1"" of type '" "nupropa::Channels const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::Channels * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((nupropa::Channels const *)arg1)->getProductsID();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >(result)), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Channels_getChannelIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::Channels *arg1 = (nupropa::Channels *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__Channels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Channels_getChannelIndex" "', argument " "1"" of type '" "nupropa::Channels const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::Channels * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Channels_getChannelIndex" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)((nupropa::Channels const *)arg1)->getChannelIndex(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Channels_loadInteractionChannels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::Channels *arg1 = (nupropa::Channels *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__Channels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Channels_loadInteractionChannels" "', argument " "1"" of type '" "nupropa::Channels *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::Channels * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Channels_loadInteractionChannels" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->loadInteractionChannels(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Channels_loadProductsID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::Channels *arg1 = (nupropa::Channels *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__Channels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Channels_loadProductsID" "', argument " "1"" of type '" "nupropa::Channels *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::Channels * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Channels_loadProductsID" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->loadProductsID(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Channels_activeAll(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::Channels *arg1 = (nupropa::Channels *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Channels_activeAll", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__Channels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Channels_activeAll" "', argument " "1"" of type '" "nupropa::Channels *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::Channels * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->activeAll();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Channels_setInteractionChannels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::Channels *arg1 = (nupropa::Channels *) 0 ;
  SwigValueWrapper< std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::allocator< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__Channels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Channels_setInteractionChannels" "', argument " "1"" of type '" "nupropa::Channels *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::Channels * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_std__allocatorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Channels_setInteractionChannels" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Channels_setInteractionChannels" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > >""'");
    } else {
      std::vector< std::string,std::allocator< std::string > > * temp = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setInteractionChannels(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Channels_setChannelsActive(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::Channels *arg1 = (nupropa::Channels *) 0 ;
  SwigValueWrapper< std::vector< bool,std::allocator< bool > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__Channels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Channels_setChannelsActive" "', argument " "1"" of type '" "nupropa::Channels *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::Channels * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_bool_std__allocatorT_bool_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Channels_setChannelsActive" "', argument " "2"" of type '" "std::vector< bool,std::allocator< bool > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Channels_setChannelsActive" "', argument " "2"" of type '" "std::vector< bool,std::allocator< bool > >""'");
    } else {
      std::vector< bool,std::allocator< bool > > * temp = reinterpret_cast< std::vector< bool,std::allocator< bool > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setChannelsActive(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Channels_setInteractionFolderPath(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::Channels *arg1 = (nupropa::Channels *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__Channels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Channels_setInteractionFolderPath" "', argument " "1"" of type '" "nupropa::Channels *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::Channels * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Channels_setInteractionFolderPath" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setInteractionFolderPath(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Channels_setProductsID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::Channels *arg1 = (nupropa::Channels *) 0 ;
  SwigValueWrapper< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__Channels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Channels_setProductsID" "', argument " "1"" of type '" "nupropa::Channels *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::Channels * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Channels_setProductsID" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Channels_setProductsID" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >""'");
    } else {
      std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > * temp = reinterpret_cast< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setProductsID(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Channels_setInactiveChannel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::Channels *arg1 = (nupropa::Channels *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__Channels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Channels_setInactiveChannel" "', argument " "1"" of type '" "nupropa::Channels *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::Channels * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Channels_setInactiveChannel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setInactiveChannel(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Channels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::Channels *arg1 = (nupropa::Channels *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_Channels", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__Channels, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Channels" "', argument " "1"" of type '" "nupropa::Channels *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::Channels * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        arg1->removeReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_Channels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::Channels *arg1 = (nupropa::Channels *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_nupropa__Channels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_Channels" "', argument " "1"" of type '" "nupropa::Channels *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::Channels * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Channels) /* defines _wrap_delete_Channels_destructor_closure */

SWIGINTERN int _wrap_new_ChannelsBundle(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  crpropa::ref_ptr< nupropa::Channels > arg2 ;
  std::string arg3 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[3] ;
  nupropa::ChannelsBundle *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ChannelsBundle")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_ChannelsBundle", 2, 2, swig_obj)) SWIG_fail;
  arg1 = self;
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__Channels_t,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ChannelsBundle" "', argument " "2"" of type '" "crpropa::ref_ptr< nupropa::Channels >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ChannelsBundle" "', argument " "2"" of type '" "crpropa::ref_ptr< nupropa::Channels >""'");
    } else {
      crpropa::ref_ptr< nupropa::Channels > * temp = reinterpret_cast< crpropa::ref_ptr< nupropa::Channels > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ChannelsBundle" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        if ( self->ob_type != ((SwigPyClientData *)(SWIGTYPE_p_nupropa__ChannelsBundle)->clientdata)->pytype ) {
          /* subclassed */
          result = (nupropa::ChannelsBundle *)new SwigDirector_ChannelsBundle(arg1,arg2,arg3); 
        } else {
          result = (nupropa::ChannelsBundle *)new nupropa::ChannelsBundle(arg2,arg3); 
        }
        
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__ChannelsBundle, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_ChannelsBundle_loadRateFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundle_loadRateFile" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsBundle_loadRateFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsBundle_loadRateFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->loadRateFile((std::string const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundle_loadCumulativeRateFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundle_loadCumulativeRateFile" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsBundle_loadCumulativeRateFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsBundle_loadCumulativeRateFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->loadCumulativeRateFile((std::string const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundle_loadProductsChannelId(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundle_loadProductsChannelId" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsBundle_loadProductsChannelId" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsBundle_loadProductsChannelId" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->loadProductsChannelId((std::string const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundle_findClosestRedshift(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  double arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundle_findClosestRedshift", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundle_findClosestRedshift" "', argument " "1"" of type '" "nupropa::ChannelsBundle const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ChannelsBundle_findClosestRedshift" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[1], &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ChannelsBundle_findClosestRedshift" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsBundle_findClosestRedshift" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)((nupropa::ChannelsBundle const *)arg1)->findClosestRedshift(arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundle_selectIndexes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  std::string arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundle_selectIndexes", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundle_selectIndexes" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ChannelsBundle_selectIndexes" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ChannelsBundle_selectIndexes" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ChannelsBundle_selectIndexes" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->selectIndexes(arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundle_getAlphasBetas(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::allocator< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundle_getAlphasBetas", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundle_getAlphasBetas" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ChannelsBundle_getAlphasBetas" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ChannelsBundle_getAlphasBetas" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getAlphasBetas(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(result)), SWIGTYPE_p_std__vectorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_std__allocatorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundle_selectProdChanId(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundle_selectProdChanId", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundle_selectProdChanId" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->selectProdChanId();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< int,std::allocator< int > >(result)), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundle_selectedRates(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundle_selectedRates" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsBundle_selectedRates" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsBundle_selectedRates" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->selectedRates((std::vector< int,std::allocator< int > > const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >(result)), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundle_selectedEnergies(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundle_selectedEnergies" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsBundle_selectedEnergies" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsBundle_selectedEnergies" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->selectedEnergies((std::vector< int,std::allocator< int > > const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >(result)), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundle_getRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  int arg2 ;
  int arg3 ;
  std::string arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundle_getRate", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundle_getRate" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ChannelsBundle_getRate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ChannelsBundle_getRate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ChannelsBundle_getRate" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode5 = SWIG_AsVal_double(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ChannelsBundle_getRate" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ChannelsBundle_getRate" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(arg1)->getRate(arg2,arg3,arg4,arg5,arg6);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundle_fillTableZeros(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundle_fillTableZeros", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundle_fillTableZeros" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsBundle_fillTableZeros" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsBundle_fillTableZeros" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > >""'");
    } else {
      std::vector< double,std::allocator< double > > * temp = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ChannelsBundle_fillTableZeros" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->fillTableZeros(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< double,std::allocator< double > >(result)), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundle_computeInteractionProbabilities(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundle_computeInteractionProbabilities" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsBundle_computeInteractionProbabilities" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsBundle_computeInteractionProbabilities" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >""'");
    } else {
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * temp = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->computeInteractionProbabilities(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundle_selectIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundle_selectIndex", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundle_selectIndex" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelsBundle_selectIndex" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ChannelsBundle_selectIndex" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > >""'");
    } else {
      std::vector< double,std::allocator< double > > * temp = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ChannelsBundle_selectIndex" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->selectIndex(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundle_selectCDF(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundle_selectCDF", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundle_selectCDF" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->selectCDF();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >(result)), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundle_selects(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundle_selects", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundle_selects" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->selects();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< double,std::allocator< double > >(result)), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundle_selectE(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundle_selectE", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundle_selectE" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->selectE();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< double,std::allocator< double > >(result)), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundle_getSelectedIndexes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundle_getSelectedIndexes", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundle_getSelectedIndexes" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getSelectedIndexes();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< int,std::allocator< int > >(result)), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelsBundle_getSelectedIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ChannelsBundle_getSelectedIndex", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelsBundle_getSelectedIndex" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)(arg1)->getSelectedIndex();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ChannelsBundle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_ChannelsBundle", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ChannelsBundle" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        arg1->removeReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_ChannelsBundle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ChannelsBundle *arg1 = (nupropa::ChannelsBundle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_nupropa__ChannelsBundle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_ChannelsBundle" "', argument " "1"" of type '" "nupropa::ChannelsBundle *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ChannelsBundle * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ChannelsBundle) /* defines _wrap_delete_ChannelsBundle_destructor_closure */

SWIGINTERN int _wrap_new_NeutrinoField(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  nupropa::NeutrinoField *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_NeutrinoField")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_NeutrinoField", 0, 0, 0)) SWIG_fail;
  arg1 = self;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        if ( self->ob_type != ((SwigPyClientData *)(SWIGTYPE_p_nupropa__NeutrinoField)->clientdata)->pytype ) {
          /* subclassed */
          result = (nupropa::NeutrinoField *)new SwigDirector_NeutrinoField(arg1); 
        } else {
          SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
          SWIG_fail;
        }
        
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoField, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_NeutrinoField_getNeutrinoDensity__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoField *arg1 = (nupropa::NeutrinoField *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  double result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoField_getNeutrinoDensity" "', argument " "1"" of type '" "nupropa::NeutrinoField const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoField * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoField_getNeutrinoDensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NeutrinoField_getNeutrinoDensity" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    {
      try {
        {
          SWIG_PYTHON_THREAD_BEGIN_ALLOW;
          if (upcall) {
            Swig::DirectorPureVirtualException::raise("nupropa::NeutrinoField::getNeutrinoDensity");
          } else {
            result = (double)((nupropa::NeutrinoField const *)arg1)->getNeutrinoDensity(arg2,arg3);
          }
          SWIG_PYTHON_THREAD_END_ALLOW;
        }
      } catch (Swig::DirectorException &e) {
        SWIG_exception(SWIG_RuntimeError, e.getMessage());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      } catch (const char *e) {
        SWIG_exception(SWIG_RuntimeError, e);
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoField_getNeutrinoDensity__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoField *arg1 = (nupropa::NeutrinoField *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoField_getNeutrinoDensity" "', argument " "1"" of type '" "nupropa::NeutrinoField const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoField * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoField_getNeutrinoDensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    {
      try {
        {
          SWIG_PYTHON_THREAD_BEGIN_ALLOW;
          if (upcall) {
            Swig::DirectorPureVirtualException::raise("nupropa::NeutrinoField::getNeutrinoDensity");
          } else {
            result = (double)((nupropa::NeutrinoField const *)arg1)->getNeutrinoDensity(arg2);
          }
          SWIG_PYTHON_THREAD_END_ALLOW;
        }
      } catch (Swig::DirectorException &e) {
        SWIG_exception(SWIG_RuntimeError, e.getMessage());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      } catch (const char *e) {
        SWIG_exception(SWIG_RuntimeError, e);
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoField_getNeutrinoDensity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "NeutrinoField_getNeutrinoDensity", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_nupropa__NeutrinoField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NeutrinoField_getNeutrinoDensity__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_nupropa__NeutrinoField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NeutrinoField_getNeutrinoDensity__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'NeutrinoField_getNeutrinoDensity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nupropa::NeutrinoField::getNeutrinoDensity(double,double) const\n"
    "    nupropa::NeutrinoField::getNeutrinoDensity(double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NeutrinoField_getMinimumNeutrinoEnergy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoField *arg1 = (nupropa::NeutrinoField *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoField_getMinimumNeutrinoEnergy" "', argument " "1"" of type '" "nupropa::NeutrinoField const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoField * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoField_getMinimumNeutrinoEnergy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    {
      try {
        {
          SWIG_PYTHON_THREAD_BEGIN_ALLOW;
          if (upcall) {
            Swig::DirectorPureVirtualException::raise("nupropa::NeutrinoField::getMinimumNeutrinoEnergy");
          } else {
            result = (double)((nupropa::NeutrinoField const *)arg1)->getMinimumNeutrinoEnergy(arg2);
          }
          SWIG_PYTHON_THREAD_END_ALLOW;
        }
      } catch (Swig::DirectorException &e) {
        SWIG_exception(SWIG_RuntimeError, e.getMessage());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      } catch (const char *e) {
        SWIG_exception(SWIG_RuntimeError, e);
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoField_getMaximumNeutrinoEnergy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoField *arg1 = (nupropa::NeutrinoField *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoField_getMaximumNeutrinoEnergy" "', argument " "1"" of type '" "nupropa::NeutrinoField const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoField * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoField_getMaximumNeutrinoEnergy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    {
      try {
        {
          SWIG_PYTHON_THREAD_BEGIN_ALLOW;
          if (upcall) {
            Swig::DirectorPureVirtualException::raise("nupropa::NeutrinoField::getMaximumNeutrinoEnergy");
          } else {
            result = (double)((nupropa::NeutrinoField const *)arg1)->getMaximumNeutrinoEnergy(arg2);
          }
          SWIG_PYTHON_THREAD_END_ALLOW;
        }
      } catch (Swig::DirectorException &e) {
        SWIG_exception(SWIG_RuntimeError, e.getMessage());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      } catch (const char *e) {
        SWIG_exception(SWIG_RuntimeError, e);
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoField_getFieldName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoField *arg1 = (nupropa::NeutrinoField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  std::string result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoField_getFieldName", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoField_getFieldName" "', argument " "1"" of type '" "nupropa::NeutrinoField const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoField * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    {
      try {
        {
          SWIG_PYTHON_THREAD_BEGIN_ALLOW;
          if (upcall) {
            result = ((nupropa::NeutrinoField const *)arg1)->nupropa::NeutrinoField::getFieldName();
          } else {
            result = ((nupropa::NeutrinoField const *)arg1)->getFieldName();
          }
          SWIG_PYTHON_THREAD_END_ALLOW;
        }
      } catch (Swig::DirectorException &e) {
        SWIG_exception(SWIG_RuntimeError, e.getMessage());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      } catch (const char *e) {
        SWIG_exception(SWIG_RuntimeError, e);
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoField_getRedshiftScaling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoField *arg1 = (nupropa::NeutrinoField *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoField_getRedshiftScaling" "', argument " "1"" of type '" "nupropa::NeutrinoField const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoField * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoField_getRedshiftScaling" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    {
      try {
        {
          SWIG_PYTHON_THREAD_BEGIN_ALLOW;
          if (upcall) {
            result = (double)((nupropa::NeutrinoField const *)arg1)->nupropa::NeutrinoField::getRedshiftScaling(arg2);
          } else {
            result = (double)((nupropa::NeutrinoField const *)arg1)->getRedshiftScaling(arg2);
          }
          SWIG_PYTHON_THREAD_END_ALLOW;
        }
      } catch (Swig::DirectorException &e) {
        SWIG_exception(SWIG_RuntimeError, e.getMessage());
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      } catch (const char *e) {
        SWIG_exception(SWIG_RuntimeError, e);
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoField_hasRedshiftDependence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoField *arg1 = (nupropa::NeutrinoField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoField_hasRedshiftDependence", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoField_hasRedshiftDependence" "', argument " "1"" of type '" "nupropa::NeutrinoField const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoField * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((nupropa::NeutrinoField const *)arg1)->hasRedshiftDependence();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoField_setFieldName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoField *arg1 = (nupropa::NeutrinoField *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoField_setFieldName" "', argument " "1"" of type '" "nupropa::NeutrinoField *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoField * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NeutrinoField_setFieldName" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setFieldName(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoField_getMass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoField *arg1 = (nupropa::NeutrinoField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoField_getMass", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoField_getMass" "', argument " "1"" of type '" "nupropa::NeutrinoField const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoField * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)((nupropa::NeutrinoField const *)arg1)->getMass();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoField_fieldName_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoField *arg1 = (nupropa::NeutrinoField *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  SwigDirector_NeutrinoField *darg = 0;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoField_fieldName_set" "', argument " "1"" of type '" "nupropa::NeutrinoField *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoField * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoField_fieldName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeutrinoField_fieldName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  darg = dynamic_cast<SwigDirector_NeutrinoField *>(arg1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) darg->fieldName = *arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoField_fieldName_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoField *arg1 = (nupropa::NeutrinoField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigDirector_NeutrinoField *darg = 0;
  std::string *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoField_fieldName_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoField_fieldName_get" "', argument " "1"" of type '" "nupropa::NeutrinoField *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoField * >(argp1);
  darg = dynamic_cast<SwigDirector_NeutrinoField *>(arg1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::string *) & (darg->fieldName);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoField_isRedshiftDependent_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoField *arg1 = (nupropa::NeutrinoField *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigDirector_NeutrinoField *darg = 0;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoField_isRedshiftDependent_set" "', argument " "1"" of type '" "nupropa::NeutrinoField *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoField * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoField_isRedshiftDependent_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  darg = dynamic_cast<SwigDirector_NeutrinoField *>(arg1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) darg->isRedshiftDependent = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoField_isRedshiftDependent_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoField *arg1 = (nupropa::NeutrinoField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigDirector_NeutrinoField *darg = 0;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoField_isRedshiftDependent_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoField_isRedshiftDependent_get" "', argument " "1"" of type '" "nupropa::NeutrinoField *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoField * >(argp1);
  darg = dynamic_cast<SwigDirector_NeutrinoField *>(arg1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool) (darg->isRedshiftDependent);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoField_mass_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoField *arg1 = (nupropa::NeutrinoField *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigDirector_NeutrinoField *darg = 0;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoField_mass_set" "', argument " "1"" of type '" "nupropa::NeutrinoField *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoField * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoField_mass_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  darg = dynamic_cast<SwigDirector_NeutrinoField *>(arg1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) darg->mass = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoField_mass_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoField *arg1 = (nupropa::NeutrinoField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigDirector_NeutrinoField *darg = 0;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoField_mass_get", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoField_mass_get" "', argument " "1"" of type '" "nupropa::NeutrinoField *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoField * >(argp1);
  darg = dynamic_cast<SwigDirector_NeutrinoField *>(arg1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double) (darg->mass);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NeutrinoField(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoField *arg1 = (nupropa::NeutrinoField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_NeutrinoField", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoField, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NeutrinoField" "', argument " "1"" of type '" "nupropa::NeutrinoField *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoField * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        arg1->removeReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_NeutrinoField(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoField *arg1 = (nupropa::NeutrinoField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_nupropa__NeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_NeutrinoField" "', argument " "1"" of type '" "nupropa::NeutrinoField *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoField * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_NeutrinoField) /* defines _wrap_delete_NeutrinoField_destructor_closure */

SWIGINTERN int _wrap_new_BlackbodyNeutrinoField(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  double arg2 ;
  double arg3 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  nupropa::BlackbodyNeutrinoField *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_BlackbodyNeutrinoField")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_BlackbodyNeutrinoField", 3, 3, swig_obj)) SWIG_fail;
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BlackbodyNeutrinoField" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BlackbodyNeutrinoField" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BlackbodyNeutrinoField" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::BlackbodyNeutrinoField *)new nupropa::BlackbodyNeutrinoField(arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__BlackbodyNeutrinoField, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_BlackbodyNeutrinoField_getNeutrinoDensity__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nupropa::BlackbodyNeutrinoField *arg1 = (nupropa::BlackbodyNeutrinoField *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__BlackbodyNeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlackbodyNeutrinoField_getNeutrinoDensity" "', argument " "1"" of type '" "nupropa::BlackbodyNeutrinoField const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::BlackbodyNeutrinoField * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlackbodyNeutrinoField_getNeutrinoDensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlackbodyNeutrinoField_getNeutrinoDensity" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)((nupropa::BlackbodyNeutrinoField const *)arg1)->getNeutrinoDensity(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlackbodyNeutrinoField_getNeutrinoDensity__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nupropa::BlackbodyNeutrinoField *arg1 = (nupropa::BlackbodyNeutrinoField *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__BlackbodyNeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlackbodyNeutrinoField_getNeutrinoDensity" "', argument " "1"" of type '" "nupropa::BlackbodyNeutrinoField const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::BlackbodyNeutrinoField * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlackbodyNeutrinoField_getNeutrinoDensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)((nupropa::BlackbodyNeutrinoField const *)arg1)->getNeutrinoDensity(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlackbodyNeutrinoField_getNeutrinoDensity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "BlackbodyNeutrinoField_getNeutrinoDensity", 0, 3, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_nupropa__BlackbodyNeutrinoField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BlackbodyNeutrinoField_getNeutrinoDensity__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_nupropa__BlackbodyNeutrinoField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BlackbodyNeutrinoField_getNeutrinoDensity__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BlackbodyNeutrinoField_getNeutrinoDensity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nupropa::BlackbodyNeutrinoField::getNeutrinoDensity(double,double) const\n"
    "    nupropa::BlackbodyNeutrinoField::getNeutrinoDensity(double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlackbodyNeutrinoField_getMinimumNeutrinoEnergy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::BlackbodyNeutrinoField *arg1 = (nupropa::BlackbodyNeutrinoField *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__BlackbodyNeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlackbodyNeutrinoField_getMinimumNeutrinoEnergy" "', argument " "1"" of type '" "nupropa::BlackbodyNeutrinoField const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::BlackbodyNeutrinoField * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlackbodyNeutrinoField_getMinimumNeutrinoEnergy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)((nupropa::BlackbodyNeutrinoField const *)arg1)->getMinimumNeutrinoEnergy(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlackbodyNeutrinoField_getMaximumNeutrinoEnergy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::BlackbodyNeutrinoField *arg1 = (nupropa::BlackbodyNeutrinoField *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__BlackbodyNeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlackbodyNeutrinoField_getMaximumNeutrinoEnergy" "', argument " "1"" of type '" "nupropa::BlackbodyNeutrinoField const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::BlackbodyNeutrinoField * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlackbodyNeutrinoField_getMaximumNeutrinoEnergy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)((nupropa::BlackbodyNeutrinoField const *)arg1)->getMaximumNeutrinoEnergy(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlackbodyNeutrinoField_setQuantile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::BlackbodyNeutrinoField *arg1 = (nupropa::BlackbodyNeutrinoField *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__BlackbodyNeutrinoField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlackbodyNeutrinoField_setQuantile" "', argument " "1"" of type '" "nupropa::BlackbodyNeutrinoField *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::BlackbodyNeutrinoField * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlackbodyNeutrinoField_setQuantile" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setQuantile(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BlackbodyNeutrinoField(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::BlackbodyNeutrinoField *arg1 = (nupropa::BlackbodyNeutrinoField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_BlackbodyNeutrinoField", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__BlackbodyNeutrinoField, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BlackbodyNeutrinoField" "', argument " "1"" of type '" "nupropa::BlackbodyNeutrinoField *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::BlackbodyNeutrinoField * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        arg1->removeReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_BlackbodyNeutrinoField) /* defines _wrap_delete_BlackbodyNeutrinoField_destructor_closure */

SWIGINTERN int _wrap_new_CnuBm1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  nupropa::CnuBm1 *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_CnuBm1")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_CnuBm1", 0, 0, 0)) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::CnuBm1 *)new nupropa::CnuBm1();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__CnuBm1, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_CnuBm1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::CnuBm1 *arg1 = (nupropa::CnuBm1 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_CnuBm1", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__CnuBm1, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CnuBm1" "', argument " "1"" of type '" "nupropa::CnuBm1 *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::CnuBm1 * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        arg1->removeReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CnuBm1) /* defines _wrap_delete_CnuBm1_destructor_closure */

SWIGINTERN int _wrap_new_CnuBm2(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  nupropa::CnuBm2 *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_CnuBm2")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_CnuBm2", 0, 0, 0)) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::CnuBm2 *)new nupropa::CnuBm2();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__CnuBm2, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_CnuBm2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::CnuBm2 *arg1 = (nupropa::CnuBm2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_CnuBm2", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__CnuBm2, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CnuBm2" "', argument " "1"" of type '" "nupropa::CnuBm2 *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::CnuBm2 * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        arg1->removeReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CnuBm2) /* defines _wrap_delete_CnuBm2_destructor_closure */

SWIGINTERN int _wrap_new_CnuBm3(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  nupropa::CnuBm3 *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_CnuBm3")) SWIG_fail;
  if (!SWIG_Python_UnpackTuple(args, "new_CnuBm3", 0, 0, 0)) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::CnuBm3 *)new nupropa::CnuBm3();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__CnuBm3, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_CnuBm3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::CnuBm3 *arg1 = (nupropa::CnuBm3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_CnuBm3", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__CnuBm3, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CnuBm3" "', argument " "1"" of type '" "nupropa::CnuBm3 *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::CnuBm3 * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        arg1->removeReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CnuBm3) /* defines _wrap_delete_CnuBm3_destructor_closure */

SWIGINTERN int _wrap_new_RelativisticInteraction__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  nupropa::RelativisticInteraction *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  arg1 = self;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        if ( self->ob_type != ((SwigPyClientData *)(SWIGTYPE_p_nupropa__RelativisticInteraction)->clientdata)->pytype ) {
          /* subclassed */
          result = (nupropa::RelativisticInteraction *)new SwigDirector_RelativisticInteraction(arg1); 
        } else {
          result = (nupropa::RelativisticInteraction *)new nupropa::RelativisticInteraction(); 
        }
        
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__RelativisticInteraction, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_RelativisticInteraction__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  nupropa::RelativisticInteraction *result = 0 ;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  arg1 = self;
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RelativisticInteraction" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RelativisticInteraction" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RelativisticInteraction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RelativisticInteraction" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        if ( self->ob_type != ((SwigPyClientData *)(SWIGTYPE_p_nupropa__RelativisticInteraction)->clientdata)->pytype ) {
          /* subclassed */
          result = (nupropa::RelativisticInteraction *)new SwigDirector_RelativisticInteraction(arg1,arg2,arg3,arg4,arg5); 
        } else {
          result = (nupropa::RelativisticInteraction *)new nupropa::RelativisticInteraction(arg2,arg3,arg4,arg5); 
        }
        
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__RelativisticInteraction, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_RelativisticInteraction__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  nupropa::RelativisticInteraction *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  arg1 = self;
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RelativisticInteraction" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RelativisticInteraction" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RelativisticInteraction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        if ( self->ob_type != ((SwigPyClientData *)(SWIGTYPE_p_nupropa__RelativisticInteraction)->clientdata)->pytype ) {
          /* subclassed */
          result = (nupropa::RelativisticInteraction *)new SwigDirector_RelativisticInteraction(arg1,arg2,arg3,arg4); 
        } else {
          result = (nupropa::RelativisticInteraction *)new nupropa::RelativisticInteraction(arg2,arg3,arg4); 
        }
        
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__RelativisticInteraction, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_RelativisticInteraction(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_RelativisticInteraction")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_RelativisticInteraction", 0, 5, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      return _wrap_new_RelativisticInteraction__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 4) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_RelativisticInteraction__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_RelativisticInteraction__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_RelativisticInteraction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nupropa::RelativisticInteraction::RelativisticInteraction()\n"
    "    nupropa::RelativisticInteraction::RelativisticInteraction(double,double,double,double)\n"
    "    nupropa::RelativisticInteraction::RelativisticInteraction(PyObject *,double,double,double)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_RelativisticInteraction_setBetaCom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::RelativisticInteraction *arg1 = (nupropa::RelativisticInteraction *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteraction_setBetaCom", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__RelativisticInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteraction_setBetaCom" "', argument " "1"" of type '" "nupropa::RelativisticInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::RelativisticInteraction * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelativisticInteraction_setBetaCom" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RelativisticInteraction_setBetaCom" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RelativisticInteraction_setBetaCom" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RelativisticInteraction_setBetaCom" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setBetaCom(arg2,arg3,arg4,arg5);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteraction_setBetaPhotonCom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::RelativisticInteraction *arg1 = (nupropa::RelativisticInteraction *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteraction_setBetaPhotonCom", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__RelativisticInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteraction_setBetaPhotonCom" "', argument " "1"" of type '" "nupropa::RelativisticInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::RelativisticInteraction * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelativisticInteraction_setBetaPhotonCom" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RelativisticInteraction_setBetaPhotonCom" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RelativisticInteraction_setBetaPhotonCom" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setBetaPhotonCom(arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteraction_setGammaCom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::RelativisticInteraction *arg1 = (nupropa::RelativisticInteraction *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteraction_setGammaCom", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__RelativisticInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteraction_setGammaCom" "', argument " "1"" of type '" "nupropa::RelativisticInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::RelativisticInteraction * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelativisticInteraction_setGammaCom" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RelativisticInteraction_setGammaCom" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setGammaCom(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteraction_getBetaCom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::RelativisticInteraction *arg1 = (nupropa::RelativisticInteraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteraction_getBetaCom", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__RelativisticInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteraction_getBetaCom" "', argument " "1"" of type '" "nupropa::RelativisticInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::RelativisticInteraction * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(arg1)->getBetaCom();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteraction_getGammaCom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::RelativisticInteraction *arg1 = (nupropa::RelativisticInteraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteraction_getGammaCom", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__RelativisticInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteraction_getGammaCom" "', argument " "1"" of type '" "nupropa::RelativisticInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::RelativisticInteraction * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(arg1)->getGammaCom();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteraction_computeProductsMomentumCom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::RelativisticInteraction *arg1 = (nupropa::RelativisticInteraction *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteraction_computeProductsMomentumCom", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__RelativisticInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteraction_computeProductsMomentumCom" "', argument " "1"" of type '" "nupropa::RelativisticInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::RelativisticInteraction * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelativisticInteraction_computeProductsMomentumCom" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RelativisticInteraction_computeProductsMomentumCom" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RelativisticInteraction_computeProductsMomentumCom" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(arg1)->computeProductsMomentumCom(arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RelativisticInteraction_getProductEnergiesLab(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::RelativisticInteraction *arg1 = (nupropa::RelativisticInteraction *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "RelativisticInteraction_getProductEnergiesLab", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__RelativisticInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RelativisticInteraction_getProductEnergiesLab" "', argument " "1"" of type '" "nupropa::RelativisticInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::RelativisticInteraction * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RelativisticInteraction_getProductEnergiesLab" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RelativisticInteraction_getProductEnergiesLab" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RelativisticInteraction_getProductEnergiesLab" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RelativisticInteraction_getProductEnergiesLab" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getProductEnergiesLab(arg2,arg3,arg4,arg5);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< double,std::allocator< double > >(result)), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RelativisticInteraction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::RelativisticInteraction *arg1 = (nupropa::RelativisticInteraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_RelativisticInteraction", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__RelativisticInteraction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RelativisticInteraction" "', argument " "1"" of type '" "nupropa::RelativisticInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::RelativisticInteraction * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        arg1->removeReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_RelativisticInteraction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::RelativisticInteraction *arg1 = (nupropa::RelativisticInteraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_nupropa__RelativisticInteraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_RelativisticInteraction" "', argument " "1"" of type '" "nupropa::RelativisticInteraction *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::RelativisticInteraction * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_RelativisticInteraction) /* defines _wrap_delete_RelativisticInteraction_destructor_closure */

SWIGINTERN int _wrap_new_ParticleData__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  nupropa::ParticleData *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::ParticleData *)new nupropa::ParticleData();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__ParticleData, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_ParticleData__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::unordered_map< int,double > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  nupropa::ParticleData *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__unordered_mapT_int_double_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ParticleData" "', argument " "1"" of type '" "std::unordered_map< int,double >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ParticleData" "', argument " "1"" of type '" "std::unordered_map< int,double >""'");
    } else {
      std::unordered_map< int,double > * temp = reinterpret_cast< std::unordered_map< int,double > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::ParticleData *)new nupropa::ParticleData(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__ParticleData, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_ParticleData(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ParticleData")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ParticleData", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_ParticleData__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__unordered_mapT_int_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ParticleData__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ParticleData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nupropa::ParticleData::ParticleData()\n"
    "    nupropa::ParticleData::ParticleData(std::unordered_map< int,double >)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_ParticleData_setParticleIDmass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ParticleData *arg1 = (nupropa::ParticleData *) 0 ;
  std::unordered_map< int,double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ParticleData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleData_setParticleIDmass" "', argument " "1"" of type '" "nupropa::ParticleData *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ParticleData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__unordered_mapT_int_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleData_setParticleIDmass" "', argument " "2"" of type '" "std::unordered_map< int,double >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleData_setParticleIDmass" "', argument " "2"" of type '" "std::unordered_map< int,double >""'");
    } else {
      std::unordered_map< int,double > * temp = reinterpret_cast< std::unordered_map< int,double > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setParticleIDmass(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleData_getParticleMass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ParticleData *arg1 = (nupropa::ParticleData *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ParticleData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleData_getParticleMass" "', argument " "1"" of type '" "nupropa::ParticleData *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ParticleData * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleData_getParticleMass" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(arg1)->getParticleMass(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleData_addNewParticle(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ParticleData *arg1 = (nupropa::ParticleData *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ParticleData_addNewParticle", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ParticleData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleData_addNewParticle" "', argument " "1"" of type '" "nupropa::ParticleData *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ParticleData * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleData_addNewParticle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ParticleData_addNewParticle" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->addNewParticle(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::ParticleData *arg1 = (nupropa::ParticleData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_ParticleData", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__ParticleData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ParticleData" "', argument " "1"" of type '" "nupropa::ParticleData *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::ParticleData * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ParticleData) /* defines _wrap_delete_ParticleData_destructor_closure */

SWIGINTERN int _wrap_new_NeutrinoMixing__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  nupropa::NeutrinoMixing *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  arg1 = self;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        if ( self->ob_type != ((SwigPyClientData *)(SWIGTYPE_p_nupropa__NeutrinoMixing)->clientdata)->pytype ) {
          /* subclassed */
          result = (nupropa::NeutrinoMixing *)new SwigDirector_NeutrinoMixing(arg1); 
        } else {
          result = (nupropa::NeutrinoMixing *)new nupropa::NeutrinoMixing(); 
        }
        
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoMixing, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_NeutrinoMixing__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  nupropa::NeutrinoMixing *result = 0 ;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  arg1 = self;
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NeutrinoMixing" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NeutrinoMixing" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_NeutrinoMixing" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_NeutrinoMixing" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        if ( self->ob_type != ((SwigPyClientData *)(SWIGTYPE_p_nupropa__NeutrinoMixing)->clientdata)->pytype ) {
          /* subclassed */
          result = (nupropa::NeutrinoMixing *)new SwigDirector_NeutrinoMixing(arg1,arg2,arg3,arg4,arg5); 
        } else {
          result = (nupropa::NeutrinoMixing *)new nupropa::NeutrinoMixing(arg2,arg3,arg4,arg5); 
        }
        
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoMixing, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_NeutrinoMixing(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_NeutrinoMixing")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_NeutrinoMixing", 0, 5, argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      return _wrap_new_NeutrinoMixing__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 5) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_NeutrinoMixing__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_NeutrinoMixing'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nupropa::NeutrinoMixing::NeutrinoMixing()\n"
    "    nupropa::NeutrinoMixing::NeutrinoMixing(PyObject *,double,double,double,double)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixing_setTheta(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoMixing *arg1 = (nupropa::NeutrinoMixing *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixing_setTheta", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixing_setTheta" "', argument " "1"" of type '" "nupropa::NeutrinoMixing *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoMixing * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixing_setTheta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NeutrinoMixing_setTheta" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NeutrinoMixing_setTheta" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setTheta(arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixing_setDelta(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoMixing *arg1 = (nupropa::NeutrinoMixing *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixing_setDelta" "', argument " "1"" of type '" "nupropa::NeutrinoMixing *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoMixing * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixing_setDelta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setDelta(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixing_setMasses(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoMixing *arg1 = (nupropa::NeutrinoMixing *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixing_setMasses", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixing_setMasses" "', argument " "1"" of type '" "nupropa::NeutrinoMixing *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoMixing * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixing_setMasses" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NeutrinoMixing_setMasses" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NeutrinoMixing_setMasses" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setMasses(arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixing_buildUpmnsMatrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoMixing *arg1 = (nupropa::NeutrinoMixing *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixing_buildUpmnsMatrix", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixing_buildUpmnsMatrix" "', argument " "1"" of type '" "nupropa::NeutrinoMixing *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoMixing * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->buildUpmnsMatrix();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixing_getUpmnsMatrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoMixing *arg1 = (nupropa::NeutrinoMixing *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::Matrix3cd result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixing_getUpmnsMatrix", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixing_getUpmnsMatrix" "', argument " "1"" of type '" "nupropa::NeutrinoMixing *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoMixing * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getUpmnsMatrix();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new Eigen::Matrix3cd(result)), SWIGTYPE_p_Eigen__Matrix3cd, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixing_getFlavourMassProbabilities(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoMixing *arg1 = (nupropa::NeutrinoMixing *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::Matrix3cd result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixing_getFlavourMassProbabilities", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixing_getFlavourMassProbabilities" "', argument " "1"" of type '" "nupropa::NeutrinoMixing *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoMixing * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getFlavourMassProbabilities();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj((new Eigen::Matrix3cd(result)), SWIGTYPE_p_Eigen__Matrix3cd, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixing_IdToFlavourIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoMixing *arg1 = (nupropa::NeutrinoMixing *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixing_IdToFlavourIndex" "', argument " "1"" of type '" "nupropa::NeutrinoMixing *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoMixing * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixing_IdToFlavourIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)(arg1)->IdToFlavourIndex(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixing_flavourIndexToId(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoMixing *arg1 = (nupropa::NeutrinoMixing *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixing_flavourIndexToId" "', argument " "1"" of type '" "nupropa::NeutrinoMixing *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoMixing * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixing_flavourIndexToId" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)(arg1)->flavourIndexToId(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixing_massIndexToMass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoMixing *arg1 = (nupropa::NeutrinoMixing *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixing_massIndexToMass" "', argument " "1"" of type '" "nupropa::NeutrinoMixing *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoMixing * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixing_massIndexToMass" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(arg1)->massIndexToMass(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixing_massToIndexMass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoMixing *arg1 = (nupropa::NeutrinoMixing *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixing_massToIndexMass" "', argument " "1"" of type '" "nupropa::NeutrinoMixing *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoMixing * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixing_massToIndexMass" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)(arg1)->massToIndexMass(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixing_fromFlavourToMass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoMixing *arg1 = (nupropa::NeutrinoMixing *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixing_fromFlavourToMass" "', argument " "1"" of type '" "nupropa::NeutrinoMixing *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoMixing * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixing_fromFlavourToMass" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(arg1)->fromFlavourToMass(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixing_fromMassToFlavour(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoMixing *arg1 = (nupropa::NeutrinoMixing *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixing_fromMassToFlavour" "', argument " "1"" of type '" "nupropa::NeutrinoMixing *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoMixing * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixing_fromMassToFlavour" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)(arg1)->fromMassToFlavour(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixing_precomputeOscillationTerms(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoMixing *arg1 = (nupropa::NeutrinoMixing *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixing_precomputeOscillationTerms", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixing_precomputeOscillationTerms" "', argument " "1"" of type '" "nupropa::NeutrinoMixing *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoMixing * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->precomputeOscillationTerms();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoMixing_oscillateFlavour(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoMixing *arg1 = (nupropa::NeutrinoMixing *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NeutrinoMixing_oscillateFlavour", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoMixing_oscillateFlavour" "', argument " "1"" of type '" "nupropa::NeutrinoMixing *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoMixing * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeutrinoMixing_oscillateFlavour" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NeutrinoMixing_oscillateFlavour" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NeutrinoMixing_oscillateFlavour" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (int)(arg1)->oscillateFlavour(arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NeutrinoMixing(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoMixing *arg1 = (nupropa::NeutrinoMixing *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_NeutrinoMixing", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoMixing, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NeutrinoMixing" "', argument " "1"" of type '" "nupropa::NeutrinoMixing *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoMixing * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        arg1->removeReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_NeutrinoMixing(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoMixing *arg1 = (nupropa::NeutrinoMixing *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_nupropa__NeutrinoMixing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_NeutrinoMixing" "', argument " "1"" of type '" "nupropa::NeutrinoMixing *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoMixing * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_NeutrinoMixing) /* defines _wrap_delete_NeutrinoMixing_destructor_closure */

SWIGINTERN int _wrap_new_NeutrinoOscillation__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoOscillation *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::NeutrinoOscillation *)new nupropa::NeutrinoOscillation();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoOscillation, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_NeutrinoOscillation__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  nupropa::NeutrinoOscillation *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeutrinoOscillation" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeutrinoOscillation" "', argument " "1"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing >""'");
    } else {
      crpropa::ref_ptr< nupropa::NeutrinoMixing > * temp = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (nupropa::NeutrinoOscillation *)new nupropa::NeutrinoOscillation(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nupropa__NeutrinoOscillation, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_NeutrinoOscillation(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_NeutrinoOscillation")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_NeutrinoOscillation", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_NeutrinoOscillation__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, SWIG_POINTER_NO_NULL | SWIG_POINTER_IMPLICIT_CONV);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NeutrinoOscillation__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_NeutrinoOscillation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nupropa::NeutrinoOscillation::NeutrinoOscillation()\n"
    "    nupropa::NeutrinoOscillation::NeutrinoOscillation(crpropa::ref_ptr< nupropa::NeutrinoMixing >)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_NeutrinoOscillation_setNeutrinoMixing(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoOscillation *arg1 = (nupropa::NeutrinoOscillation *) 0 ;
  crpropa::ref_ptr< nupropa::NeutrinoMixing > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoOscillation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoOscillation_setNeutrinoMixing" "', argument " "1"" of type '" "nupropa::NeutrinoOscillation *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoOscillation * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t,  0  | SWIG_POINTER_IMPLICIT_CONV);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoOscillation_setNeutrinoMixing" "', argument " "2"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeutrinoOscillation_setNeutrinoMixing" "', argument " "2"" of type '" "crpropa::ref_ptr< nupropa::NeutrinoMixing >""'");
    } else {
      crpropa::ref_ptr< nupropa::NeutrinoMixing > * temp = reinterpret_cast< crpropa::ref_ptr< nupropa::NeutrinoMixing > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setNeutrinoMixing(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeutrinoOscillation_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoOscillation *arg1 = (nupropa::NeutrinoOscillation *) 0 ;
  crpropa::Candidate *arg2 = (crpropa::Candidate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoOscillation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeutrinoOscillation_process" "', argument " "1"" of type '" "nupropa::NeutrinoOscillation const *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoOscillation * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2,SWIGTYPE_p_crpropa__Candidate, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeutrinoOscillation_process" "', argument " "2"" of type '" "crpropa::Candidate *""'"); 
  }
  arg2 = reinterpret_cast< crpropa::Candidate * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        ((nupropa::NeutrinoOscillation const *)arg1)->process(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NeutrinoOscillation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nupropa::NeutrinoOscillation *arg1 = (nupropa::NeutrinoOscillation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_NeutrinoOscillation", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_nupropa__NeutrinoOscillation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NeutrinoOscillation" "', argument " "1"" of type '" "nupropa::NeutrinoOscillation *""'"); 
  }
  arg1 = reinterpret_cast< nupropa::NeutrinoOscillation * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        arg1->removeReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_NeutrinoOscillation) /* defines _wrap_delete_NeutrinoOscillation_destructor_closure */

static PyMethodDef SwigMethods[] = {
	 { "ios_base_boolalpha_get", _wrap_ios_base_boolalpha_get, METH_VARARGS, NULL},
	 { "ios_base_dec_get", _wrap_ios_base_dec_get, METH_VARARGS, NULL},
	 { "ios_base_fixed_get", _wrap_ios_base_fixed_get, METH_VARARGS, NULL},
	 { "ios_base_hex_get", _wrap_ios_base_hex_get, METH_VARARGS, NULL},
	 { "ios_base_internal_get", _wrap_ios_base_internal_get, METH_VARARGS, NULL},
	 { "ios_base_left_get", _wrap_ios_base_left_get, METH_VARARGS, NULL},
	 { "ios_base_oct_get", _wrap_ios_base_oct_get, METH_VARARGS, NULL},
	 { "ios_base_right_get", _wrap_ios_base_right_get, METH_VARARGS, NULL},
	 { "ios_base_scientific_get", _wrap_ios_base_scientific_get, METH_VARARGS, NULL},
	 { "ios_base_showbase_get", _wrap_ios_base_showbase_get, METH_VARARGS, NULL},
	 { "ios_base_showpoint_get", _wrap_ios_base_showpoint_get, METH_VARARGS, NULL},
	 { "ios_base_showpos_get", _wrap_ios_base_showpos_get, METH_VARARGS, NULL},
	 { "ios_base_skipws_get", _wrap_ios_base_skipws_get, METH_VARARGS, NULL},
	 { "ios_base_unitbuf_get", _wrap_ios_base_unitbuf_get, METH_VARARGS, NULL},
	 { "ios_base_uppercase_get", _wrap_ios_base_uppercase_get, METH_VARARGS, NULL},
	 { "ios_base_adjustfield_get", _wrap_ios_base_adjustfield_get, METH_VARARGS, NULL},
	 { "ios_base_basefield_get", _wrap_ios_base_basefield_get, METH_VARARGS, NULL},
	 { "ios_base_floatfield_get", _wrap_ios_base_floatfield_get, METH_VARARGS, NULL},
	 { "ios_base_badbit_get", _wrap_ios_base_badbit_get, METH_VARARGS, NULL},
	 { "ios_base_eofbit_get", _wrap_ios_base_eofbit_get, METH_VARARGS, NULL},
	 { "ios_base_failbit_get", _wrap_ios_base_failbit_get, METH_VARARGS, NULL},
	 { "ios_base_goodbit_get", _wrap_ios_base_goodbit_get, METH_VARARGS, NULL},
	 { "ios_base_app_get", _wrap_ios_base_app_get, METH_VARARGS, NULL},
	 { "ios_base_ate_get", _wrap_ios_base_ate_get, METH_VARARGS, NULL},
	 { "ios_base_binary_get", _wrap_ios_base_binary_get, METH_VARARGS, NULL},
	 { "ios_base_ios_base_in_get", _wrap_ios_base_ios_base_in_get, METH_VARARGS, NULL},
	 { "ios_base_out_get", _wrap_ios_base_out_get, METH_VARARGS, NULL},
	 { "ios_base_trunc_get", _wrap_ios_base_trunc_get, METH_VARARGS, NULL},
	 { "ios_base_beg_get", _wrap_ios_base_beg_get, METH_VARARGS, NULL},
	 { "ios_base_cur_get", _wrap_ios_base_cur_get, METH_VARARGS, NULL},
	 { "ios_base_end_get", _wrap_ios_base_end_get, METH_VARARGS, NULL},
	 { "string_npos_get", _wrap_string_npos_get, METH_VARARGS, NULL},
	 { "endl", _wrap_endl, METH_O, "swig_ptr: endl_cb_ptr"},
	 { "ends", _wrap_ends, METH_O, "swig_ptr: ends_cb_ptr"},
	 { "flush", _wrap_flush, METH_O, "swig_ptr: flush_cb_ptr"},
	 { "disown_Channels", _wrap_disown_Channels, METH_O, NULL},
	 { "disown_ChannelsBundle", _wrap_disown_ChannelsBundle, METH_O, NULL},
	 { "disown_NeutrinoField", _wrap_disown_NeutrinoField, METH_O, NULL},
	 { "disown_RelativisticInteraction", _wrap_disown_RelativisticInteraction, METH_O, NULL},
	 { "disown_NeutrinoMixing", _wrap_disown_NeutrinoMixing, METH_O, NULL},
	 { NULL, NULL, 0, NULL }
};

static SwigPyGetSet SwigPyIterator___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__swig__SwigPyIterator_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &SwigPyIterator___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__swig__SwigPyIterator_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  switch (op) {
    case Py_EQ : result = _wrap_SwigPyIterator___eq__(self, other); break;
    case Py_NE : result = _wrap_SwigPyIterator___ne__(self, other); break;
    default : break;
  }
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__swig__SwigPyIterator_methods[] = {
  { "value", _wrap_SwigPyIterator_value, METH_NOARGS, "" },
  { "incr", _wrap_SwigPyIterator_incr, METH_VARARGS, "" },
  { "decr", _wrap_SwigPyIterator_decr, METH_VARARGS, "" },
  { "distance", _wrap_SwigPyIterator_distance, METH_O, "" },
  { "equal", _wrap_SwigPyIterator_equal, METH_O, "" },
  { "copy", _wrap_SwigPyIterator_copy, METH_NOARGS, "" },
  { "next", _wrap_SwigPyIterator_next, METH_NOARGS, "" },
  { "__next__", _wrap_SwigPyIterator___next__, METH_NOARGS, "" },
  { "previous", _wrap_SwigPyIterator_previous, METH_NOARGS, "" },
  { "advance", _wrap_SwigPyIterator_advance, METH_O, "" },
  { "__eq__", _wrap_SwigPyIterator___eq__, METH_O, "" },
  { "__ne__", _wrap_SwigPyIterator___ne__, METH_O, "" },
  { "__iadd__", _wrap_SwigPyIterator___iadd__, METH_O, "" },
  { "__isub__", _wrap_SwigPyIterator___isub__, METH_O, "" },
  { "__add__", _wrap_SwigPyIterator___add__, METH_O, "" },
  { "__sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__swig__SwigPyIterator_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.SwigPyIterator",                 /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_SwigPyIterator_destructor_closure,               /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_number,          /* tp_as_number */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_sequence,        /* tp_as_sequence */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_mapping,         /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_buffer,          /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "swig::SwigPyIterator",                   /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__swig__SwigPyIterator_richcompare,              /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    &swig::make_output_iterator_builtin,      /* tp_iter */
    _wrap_SwigPyIterator___next___iternextfunc_closure,           /* tp_iternext */
    SwigPyBuiltin__swig__SwigPyIterator_methods,                  /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__swig__SwigPyIterator_getset,                   /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    SwigPyBuiltin_BadInit,                    /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    _wrap_SwigPyIterator___add__,             /* nb_add */
    _wrap_SwigPyIterator___sub___binaryfunc_closure,              /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    _wrap_SwigPyIterator___iadd__,            /* nb_inplace_add */
    _wrap_SwigPyIterator___isub__,            /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__swig__SwigPyIterator_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__swig__SwigPyIterator_type};

static SwigPyGetSet ios_base_scientific_getset = { _wrap_ios_base_scientific_get, 0 };
static PyGetSetDef ios_base_scientific_getset_def = { (char *)"scientific", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.scientific", &ios_base_scientific_getset };
static SwigPyGetSet ios_base_floatfield_getset = { _wrap_ios_base_floatfield_get, 0 };
static PyGetSetDef ios_base_floatfield_getset_def = { (char *)"floatfield", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.floatfield", &ios_base_floatfield_getset };
static SwigPyGetSet ios_base___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet ios_base_failbit_getset = { _wrap_ios_base_failbit_get, 0 };
static PyGetSetDef ios_base_failbit_getset_def = { (char *)"failbit", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.failbit", &ios_base_failbit_getset };
static SwigPyGetSet ios_base_hex_getset = { _wrap_ios_base_hex_get, 0 };
static PyGetSetDef ios_base_hex_getset_def = { (char *)"hex", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.hex", &ios_base_hex_getset };
static SwigPyGetSet ios_base_right_getset = { _wrap_ios_base_right_get, 0 };
static PyGetSetDef ios_base_right_getset_def = { (char *)"right", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.right", &ios_base_right_getset };
static SwigPyGetSet ios_base_basefield_getset = { _wrap_ios_base_basefield_get, 0 };
static PyGetSetDef ios_base_basefield_getset_def = { (char *)"basefield", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.basefield", &ios_base_basefield_getset };
static SwigPyGetSet ios_base_trunc_getset = { _wrap_ios_base_trunc_get, 0 };
static PyGetSetDef ios_base_trunc_getset_def = { (char *)"trunc", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.trunc", &ios_base_trunc_getset };
static SwigPyGetSet ios_base_end_getset = { _wrap_ios_base_end_get, 0 };
static PyGetSetDef ios_base_end_getset_def = { (char *)"end", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.end", &ios_base_end_getset };
static SwigPyGetSet ios_base_left_getset = { _wrap_ios_base_left_get, 0 };
static PyGetSetDef ios_base_left_getset_def = { (char *)"left", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.left", &ios_base_left_getset };
static SwigPyGetSet ios_base_showpoint_getset = { _wrap_ios_base_showpoint_get, 0 };
static PyGetSetDef ios_base_showpoint_getset_def = { (char *)"showpoint", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.showpoint", &ios_base_showpoint_getset };
static SwigPyGetSet ios_base_showpos_getset = { _wrap_ios_base_showpos_get, 0 };
static PyGetSetDef ios_base_showpos_getset_def = { (char *)"showpos", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.showpos", &ios_base_showpos_getset };
static SwigPyGetSet ios_base_boolalpha_getset = { _wrap_ios_base_boolalpha_get, 0 };
static PyGetSetDef ios_base_boolalpha_getset_def = { (char *)"boolalpha", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.boolalpha", &ios_base_boolalpha_getset };
static SwigPyGetSet ios_base_eofbit_getset = { _wrap_ios_base_eofbit_get, 0 };
static PyGetSetDef ios_base_eofbit_getset_def = { (char *)"eofbit", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.eofbit", &ios_base_eofbit_getset };
static SwigPyGetSet ios_base_out_getset = { _wrap_ios_base_out_get, 0 };
static PyGetSetDef ios_base_out_getset_def = { (char *)"out", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.out", &ios_base_out_getset };
static SwigPyGetSet ios_base_unitbuf_getset = { _wrap_ios_base_unitbuf_get, 0 };
static PyGetSetDef ios_base_unitbuf_getset_def = { (char *)"unitbuf", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.unitbuf", &ios_base_unitbuf_getset };
static SwigPyGetSet ios_base_oct_getset = { _wrap_ios_base_oct_get, 0 };
static PyGetSetDef ios_base_oct_getset_def = { (char *)"oct", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.oct", &ios_base_oct_getset };
static SwigPyGetSet ios_base_internal_getset = { _wrap_ios_base_internal_get, 0 };
static PyGetSetDef ios_base_internal_getset_def = { (char *)"internal", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.internal", &ios_base_internal_getset };
static SwigPyGetSet ios_base_binary_getset = { _wrap_ios_base_binary_get, 0 };
static PyGetSetDef ios_base_binary_getset_def = { (char *)"binary", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.binary", &ios_base_binary_getset };
static SwigPyGetSet ios_base_ios_base_in_getset = { _wrap_ios_base_ios_base_in_get, 0 };
static PyGetSetDef ios_base_ios_base_in_getset_def = { (char *)"ios_base_in", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.ios_base_in", &ios_base_ios_base_in_getset };
static SwigPyGetSet ios_base_skipws_getset = { _wrap_ios_base_skipws_get, 0 };
static PyGetSetDef ios_base_skipws_getset_def = { (char *)"skipws", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.skipws", &ios_base_skipws_getset };
static SwigPyGetSet ios_base_uppercase_getset = { _wrap_ios_base_uppercase_get, 0 };
static PyGetSetDef ios_base_uppercase_getset_def = { (char *)"uppercase", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.uppercase", &ios_base_uppercase_getset };
static SwigPyGetSet ios_base_cur_getset = { _wrap_ios_base_cur_get, 0 };
static PyGetSetDef ios_base_cur_getset_def = { (char *)"cur", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.cur", &ios_base_cur_getset };
static SwigPyGetSet ios_base_goodbit_getset = { _wrap_ios_base_goodbit_get, 0 };
static PyGetSetDef ios_base_goodbit_getset_def = { (char *)"goodbit", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.goodbit", &ios_base_goodbit_getset };
static SwigPyGetSet ios_base_app_getset = { _wrap_ios_base_app_get, 0 };
static PyGetSetDef ios_base_app_getset_def = { (char *)"app", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.app", &ios_base_app_getset };
static SwigPyGetSet ios_base_dec_getset = { _wrap_ios_base_dec_get, 0 };
static PyGetSetDef ios_base_dec_getset_def = { (char *)"dec", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.dec", &ios_base_dec_getset };
static SwigPyGetSet ios_base_adjustfield_getset = { _wrap_ios_base_adjustfield_get, 0 };
static PyGetSetDef ios_base_adjustfield_getset_def = { (char *)"adjustfield", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.adjustfield", &ios_base_adjustfield_getset };
static SwigPyGetSet ios_base_fixed_getset = { _wrap_ios_base_fixed_get, 0 };
static PyGetSetDef ios_base_fixed_getset_def = { (char *)"fixed", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.fixed", &ios_base_fixed_getset };
static SwigPyGetSet ios_base_ate_getset = { _wrap_ios_base_ate_get, 0 };
static PyGetSetDef ios_base_ate_getset_def = { (char *)"ate", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.ate", &ios_base_ate_getset };
static SwigPyGetSet ios_base_beg_getset = { _wrap_ios_base_beg_get, 0 };
static PyGetSetDef ios_base_beg_getset_def = { (char *)"beg", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.beg", &ios_base_beg_getset };
static SwigPyGetSet ios_base_showbase_getset = { _wrap_ios_base_showbase_get, 0 };
static PyGetSetDef ios_base_showbase_getset_def = { (char *)"showbase", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.showbase", &ios_base_showbase_getset };
static SwigPyGetSet ios_base_badbit_getset = { _wrap_ios_base_badbit_get, 0 };
static PyGetSetDef ios_base_badbit_getset_def = { (char *)"badbit", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::ios_base.badbit", &ios_base_badbit_getset };
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__ios_base_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &ios_base___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__ios_base_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__ios_base_methods[] = {
  { "register_callback", _wrap_ios_base_register_callback, METH_VARARGS, "" },
  { "flags", _wrap_ios_base_flags, METH_VARARGS, "" },
  { "setf", _wrap_ios_base_setf, METH_VARARGS, "" },
  { "unsetf", _wrap_ios_base_unsetf, METH_O, "" },
  { "precision", _wrap_ios_base_precision, METH_VARARGS, "" },
  { "width", _wrap_ios_base_width, METH_VARARGS, "" },
  { "sync_with_stdio", (PyCFunction)(void(*)(void))_wrap_ios_base_sync_with_stdio, METH_STATIC|METH_VARARGS, "" },
  { "imbue", _wrap_ios_base_imbue, METH_O, "" },
  { "getloc", _wrap_ios_base_getloc, METH_NOARGS, "" },
  { "xalloc", (PyCFunction)(void(*)(void))_wrap_ios_base_xalloc, METH_STATIC|METH_NOARGS, "" },
  { "iword", _wrap_ios_base_iword, METH_O, "" },
  { "pword", _wrap_ios_base_pword, METH_O, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__ios_base_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.ios_base",                       /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_ios_base_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__ios_base_type.as_number,                 /* tp_as_number */
    &SwigPyBuiltin__std__ios_base_type.as_sequence,               /* tp_as_sequence */
    &SwigPyBuiltin__std__ios_base_type.as_mapping,                /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__ios_base_type.as_buffer,                 /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::ios_base",                          /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__std__ios_base_richcompare, /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__ios_base_methods,     /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__ios_base_getset,      /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    SwigPyBuiltin_BadInit,                    /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__ios_base_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__ios_base_type};

static SwigPyGetSet ios___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__basic_iosT_char_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &ios___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__basic_iosT_char_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__basic_iosT_char_t_methods[] = {
  { "rdstate", _wrap_ios_rdstate, METH_NOARGS, "" },
  { "clear", _wrap_ios_clear, METH_VARARGS, "" },
  { "setstate", _wrap_ios_setstate, METH_O, "" },
  { "good", _wrap_ios_good, METH_NOARGS, "" },
  { "eof", _wrap_ios_eof, METH_NOARGS, "" },
  { "fail", _wrap_ios_fail, METH_NOARGS, "" },
  { "bad", _wrap_ios_bad, METH_NOARGS, "" },
  { "exceptions", _wrap_ios_exceptions, METH_VARARGS, "" },
  { "tie", _wrap_ios_tie, METH_VARARGS, "" },
  { "rdbuf", _wrap_ios_rdbuf, METH_VARARGS, "" },
  { "copyfmt", _wrap_ios_copyfmt, METH_O, "" },
  { "fill", _wrap_ios_fill, METH_VARARGS, "" },
  { "imbue", _wrap_ios_imbue, METH_O, "" },
  { "narrow", _wrap_ios_narrow, METH_VARARGS, "" },
  { "widen", _wrap_ios_widen, METH_O, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__basic_iosT_char_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.ios",                            /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_ios_destructor_closure,      /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__basic_iosT_char_t_type.as_number,        /* tp_as_number */
    &SwigPyBuiltin__std__basic_iosT_char_t_type.as_sequence,      /* tp_as_sequence */
    &SwigPyBuiltin__std__basic_iosT_char_t_type.as_mapping,       /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__basic_iosT_char_t_type.as_buffer,        /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::basic_ios< char >",                 /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__std__basic_iosT_char_t_richcompare,            /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__basic_iosT_char_t_methods,                /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__basic_iosT_char_t_getset,                 /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_ios,                            /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__basic_iosT_char_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__basic_iosT_char_t_type};

static SwigPyGetSet string___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet string_npos_getset = { _wrap_string_npos_get, 0 };
static PyGetSetDef string_npos_getset_def = { (char *)"npos", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"std::basic_string<(char)>.npos", &string_npos_getset };
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__basic_stringT_char_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &string___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__basic_stringT_char_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  switch (op) {
    case Py_EQ : result = _wrap_string___eq__(self, other); break;
    case Py_GE : result = _wrap_string___ge__(self, other); break;
    case Py_GT : result = _wrap_string___gt__(self, other); break;
    case Py_LE : result = _wrap_string___le__(self, other); break;
    case Py_LT : result = _wrap_string___lt__(self, other); break;
    case Py_NE : result = _wrap_string___ne__(self, other); break;
    default : break;
  }
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__basic_stringT_char_t_methods[] = {
  { "length", _wrap_string_length, METH_NOARGS, "" },
  { "max_size", _wrap_string_max_size, METH_NOARGS, "" },
  { "capacity", _wrap_string_capacity, METH_NOARGS, "" },
  { "reserve", _wrap_string_reserve, METH_O, "" },
  { "shrink_to_fit", _wrap_string_shrink_to_fit, METH_NOARGS, "" },
  { "assign", _wrap_string_assign, METH_VARARGS, "" },
  { "insert", _wrap_string_insert, METH_VARARGS, "" },
  { "erase", _wrap_string_erase, METH_VARARGS, "" },
  { "replace", _wrap_string_replace, METH_VARARGS, "" },
  { "copy", _wrap_string_copy, METH_VARARGS, "" },
  { "c_str", _wrap_string_c_str, METH_NOARGS, "" },
  { "find", _wrap_string_find, METH_VARARGS, "" },
  { "rfind", _wrap_string_rfind, METH_VARARGS, "" },
  { "find_first_of", _wrap_string_find_first_of, METH_VARARGS, "" },
  { "find_last_of", _wrap_string_find_last_of, METH_VARARGS, "" },
  { "find_first_not_of", _wrap_string_find_first_not_of, METH_VARARGS, "" },
  { "find_last_not_of", _wrap_string_find_last_not_of, METH_VARARGS, "" },
  { "substr", _wrap_string_substr, METH_VARARGS, "" },
  { "empty", _wrap_string_empty, METH_NOARGS, "" },
  { "size", _wrap_string_size, METH_NOARGS, "" },
  { "swap", _wrap_string_swap, METH_O, "" },
  { "begin", _wrap_string_begin, METH_NOARGS, "" },
  { "end", _wrap_string_end, METH_NOARGS, "" },
  { "rbegin", _wrap_string_rbegin, METH_NOARGS, "" },
  { "rend", _wrap_string_rend, METH_NOARGS, "" },
  { "get_allocator", _wrap_string_get_allocator, METH_NOARGS, "" },
  { "resize", _wrap_string_resize, METH_VARARGS, "" },
  { "iterator", _wrap_string_iterator, METH_NOARGS, "" },
  { "__nonzero__", _wrap_string___nonzero__, METH_NOARGS, "" },
  { "__bool__", _wrap_string___bool__, METH_NOARGS, "" },
  { "__len__", _wrap_string___len__, METH_NOARGS, "" },
  { "__getslice__", _wrap_string___getslice__, METH_VARARGS, "" },
  { "__setslice__", _wrap_string___setslice__, METH_VARARGS, "" },
  { "__delslice__", _wrap_string___delslice__, METH_VARARGS, "" },
  { "__delitem__", _wrap_string___delitem__, METH_VARARGS, "" },
  { "__getitem__", _wrap_string___getitem__, METH_VARARGS, "" },
  { "__setitem__", _wrap_string___setitem__, METH_VARARGS, "" },
  { "__iadd__", _wrap_string___iadd__, METH_O, "" },
  { "__add__", _wrap_string___add__, METH_O, "" },
  { "__radd__", _wrap_string___radd__, METH_O, "" },
  { "__str__", _wrap_string___str__, METH_NOARGS, "" },
  { "__rlshift__", _wrap_string___rlshift__, METH_O, "" },
  { "__eq__", _wrap_string___eq__, METH_O, "" },
  { "__ne__", _wrap_string___ne__, METH_O, "" },
  { "__gt__", _wrap_string___gt__, METH_O, "" },
  { "__lt__", _wrap_string___lt__, METH_O, "" },
  { "__ge__", _wrap_string___ge__, METH_O, "" },
  { "__le__", _wrap_string___le__, METH_O, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__basic_stringT_char_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.string",                         /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_string_destructor_closure,   /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__basic_stringT_char_t_type.as_number,     /* tp_as_number */
    &SwigPyBuiltin__std__basic_stringT_char_t_type.as_sequence,   /* tp_as_sequence */
    &SwigPyBuiltin__std__basic_stringT_char_t_type.as_mapping,    /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__basic_stringT_char_t_type.as_buffer,     /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::basic_string< char >",              /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__std__basic_stringT_char_t_richcompare,         /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    _wrap_string_iterator_getiterfunc_closure,/* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__basic_stringT_char_t_methods,             /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__basic_stringT_char_t_getset,              /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_string,                         /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    _wrap_string___add__,                     /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    _wrap_string___nonzero___inquiry_closure, /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    _wrap_string___iadd__,                    /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    _wrap_string___getitem___binaryfunc_closure,                  /* mp_subscript */
    _wrap_string___setitem___objobjargproc_closure,               /* mp_ass_subscript */
  },
  {
    _wrap_string___len___lenfunc_closure,     /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__basic_stringT_char_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__basic_stringT_char_t_type};

static SwigPyGetSet ostream___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__basic_ostreamT_char_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &ostream___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__basic_ostreamT_char_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__basic_ostreamT_char_t_methods[] = {
  { "__lshift__", _wrap_ostream___lshift__, METH_VARARGS, "" },
  { "put", _wrap_ostream_put, METH_O, "" },
  { "write", _wrap_ostream_write, METH_VARARGS, "" },
  { "flush", _wrap_ostream_flush, METH_NOARGS, "" },
  { "tellp", _wrap_ostream_tellp, METH_NOARGS, "" },
  { "seekp", _wrap_ostream_seekp, METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__basic_ostreamT_char_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.ostream",                        /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_ostream_destructor_closure,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__basic_ostreamT_char_t_type.as_number,    /* tp_as_number */
    &SwigPyBuiltin__std__basic_ostreamT_char_t_type.as_sequence,  /* tp_as_sequence */
    &SwigPyBuiltin__std__basic_ostreamT_char_t_type.as_mapping,   /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__basic_ostreamT_char_t_type.as_buffer,    /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::basic_ostream< char >",             /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__std__basic_ostreamT_char_t_richcompare,        /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__basic_ostreamT_char_t_methods,            /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__basic_ostreamT_char_t_getset,             /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_ostream,                        /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    _wrap_ostream___lshift___binaryfunc_closure,                  /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__basic_ostreamT_char_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__basic_ostreamT_char_t_type};

static SwigPyGetSet istream___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__basic_istreamT_char_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &istream___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__basic_istreamT_char_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__basic_istreamT_char_t_methods[] = {
  { "__rshift__", _wrap_istream___rshift__, METH_VARARGS, "" },
  { "gcount", _wrap_istream_gcount, METH_NOARGS, "" },
  { "get", _wrap_istream_get, METH_VARARGS, "" },
  { "getline", _wrap_istream_getline, METH_VARARGS, "" },
  { "ignore", _wrap_istream_ignore, METH_VARARGS, "" },
  { "peek", _wrap_istream_peek, METH_NOARGS, "" },
  { "read", _wrap_istream_read, METH_VARARGS, "" },
  { "readsome", _wrap_istream_readsome, METH_VARARGS, "" },
  { "putback", _wrap_istream_putback, METH_O, "" },
  { "unget", _wrap_istream_unget, METH_NOARGS, "" },
  { "sync", _wrap_istream_sync, METH_NOARGS, "" },
  { "tellg", _wrap_istream_tellg, METH_NOARGS, "" },
  { "seekg", _wrap_istream_seekg, METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__basic_istreamT_char_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.istream",                        /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_istream_destructor_closure,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__basic_istreamT_char_t_type.as_number,    /* tp_as_number */
    &SwigPyBuiltin__std__basic_istreamT_char_t_type.as_sequence,  /* tp_as_sequence */
    &SwigPyBuiltin__std__basic_istreamT_char_t_type.as_mapping,   /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__basic_istreamT_char_t_type.as_buffer,    /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::basic_istream< char >",             /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__std__basic_istreamT_char_t_richcompare,        /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__basic_istreamT_char_t_methods,            /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__basic_istreamT_char_t_getset,             /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_istream,                        /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    _wrap_istream___rshift___binaryfunc_closure,                  /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__basic_istreamT_char_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__basic_istreamT_char_t_type};

static SwigPyGetSet iostream___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__basic_iostreamT_char_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &iostream___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__basic_iostreamT_char_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__basic_iostreamT_char_t_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__basic_iostreamT_char_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.iostream",                       /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_iostream_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__basic_iostreamT_char_t_type.as_number,   /* tp_as_number */
    &SwigPyBuiltin__std__basic_iostreamT_char_t_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__std__basic_iostreamT_char_t_type.as_mapping,  /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__basic_iostreamT_char_t_type.as_buffer,   /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::basic_iostream< char >",            /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__std__basic_iostreamT_char_t_richcompare,       /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__basic_iostreamT_char_t_methods,           /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__basic_iostreamT_char_t_getset,            /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_iostream,                       /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__basic_iostreamT_char_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__basic_iostreamT_char_t_type};

static SwigPyGetSet ChannelsRefPtr___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__crpropa__ref_ptrT_nupropa__Channels_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"", &ChannelsRefPtr___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__crpropa__ref_ptrT_nupropa__Channels_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__crpropa__ref_ptrT_nupropa__Channels_t_methods[] = {
  { "__ref__", _wrap_ChannelsRefPtr___ref__, METH_NOARGS, "__ref__(ChannelsRefPtr self) -> Channels" },
  { "__deref__", _wrap_ChannelsRefPtr___deref__, METH_NOARGS, "__deref__(ChannelsRefPtr self) -> Channels" },
  { "get", _wrap_ChannelsRefPtr_get, METH_NOARGS, "get(ChannelsRefPtr self) -> Channels" },
  { "valid", _wrap_ChannelsRefPtr_valid, METH_NOARGS, "valid(ChannelsRefPtr self) -> bool" },
  { "release", _wrap_ChannelsRefPtr_release, METH_NOARGS, "release(ChannelsRefPtr self) -> Channels" },
  { "swap", _wrap_ChannelsRefPtr_swap, METH_O, "swap(ChannelsRefPtr self, ChannelsRefPtr rp)" },
  { "getInteractionChannels", _wrap_ChannelsRefPtr_getInteractionChannels, METH_NOARGS, "getInteractionChannels(ChannelsRefPtr self) -> std::vector< std::string,std::allocator< std::string > >" },
  { "getActiveChannels", _wrap_ChannelsRefPtr_getActiveChannels, METH_NOARGS, "getActiveChannels(ChannelsRefPtr self) -> std::vector< bool,std::allocator< bool > >" },
  { "getInteractionFolderPath", _wrap_ChannelsRefPtr_getInteractionFolderPath, METH_NOARGS, "getInteractionFolderPath(ChannelsRefPtr self) -> string" },
  { "getProductsID", _wrap_ChannelsRefPtr_getProductsID, METH_NOARGS, "getProductsID(ChannelsRefPtr self) -> std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >" },
  { "getChannelIndex", _wrap_ChannelsRefPtr_getChannelIndex, METH_O, "getChannelIndex(ChannelsRefPtr self, string interactioChannel) -> int" },
  { "loadInteractionChannels", _wrap_ChannelsRefPtr_loadInteractionChannels, METH_O, "loadInteractionChannels(ChannelsRefPtr self, string interactionFolder)" },
  { "loadProductsID", _wrap_ChannelsRefPtr_loadProductsID, METH_O, "loadProductsID(ChannelsRefPtr self, string interactionFolder)" },
  { "activeAll", _wrap_ChannelsRefPtr_activeAll, METH_NOARGS, "activeAll(ChannelsRefPtr self)" },
  { "setInteractionChannels", _wrap_ChannelsRefPtr_setInteractionChannels, METH_O, "setInteractionChannels(ChannelsRefPtr self, std::vector< std::string,std::allocator< std::string > > interactionChannels)" },
  { "setChannelsActive", _wrap_ChannelsRefPtr_setChannelsActive, METH_O, "setChannelsActive(ChannelsRefPtr self, std::vector< bool,std::allocator< bool > > active)" },
  { "setInteractionFolderPath", _wrap_ChannelsRefPtr_setInteractionFolderPath, METH_O, "setInteractionFolderPath(ChannelsRefPtr self, string interactionFolderPath)" },
  { "setProductsID", _wrap_ChannelsRefPtr_setProductsID, METH_O, "setProductsID(ChannelsRefPtr self, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > productsID)" },
  { "setInactiveChannel", _wrap_ChannelsRefPtr_setInactiveChannel, METH_O, "setInactiveChannel(ChannelsRefPtr self, string interactionChannel)" },
  { "addReference", _wrap_ChannelsRefPtr_addReference, METH_NOARGS, "addReference(ChannelsRefPtr self) -> size_t" },
  { "removeReference", _wrap_ChannelsRefPtr_removeReference, METH_NOARGS, "removeReference(ChannelsRefPtr self) -> size_t" },
  { "removeReferenceNoDelete", _wrap_ChannelsRefPtr_removeReferenceNoDelete, METH_NOARGS, "removeReferenceNoDelete(ChannelsRefPtr self) -> int" },
  { "getReferenceCount", _wrap_ChannelsRefPtr_getReferenceCount, METH_NOARGS, "getReferenceCount(ChannelsRefPtr self) -> size_t" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__crpropa__ref_ptrT_nupropa__Channels_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.ChannelsRefPtr",                 /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_ChannelsRefPtr_destructor_closure,               /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__Channels_t_type.as_number,/* tp_as_number */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__Channels_t_type.as_sequence,/* tp_as_sequence */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__Channels_t_type.as_mapping,/* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__Channels_t_type.as_buffer,/* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "crpropa::ref_ptr< nupropa::Channels >",  /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__crpropa__ref_ptrT_nupropa__Channels_t_richcompare,/* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__crpropa__ref_ptrT_nupropa__Channels_t_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__crpropa__ref_ptrT_nupropa__Channels_t_getset,  /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_ChannelsRefPtr,                 /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    _wrap_ChannelsRefPtr___ref__,             /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__crpropa__ref_ptrT_nupropa__Channels_t_clientdata = {(PyObject *) &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__Channels_t_type, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__crpropa__ref_ptrT_nupropa__Channels_t_type};

static SwigPyGetSet ChannelsBundleRefPtr___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__crpropa__ref_ptrT_nupropa__ChannelsBundle_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"\n"
		"ref_ptr<(nupropa::ChannelsBundle)> : p.crpropa::ref_ptr<(nupropa::ChannelsBundle)>\n"
		"ChannelsBundleRefPtr : \n"
		"ChannelsBundleRefPtr : \n"
		"", &ChannelsBundleRefPtr___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__crpropa__ref_ptrT_nupropa__ChannelsBundle_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__crpropa__ref_ptrT_nupropa__ChannelsBundle_t_methods[] = {
  { "__ref__", _wrap_ChannelsBundleRefPtr___ref__, METH_NOARGS, "__ref__(ChannelsBundleRefPtr self) -> ChannelsBundle" },
  { "__deref__", _wrap_ChannelsBundleRefPtr___deref__, METH_NOARGS, "__deref__(ChannelsBundleRefPtr self) -> ChannelsBundle" },
  { "get", _wrap_ChannelsBundleRefPtr_get, METH_NOARGS, "get(ChannelsBundleRefPtr self) -> ChannelsBundle" },
  { "valid", _wrap_ChannelsBundleRefPtr_valid, METH_NOARGS, "valid(ChannelsBundleRefPtr self) -> bool" },
  { "release", _wrap_ChannelsBundleRefPtr_release, METH_NOARGS, "release(ChannelsBundleRefPtr self) -> ChannelsBundle" },
  { "swap", _wrap_ChannelsBundleRefPtr_swap, METH_O, "swap(ChannelsBundleRefPtr self, ChannelsBundleRefPtr rp)" },
  { "loadRateFile", _wrap_ChannelsBundleRefPtr_loadRateFile, METH_O, "loadRateFile(ChannelsBundleRefPtr self, string filename)" },
  { "loadCumulativeRateFile", _wrap_ChannelsBundleRefPtr_loadCumulativeRateFile, METH_O, "loadCumulativeRateFile(ChannelsBundleRefPtr self, string filename)" },
  { "loadProductsChannelId", _wrap_ChannelsBundleRefPtr_loadProductsChannelId, METH_O, "loadProductsChannelId(ChannelsBundleRefPtr self, string filename)" },
  { "findClosestRedshift", _wrap_ChannelsBundleRefPtr_findClosestRedshift, METH_VARARGS, "findClosestRedshift(ChannelsBundleRefPtr self, double z, std::vector< double,std::allocator< double > > const & redshifts) -> double" },
  { "selectIndexes", _wrap_ChannelsBundleRefPtr_selectIndexes, METH_VARARGS, "selectIndexes(ChannelsBundleRefPtr self, string massCombRedshift, int ID, int IDbkg)" },
  { "getAlphasBetas", _wrap_ChannelsBundleRefPtr_getAlphasBetas, METH_VARARGS, "getAlphasBetas(ChannelsBundleRefPtr self, int ID, int IDbkg) -> std::vector< std::string,std::allocator< std::string > >" },
  { "selectProdChanId", _wrap_ChannelsBundleRefPtr_selectProdChanId, METH_NOARGS, "selectProdChanId(ChannelsBundleRefPtr self) -> std::vector< int,std::allocator< int > >" },
  { "selectedRates", _wrap_ChannelsBundleRefPtr_selectedRates, METH_O, "selectedRates(ChannelsBundleRefPtr self, std::vector< int,std::allocator< int > > const & indexes) -> std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >" },
  { "selectedEnergies", _wrap_ChannelsBundleRefPtr_selectedEnergies, METH_O, "selectedEnergies(ChannelsBundleRefPtr self, std::vector< int,std::allocator< int > > const & indexes) -> std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >" },
  { "getRate", _wrap_ChannelsBundleRefPtr_getRate, METH_VARARGS, "getRate(ChannelsBundleRefPtr self, int ID, int IDBkg, string massComb, double z, double E) -> double" },
  { "fillTableZeros", _wrap_ChannelsBundleRefPtr_fillTableZeros, METH_VARARGS, "fillTableZeros(ChannelsBundleRefPtr self, std::vector< double,std::allocator< double > > table, size_t size) -> std::vector< double,std::allocator< double > >" },
  { "computeInteractionProbabilities", _wrap_ChannelsBundleRefPtr_computeInteractionProbabilities, METH_O, "computeInteractionProbabilities(ChannelsBundleRefPtr self, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > rates)" },
  { "selectIndex", _wrap_ChannelsBundleRefPtr_selectIndex, METH_VARARGS, "selectIndex(ChannelsBundleRefPtr self, std::vector< double,std::allocator< double > > tabEnergy, double E)" },
  { "selectCDF", _wrap_ChannelsBundleRefPtr_selectCDF, METH_NOARGS, "selectCDF(ChannelsBundleRefPtr self) -> std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >" },
  { "selects", _wrap_ChannelsBundleRefPtr_selects, METH_NOARGS, "selects(ChannelsBundleRefPtr self) -> std::vector< double,std::allocator< double > >" },
  { "selectE", _wrap_ChannelsBundleRefPtr_selectE, METH_NOARGS, "selectE(ChannelsBundleRefPtr self) -> std::vector< double,std::allocator< double > >" },
  { "getSelectedIndexes", _wrap_ChannelsBundleRefPtr_getSelectedIndexes, METH_NOARGS, "getSelectedIndexes(ChannelsBundleRefPtr self) -> std::vector< int,std::allocator< int > >" },
  { "getSelectedIndex", _wrap_ChannelsBundleRefPtr_getSelectedIndex, METH_NOARGS, "getSelectedIndex(ChannelsBundleRefPtr self) -> int" },
  { "addReference", _wrap_ChannelsBundleRefPtr_addReference, METH_NOARGS, "addReference(ChannelsBundleRefPtr self) -> size_t" },
  { "removeReference", _wrap_ChannelsBundleRefPtr_removeReference, METH_NOARGS, "removeReference(ChannelsBundleRefPtr self) -> size_t" },
  { "removeReferenceNoDelete", _wrap_ChannelsBundleRefPtr_removeReferenceNoDelete, METH_NOARGS, "removeReferenceNoDelete(ChannelsBundleRefPtr self) -> int" },
  { "getReferenceCount", _wrap_ChannelsBundleRefPtr_getReferenceCount, METH_NOARGS, "getReferenceCount(ChannelsBundleRefPtr self) -> size_t" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__crpropa__ref_ptrT_nupropa__ChannelsBundle_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.ChannelsBundleRefPtr",           /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_ChannelsBundleRefPtr_destructor_closure,         /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__ChannelsBundle_t_type.as_number,/* tp_as_number */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__ChannelsBundle_t_type.as_sequence,/* tp_as_sequence */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__ChannelsBundle_t_type.as_mapping,/* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__ChannelsBundle_t_type.as_buffer,/* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "crpropa::ref_ptr< nupropa::ChannelsBundle >",                /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__crpropa__ref_ptrT_nupropa__ChannelsBundle_t_richcompare,/* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__crpropa__ref_ptrT_nupropa__ChannelsBundle_t_methods,/* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__crpropa__ref_ptrT_nupropa__ChannelsBundle_t_getset,/* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_ChannelsBundleRefPtr,           /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    _wrap_ChannelsBundleRefPtr___ref__,       /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__crpropa__ref_ptrT_nupropa__ChannelsBundle_t_clientdata = {(PyObject *) &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__ChannelsBundle_t_type, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__crpropa__ref_ptrT_nupropa__ChannelsBundle_t_type};

static SwigPyGetSet NeutrinoFieldRefPtr___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoField_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"\n"
		"ref_ptr<(nupropa::NeutrinoField)> : p.crpropa::ref_ptr<(nupropa::NeutrinoField)>\n"
		"NeutrinoFieldRefPtr : \n"
		"NeutrinoFieldRefPtr : \n"
		"", &NeutrinoFieldRefPtr___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoField_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoField_t_methods[] = {
  { "__ref__", _wrap_NeutrinoFieldRefPtr___ref__, METH_NOARGS, "__ref__(NeutrinoFieldRefPtr self) -> NeutrinoField" },
  { "__deref__", _wrap_NeutrinoFieldRefPtr___deref__, METH_NOARGS, "__deref__(NeutrinoFieldRefPtr self) -> NeutrinoField" },
  { "get", _wrap_NeutrinoFieldRefPtr_get, METH_NOARGS, "get(NeutrinoFieldRefPtr self) -> NeutrinoField" },
  { "valid", _wrap_NeutrinoFieldRefPtr_valid, METH_NOARGS, "valid(NeutrinoFieldRefPtr self) -> bool" },
  { "release", _wrap_NeutrinoFieldRefPtr_release, METH_NOARGS, "release(NeutrinoFieldRefPtr self) -> NeutrinoField" },
  { "swap", _wrap_NeutrinoFieldRefPtr_swap, METH_O, "swap(NeutrinoFieldRefPtr self, NeutrinoFieldRefPtr rp)" },
  { "getNeutrinoDensity", _wrap_NeutrinoFieldRefPtr_getNeutrinoDensity, METH_VARARGS, "getNeutrinoDensity(NeutrinoFieldRefPtr self, double eNeutrino, double z=0.) -> double" },
  { "getMinimumNeutrinoEnergy", _wrap_NeutrinoFieldRefPtr_getMinimumNeutrinoEnergy, METH_O, "getMinimumNeutrinoEnergy(NeutrinoFieldRefPtr self, double z) -> double" },
  { "getMaximumNeutrinoEnergy", _wrap_NeutrinoFieldRefPtr_getMaximumNeutrinoEnergy, METH_O, "getMaximumNeutrinoEnergy(NeutrinoFieldRefPtr self, double z) -> double" },
  { "getFieldName", _wrap_NeutrinoFieldRefPtr_getFieldName, METH_NOARGS, "getFieldName(NeutrinoFieldRefPtr self) -> string" },
  { "getRedshiftScaling", _wrap_NeutrinoFieldRefPtr_getRedshiftScaling, METH_O, "getRedshiftScaling(NeutrinoFieldRefPtr self, double z) -> double" },
  { "hasRedshiftDependence", _wrap_NeutrinoFieldRefPtr_hasRedshiftDependence, METH_NOARGS, "hasRedshiftDependence(NeutrinoFieldRefPtr self) -> bool" },
  { "setFieldName", _wrap_NeutrinoFieldRefPtr_setFieldName, METH_O, "setFieldName(NeutrinoFieldRefPtr self, string fieldName)" },
  { "getMass", _wrap_NeutrinoFieldRefPtr_getMass, METH_NOARGS, "getMass(NeutrinoFieldRefPtr self) -> int" },
  { "addReference", _wrap_NeutrinoFieldRefPtr_addReference, METH_NOARGS, "addReference(NeutrinoFieldRefPtr self) -> size_t" },
  { "removeReference", _wrap_NeutrinoFieldRefPtr_removeReference, METH_NOARGS, "removeReference(NeutrinoFieldRefPtr self) -> size_t" },
  { "removeReferenceNoDelete", _wrap_NeutrinoFieldRefPtr_removeReferenceNoDelete, METH_NOARGS, "removeReferenceNoDelete(NeutrinoFieldRefPtr self) -> int" },
  { "getReferenceCount", _wrap_NeutrinoFieldRefPtr_getReferenceCount, METH_NOARGS, "getReferenceCount(NeutrinoFieldRefPtr self) -> size_t" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoField_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.NeutrinoFieldRefPtr",            /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_NeutrinoFieldRefPtr_destructor_closure,          /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoField_t_type.as_number,/* tp_as_number */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoField_t_type.as_sequence,/* tp_as_sequence */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoField_t_type.as_mapping,/* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoField_t_type.as_buffer,/* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "crpropa::ref_ptr< nupropa::NeutrinoField >",                 /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoField_t_richcompare,/* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoField_t_methods,/* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoField_t_getset,/* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_NeutrinoFieldRefPtr,            /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    _wrap_NeutrinoFieldRefPtr___ref__,        /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoField_t_clientdata = {(PyObject *) &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoField_t_type, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoField_t_type};

static SwigPyGetSet NeutrinoMixingRefPtr___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoMixing_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"\n"
		"ref_ptr<(nupropa::NeutrinoMixing)> : p.crpropa::ref_ptr<(nupropa::NeutrinoMixing)>\n"
		"NeutrinoMixingRefPtr : \n"
		"NeutrinoMixingRefPtr : \n"
		"", &NeutrinoMixingRefPtr___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoMixing_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoMixing_t_methods[] = {
  { "__ref__", _wrap_NeutrinoMixingRefPtr___ref__, METH_NOARGS, "__ref__(NeutrinoMixingRefPtr self) -> NeutrinoMixing" },
  { "__deref__", _wrap_NeutrinoMixingRefPtr___deref__, METH_NOARGS, "__deref__(NeutrinoMixingRefPtr self) -> NeutrinoMixing" },
  { "get", _wrap_NeutrinoMixingRefPtr_get, METH_NOARGS, "get(NeutrinoMixingRefPtr self) -> NeutrinoMixing" },
  { "valid", _wrap_NeutrinoMixingRefPtr_valid, METH_NOARGS, "valid(NeutrinoMixingRefPtr self) -> bool" },
  { "release", _wrap_NeutrinoMixingRefPtr_release, METH_NOARGS, "release(NeutrinoMixingRefPtr self) -> NeutrinoMixing" },
  { "swap", _wrap_NeutrinoMixingRefPtr_swap, METH_O, "swap(NeutrinoMixingRefPtr self, NeutrinoMixingRefPtr rp)" },
  { "setTheta", _wrap_NeutrinoMixingRefPtr_setTheta, METH_VARARGS, "setTheta(NeutrinoMixingRefPtr self, double theta13, double theta23, double theta12)" },
  { "setDelta", _wrap_NeutrinoMixingRefPtr_setDelta, METH_O, "setDelta(NeutrinoMixingRefPtr self, double delta)" },
  { "setMasses", _wrap_NeutrinoMixingRefPtr_setMasses, METH_VARARGS, "setMasses(NeutrinoMixingRefPtr self, double mass1, double mass2, double mass3)" },
  { "buildUpmnsMatrix", _wrap_NeutrinoMixingRefPtr_buildUpmnsMatrix, METH_NOARGS, "buildUpmnsMatrix(NeutrinoMixingRefPtr self)" },
  { "getUpmnsMatrix", _wrap_NeutrinoMixingRefPtr_getUpmnsMatrix, METH_NOARGS, "getUpmnsMatrix(NeutrinoMixingRefPtr self) -> Eigen::Matrix3cd" },
  { "getFlavourMassProbabilities", _wrap_NeutrinoMixingRefPtr_getFlavourMassProbabilities, METH_NOARGS, "getFlavourMassProbabilities(NeutrinoMixingRefPtr self) -> Eigen::Matrix3cd" },
  { "IdToFlavourIndex", _wrap_NeutrinoMixingRefPtr_IdToFlavourIndex, METH_O, "IdToFlavourIndex(NeutrinoMixingRefPtr self, int ID) -> int" },
  { "flavourIndexToId", _wrap_NeutrinoMixingRefPtr_flavourIndexToId, METH_O, "flavourIndexToId(NeutrinoMixingRefPtr self, int index) -> int" },
  { "massIndexToMass", _wrap_NeutrinoMixingRefPtr_massIndexToMass, METH_O, "massIndexToMass(NeutrinoMixingRefPtr self, int index) -> double" },
  { "massToIndexMass", _wrap_NeutrinoMixingRefPtr_massToIndexMass, METH_O, "massToIndexMass(NeutrinoMixingRefPtr self, double mass) -> int" },
  { "fromFlavourToMass", _wrap_NeutrinoMixingRefPtr_fromFlavourToMass, METH_O, "fromFlavourToMass(NeutrinoMixingRefPtr self, int ID) -> double" },
  { "fromMassToFlavour", _wrap_NeutrinoMixingRefPtr_fromMassToFlavour, METH_O, "fromMassToFlavour(NeutrinoMixingRefPtr self, double mass) -> int" },
  { "precomputeOscillationTerms", _wrap_NeutrinoMixingRefPtr_precomputeOscillationTerms, METH_NOARGS, "precomputeOscillationTerms(NeutrinoMixingRefPtr self)" },
  { "oscillateFlavour", _wrap_NeutrinoMixingRefPtr_oscillateFlavour, METH_VARARGS, "oscillateFlavour(NeutrinoMixingRefPtr self, int ID, double E, double L) -> int" },
  { "addReference", _wrap_NeutrinoMixingRefPtr_addReference, METH_NOARGS, "addReference(NeutrinoMixingRefPtr self) -> size_t" },
  { "removeReference", _wrap_NeutrinoMixingRefPtr_removeReference, METH_NOARGS, "removeReference(NeutrinoMixingRefPtr self) -> size_t" },
  { "removeReferenceNoDelete", _wrap_NeutrinoMixingRefPtr_removeReferenceNoDelete, METH_NOARGS, "removeReferenceNoDelete(NeutrinoMixingRefPtr self) -> int" },
  { "getReferenceCount", _wrap_NeutrinoMixingRefPtr_getReferenceCount, METH_NOARGS, "getReferenceCount(NeutrinoMixingRefPtr self) -> size_t" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoMixing_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.NeutrinoMixingRefPtr",           /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_NeutrinoMixingRefPtr_destructor_closure,         /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoMixing_t_type.as_number,/* tp_as_number */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoMixing_t_type.as_sequence,/* tp_as_sequence */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoMixing_t_type.as_mapping,/* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoMixing_t_type.as_buffer,/* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "crpropa::ref_ptr< nupropa::NeutrinoMixing >",                /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoMixing_t_richcompare,/* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoMixing_t_methods,/* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoMixing_t_getset,/* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_NeutrinoMixingRefPtr,           /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    _wrap_NeutrinoMixingRefPtr___ref__,       /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoMixing_t_clientdata = {(PyObject *) &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoMixing_t_type, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoMixing_t_type};

static SwigPyGetSet RelativisticInteractionRefPtr___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__crpropa__ref_ptrT_nupropa__RelativisticInteraction_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"\n"
		"ref_ptr<(nupropa::RelativisticInteraction)> : p.crpropa::ref_ptr<(nupropa::RelativisticInteraction)>\n"
		"RelativisticInteractionRefPtr : \n"
		"RelativisticInteractionRefPtr : \n"
		"", &RelativisticInteractionRefPtr___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__crpropa__ref_ptrT_nupropa__RelativisticInteraction_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__crpropa__ref_ptrT_nupropa__RelativisticInteraction_t_methods[] = {
  { "__ref__", _wrap_RelativisticInteractionRefPtr___ref__, METH_NOARGS, "__ref__(RelativisticInteractionRefPtr self) -> RelativisticInteraction" },
  { "__deref__", _wrap_RelativisticInteractionRefPtr___deref__, METH_NOARGS, "__deref__(RelativisticInteractionRefPtr self) -> RelativisticInteraction" },
  { "get", _wrap_RelativisticInteractionRefPtr_get, METH_NOARGS, "get(RelativisticInteractionRefPtr self) -> RelativisticInteraction" },
  { "valid", _wrap_RelativisticInteractionRefPtr_valid, METH_NOARGS, "valid(RelativisticInteractionRefPtr self) -> bool" },
  { "release", _wrap_RelativisticInteractionRefPtr_release, METH_NOARGS, "release(RelativisticInteractionRefPtr self) -> RelativisticInteraction" },
  { "swap", _wrap_RelativisticInteractionRefPtr_swap, METH_O, "swap(RelativisticInteractionRefPtr self, RelativisticInteractionRefPtr rp)" },
  { "setBetaCom", _wrap_RelativisticInteractionRefPtr_setBetaCom, METH_VARARGS, "setBetaCom(RelativisticInteractionRefPtr self, double E, double m1, double m2, double s)" },
  { "setBetaPhotonCom", _wrap_RelativisticInteractionRefPtr_setBetaPhotonCom, METH_VARARGS, "setBetaPhotonCom(RelativisticInteractionRefPtr self, double E, double m1, double s)" },
  { "setGammaCom", _wrap_RelativisticInteractionRefPtr_setGammaCom, METH_VARARGS, "setGammaCom(RelativisticInteractionRefPtr self, double E, double s)" },
  { "getBetaCom", _wrap_RelativisticInteractionRefPtr_getBetaCom, METH_NOARGS, "getBetaCom(RelativisticInteractionRefPtr self) -> double" },
  { "getGammaCom", _wrap_RelativisticInteractionRefPtr_getGammaCom, METH_NOARGS, "getGammaCom(RelativisticInteractionRefPtr self) -> double" },
  { "computeProductsMomentumCom", _wrap_RelativisticInteractionRefPtr_computeProductsMomentumCom, METH_VARARGS, "computeProductsMomentumCom(RelativisticInteractionRefPtr self, double s, double m3, double m4) -> double" },
  { "getProductEnergiesLab", _wrap_RelativisticInteractionRefPtr_getProductEnergiesLab, METH_VARARGS, "getProductEnergiesLab(RelativisticInteractionRefPtr self, double s, double costh13_com, double m3, double m4) -> std::vector< double,std::allocator< double > >" },
  { "addReference", _wrap_RelativisticInteractionRefPtr_addReference, METH_NOARGS, "addReference(RelativisticInteractionRefPtr self) -> size_t" },
  { "removeReference", _wrap_RelativisticInteractionRefPtr_removeReference, METH_NOARGS, "removeReference(RelativisticInteractionRefPtr self) -> size_t" },
  { "removeReferenceNoDelete", _wrap_RelativisticInteractionRefPtr_removeReferenceNoDelete, METH_NOARGS, "removeReferenceNoDelete(RelativisticInteractionRefPtr self) -> int" },
  { "getReferenceCount", _wrap_RelativisticInteractionRefPtr_getReferenceCount, METH_NOARGS, "getReferenceCount(RelativisticInteractionRefPtr self) -> size_t" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__crpropa__ref_ptrT_nupropa__RelativisticInteraction_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.RelativisticInteractionRefPtr",  /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_RelativisticInteractionRefPtr_destructor_closure,/* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__RelativisticInteraction_t_type.as_number,/* tp_as_number */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__RelativisticInteraction_t_type.as_sequence,/* tp_as_sequence */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__RelativisticInteraction_t_type.as_mapping,/* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__RelativisticInteraction_t_type.as_buffer,/* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "crpropa::ref_ptr< nupropa::RelativisticInteraction >",       /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__crpropa__ref_ptrT_nupropa__RelativisticInteraction_t_richcompare,/* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__crpropa__ref_ptrT_nupropa__RelativisticInteraction_t_methods,/* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__crpropa__ref_ptrT_nupropa__RelativisticInteraction_t_getset,/* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_RelativisticInteractionRefPtr,  /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    _wrap_RelativisticInteractionRefPtr___ref__,                  /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__crpropa__ref_ptrT_nupropa__RelativisticInteraction_t_clientdata = {(PyObject *) &SwigPyBuiltin__crpropa__ref_ptrT_nupropa__RelativisticInteraction_t_type, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__crpropa__ref_ptrT_nupropa__RelativisticInteraction_t_type};

static SwigPyGetSet NeutrinoNeutrinoInteraction___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__nupropa__NeutrinoNeutrinoInteraction_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"NeutrinoNeutrinoInteraction : p.nupropa::NeutrinoNeutrinoInteraction", &NeutrinoNeutrinoInteraction___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__nupropa__NeutrinoNeutrinoInteraction_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__nupropa__NeutrinoNeutrinoInteraction_methods[] = {
  { "setNeutrinoField", _wrap_NeutrinoNeutrinoInteraction_setNeutrinoField, METH_O, "setNeutrinoField(NeutrinoNeutrinoInteraction self, crpropa::ref_ptr< NeutrinoField > neutrinoField)" },
  { "setNeutrinoMixing", _wrap_NeutrinoNeutrinoInteraction_setNeutrinoMixing, METH_O, "setNeutrinoMixing(NeutrinoNeutrinoInteraction self, crpropa::ref_ptr< NeutrinoMixing > neutrinoMixing)" },
  { "setHaveSecondaries", _wrap_NeutrinoNeutrinoInteraction_setHaveSecondaries, METH_O, "setHaveSecondaries(NeutrinoNeutrinoInteraction self, bool haveSecondaries)" },
  { "setLimit", _wrap_NeutrinoNeutrinoInteraction_setLimit, METH_O, "setLimit(NeutrinoNeutrinoInteraction self, double limit)" },
  { "setInteractionTag", _wrap_NeutrinoNeutrinoInteraction_setInteractionTag, METH_O, "setInteractionTag(NeutrinoNeutrinoInteraction self, string tag)" },
  { "getInteractionTag", _wrap_NeutrinoNeutrinoInteraction_getInteractionTag, METH_NOARGS, "getInteractionTag(NeutrinoNeutrinoInteraction self) -> string" },
  { "setRelativisticInteraction", _wrap_NeutrinoNeutrinoInteraction_setRelativisticInteraction, METH_VARARGS, "setRelativisticInteraction(NeutrinoNeutrinoInteraction self, double m1, double m2, double E, double s)" },
  { "loadRateFile", _wrap_NeutrinoNeutrinoInteraction_loadRateFile, METH_O, "loadRateFile(NeutrinoNeutrinoInteraction self, string fileName)" },
  { "loadCumulativeRateFile", _wrap_NeutrinoNeutrinoInteraction_loadCumulativeRateFile, METH_O, "loadCumulativeRateFile(NeutrinoNeutrinoInteraction self, string fileName)" },
  { "initRate", _wrap_NeutrinoNeutrinoInteraction_initRate, METH_VARARGS, "initRate(NeutrinoNeutrinoInteraction self, string fileNuNu, string fileNuiNuj)" },
  { "initCumulativeRate", _wrap_NeutrinoNeutrinoInteraction_initCumulativeRate, METH_VARARGS, "initCumulativeRate(NeutrinoNeutrinoInteraction self, string fileNuNu, string fileNuiNuj)" },
  { "findClosestRedshift", _wrap_NeutrinoNeutrinoInteraction_findClosestRedshift, METH_VARARGS, "findClosestRedshift(NeutrinoNeutrinoInteraction self, double z, std::vector< double,std::allocator< double > > const & redshifts) -> double" },
  { "interactionIndex", _wrap_NeutrinoNeutrinoInteraction_interactionIndex, METH_VARARGS, "interactionIndex(NeutrinoNeutrinoInteraction self, int ID, int IDbkg, double mass, double z) -> int" },
  { "process", _wrap_NeutrinoNeutrinoInteraction_process, METH_O, "process(NeutrinoNeutrinoInteraction self, Candidate candidate)" },
  { "performInteraction", _wrap_NeutrinoNeutrinoInteraction_performInteraction, METH_VARARGS, "performInteraction(NeutrinoNeutrinoInteraction self, Candidate candidate, int index, double mass)" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__nupropa__NeutrinoNeutrinoInteraction_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.NeutrinoNeutrinoInteraction",    /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_NeutrinoNeutrinoInteraction_destructor_closure,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__nupropa__NeutrinoNeutrinoInteraction_type.as_number,/* tp_as_number */
    &SwigPyBuiltin__nupropa__NeutrinoNeutrinoInteraction_type.as_sequence,/* tp_as_sequence */
    &SwigPyBuiltin__nupropa__NeutrinoNeutrinoInteraction_type.as_mapping,/* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__nupropa__NeutrinoNeutrinoInteraction_type.as_buffer,/* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "nupropa::NeutrinoNeutrinoInteraction",   /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__nupropa__NeutrinoNeutrinoInteraction_richcompare,/* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__nupropa__NeutrinoNeutrinoInteraction_methods,  /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__nupropa__NeutrinoNeutrinoInteraction_getset,   /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_NeutrinoNeutrinoInteraction,    /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__nupropa__NeutrinoNeutrinoInteraction_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__nupropa__NeutrinoNeutrinoInteraction_type};

static SwigPyGetSet NeutrinoAntineutrinoInteraction___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__nupropa__NeutrinoAntineutrinoInteraction_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"NeutrinoAntineutrinoInteraction : p.nupropa::NeutrinoAntineutrinoInteraction", &NeutrinoAntineutrinoInteraction___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__nupropa__NeutrinoAntineutrinoInteraction_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__nupropa__NeutrinoAntineutrinoInteraction_methods[] = {
  { "setNeutrinoField", _wrap_NeutrinoAntineutrinoInteraction_setNeutrinoField, METH_O, "setNeutrinoField(NeutrinoAntineutrinoInteraction self, crpropa::ref_ptr< NeutrinoField > neutrinoField)" },
  { "setNeutrinoMixing", _wrap_NeutrinoAntineutrinoInteraction_setNeutrinoMixing, METH_O, "setNeutrinoMixing(NeutrinoAntineutrinoInteraction self, crpropa::ref_ptr< NeutrinoMixing > neutrinoMixing)" },
  { "setHaveSecondaries", _wrap_NeutrinoAntineutrinoInteraction_setHaveSecondaries, METH_O, "setHaveSecondaries(NeutrinoAntineutrinoInteraction self, bool haveSecondaries)" },
  { "setLimit", _wrap_NeutrinoAntineutrinoInteraction_setLimit, METH_O, "setLimit(NeutrinoAntineutrinoInteraction self, double limit)" },
  { "setChannels", _wrap_NeutrinoAntineutrinoInteraction_setChannels, METH_O, "setChannels(NeutrinoAntineutrinoInteraction self, crpropa::ref_ptr< Channels > channels)" },
  { "setChannelsBundle", _wrap_NeutrinoAntineutrinoInteraction_setChannelsBundle, METH_VARARGS, "setChannelsBundle(NeutrinoAntineutrinoInteraction self, crpropa::ref_ptr< Channels > channels, string fname)" },
  { "setRelativisticInteraction", _wrap_NeutrinoAntineutrinoInteraction_setRelativisticInteraction, METH_VARARGS, "setRelativisticInteraction(NeutrinoAntineutrinoInteraction self, double m1, double m2, double E, double s)" },
  { "setInteractionTag", _wrap_NeutrinoAntineutrinoInteraction_setInteractionTag, METH_O, "setInteractionTag(NeutrinoAntineutrinoInteraction self, string tag)" },
  { "getInteractionTag", _wrap_NeutrinoAntineutrinoInteraction_getInteractionTag, METH_NOARGS, "getInteractionTag(NeutrinoAntineutrinoInteraction self) -> string" },
  { "process", _wrap_NeutrinoAntineutrinoInteraction_process, METH_O, "process(NeutrinoAntineutrinoInteraction self, Candidate candidate)" },
  { "performInteraction", _wrap_NeutrinoAntineutrinoInteraction_performInteraction, METH_VARARGS, "performInteraction(NeutrinoAntineutrinoInteraction self, Candidate candidate, double mass, int IDbkg)" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__nupropa__NeutrinoAntineutrinoInteraction_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.NeutrinoAntineutrinoInteraction",/* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_NeutrinoAntineutrinoInteraction_destructor_closure,/* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__nupropa__NeutrinoAntineutrinoInteraction_type.as_number,/* tp_as_number */
    &SwigPyBuiltin__nupropa__NeutrinoAntineutrinoInteraction_type.as_sequence,/* tp_as_sequence */
    &SwigPyBuiltin__nupropa__NeutrinoAntineutrinoInteraction_type.as_mapping,/* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__nupropa__NeutrinoAntineutrinoInteraction_type.as_buffer,/* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "nupropa::NeutrinoAntineutrinoInteraction",                   /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__nupropa__NeutrinoAntineutrinoInteraction_richcompare,/* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__nupropa__NeutrinoAntineutrinoInteraction_methods,/* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__nupropa__NeutrinoAntineutrinoInteraction_getset,/* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_NeutrinoAntineutrinoInteraction,/* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__nupropa__NeutrinoAntineutrinoInteraction_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__nupropa__NeutrinoAntineutrinoInteraction_type};

static SwigPyGetSet NeutrinoPhotonInteraction___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__nupropa__NeutrinoPhotonInteraction_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"NeutrinoPhotonInteraction : p.nupropa::NeutrinoPhotonInteraction", &NeutrinoPhotonInteraction___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__nupropa__NeutrinoPhotonInteraction_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__nupropa__NeutrinoPhotonInteraction_methods[] = {
  { "setPhotonField", _wrap_NeutrinoPhotonInteraction_setPhotonField, METH_O, "setPhotonField(NeutrinoPhotonInteraction self, PhotonFieldRefPtr photonField)" },
  { "setNeutrinoMixing", _wrap_NeutrinoPhotonInteraction_setNeutrinoMixing, METH_O, "setNeutrinoMixing(NeutrinoPhotonInteraction self, crpropa::ref_ptr< NeutrinoMixing > neutrinoMixing)" },
  { "setHaveSecondaries", _wrap_NeutrinoPhotonInteraction_setHaveSecondaries, METH_O, "setHaveSecondaries(NeutrinoPhotonInteraction self, bool haveSecondaries)" },
  { "setLimit", _wrap_NeutrinoPhotonInteraction_setLimit, METH_O, "setLimit(NeutrinoPhotonInteraction self, double limit)" },
  { "setInteractionTag", _wrap_NeutrinoPhotonInteraction_setInteractionTag, METH_O, "setInteractionTag(NeutrinoPhotonInteraction self, string tag)" },
  { "getInteractionTag", _wrap_NeutrinoPhotonInteraction_getInteractionTag, METH_NOARGS, "getInteractionTag(NeutrinoPhotonInteraction self) -> string" },
  { "loadRateFile", _wrap_NeutrinoPhotonInteraction_loadRateFile, METH_O, "loadRateFile(NeutrinoPhotonInteraction self, string fileName)" },
  { "loadCumulativeRateFile", _wrap_NeutrinoPhotonInteraction_loadCumulativeRateFile, METH_O, "loadCumulativeRateFile(NeutrinoPhotonInteraction self, string fileName)" },
  { "initRate", _wrap_NeutrinoPhotonInteraction_initRate, METH_O, "initRate(NeutrinoPhotonInteraction self, string filePath)" },
  { "initCumulativeRate", _wrap_NeutrinoPhotonInteraction_initCumulativeRate, METH_O, "initCumulativeRate(NeutrinoPhotonInteraction self, string filePath)" },
  { "setRelativisticInteraction", _wrap_NeutrinoPhotonInteraction_setRelativisticInteraction, METH_VARARGS, "setRelativisticInteraction(NeutrinoPhotonInteraction self, double m1, double E, double s)" },
  { "fromIDtoChannel", _wrap_NeutrinoPhotonInteraction_fromIDtoChannel, METH_O, "fromIDtoChannel(NeutrinoPhotonInteraction self, int ID) -> int" },
  { "interactionIndex", _wrap_NeutrinoPhotonInteraction_interactionIndex, METH_VARARGS, "interactionIndex(NeutrinoPhotonInteraction self, int ID, double mass) -> int" },
  { "process", _wrap_NeutrinoPhotonInteraction_process, METH_O, "process(NeutrinoPhotonInteraction self, Candidate candidate)" },
  { "performInteraction", _wrap_NeutrinoPhotonInteraction_performInteraction, METH_VARARGS, "performInteraction(NeutrinoPhotonInteraction self, Candidate candidate, int index, double mass)" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__nupropa__NeutrinoPhotonInteraction_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.NeutrinoPhotonInteraction",      /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_NeutrinoPhotonInteraction_destructor_closure,    /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__nupropa__NeutrinoPhotonInteraction_type.as_number,/* tp_as_number */
    &SwigPyBuiltin__nupropa__NeutrinoPhotonInteraction_type.as_sequence,/* tp_as_sequence */
    &SwigPyBuiltin__nupropa__NeutrinoPhotonInteraction_type.as_mapping,/* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__nupropa__NeutrinoPhotonInteraction_type.as_buffer,/* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "nupropa::NeutrinoPhotonInteraction",     /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__nupropa__NeutrinoPhotonInteraction_richcompare,/* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__nupropa__NeutrinoPhotonInteraction_methods,    /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__nupropa__NeutrinoPhotonInteraction_getset,     /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_NeutrinoPhotonInteraction,      /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__nupropa__NeutrinoPhotonInteraction_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__nupropa__NeutrinoPhotonInteraction_type};

static SwigPyGetSet Channels___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__nupropa__Channels_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"\n"
		"Channels : p.nupropa::Channels\n"
		"Channels : \n"
		"", &Channels___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__nupropa__Channels_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__nupropa__Channels_methods[] = {
  { "getInteractionChannels", _wrap_Channels_getInteractionChannels, METH_NOARGS, "getInteractionChannels(Channels self) -> std::vector< std::string,std::allocator< std::string > >" },
  { "getActiveChannels", _wrap_Channels_getActiveChannels, METH_NOARGS, "getActiveChannels(Channels self) -> std::vector< bool,std::allocator< bool > >" },
  { "getInteractionFolderPath", _wrap_Channels_getInteractionFolderPath, METH_NOARGS, "getInteractionFolderPath(Channels self) -> string" },
  { "getProductsID", _wrap_Channels_getProductsID, METH_NOARGS, "getProductsID(Channels self) -> std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >" },
  { "getChannelIndex", _wrap_Channels_getChannelIndex, METH_O, "getChannelIndex(Channels self, string interactioChannel) -> int" },
  { "loadInteractionChannels", _wrap_Channels_loadInteractionChannels, METH_O, "loadInteractionChannels(Channels self, string interactionFolder)" },
  { "loadProductsID", _wrap_Channels_loadProductsID, METH_O, "loadProductsID(Channels self, string interactionFolder)" },
  { "activeAll", _wrap_Channels_activeAll, METH_NOARGS, "activeAll(Channels self)" },
  { "setInteractionChannels", _wrap_Channels_setInteractionChannels, METH_O, "setInteractionChannels(Channels self, std::vector< std::string,std::allocator< std::string > > interactionChannels)" },
  { "setChannelsActive", _wrap_Channels_setChannelsActive, METH_O, "setChannelsActive(Channels self, std::vector< bool,std::allocator< bool > > active)" },
  { "setInteractionFolderPath", _wrap_Channels_setInteractionFolderPath, METH_O, "setInteractionFolderPath(Channels self, string interactionFolderPath)" },
  { "setProductsID", _wrap_Channels_setProductsID, METH_O, "setProductsID(Channels self, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > productsID)" },
  { "setInactiveChannel", _wrap_Channels_setInactiveChannel, METH_O, "setInactiveChannel(Channels self, string interactionChannel)" },
  { "__disown__", Swig::Director::swig_pyobj_disown< nupropa::Channels >, METH_NOARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__nupropa__Channels_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.Channels",                       /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_Channels_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__nupropa__Channels_type.as_number,             /* tp_as_number */
    &SwigPyBuiltin__nupropa__Channels_type.as_sequence,           /* tp_as_sequence */
    &SwigPyBuiltin__nupropa__Channels_type.as_mapping,            /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__nupropa__Channels_type.as_buffer,             /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "nupropa::Channels",                      /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__nupropa__Channels_richcompare,                 /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__nupropa__Channels_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__nupropa__Channels_getset,  /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_Channels,                       /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__nupropa__Channels_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__nupropa__Channels_type};

static SwigPyGetSet ChannelsBundle___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__nupropa__ChannelsBundle_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"ChannelsBundle : p.nupropa::ChannelsBundle", &ChannelsBundle___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__nupropa__ChannelsBundle_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__nupropa__ChannelsBundle_methods[] = {
  { "loadRateFile", _wrap_ChannelsBundle_loadRateFile, METH_O, "loadRateFile(ChannelsBundle self, string filename)" },
  { "loadCumulativeRateFile", _wrap_ChannelsBundle_loadCumulativeRateFile, METH_O, "loadCumulativeRateFile(ChannelsBundle self, string filename)" },
  { "loadProductsChannelId", _wrap_ChannelsBundle_loadProductsChannelId, METH_O, "loadProductsChannelId(ChannelsBundle self, string filename)" },
  { "findClosestRedshift", _wrap_ChannelsBundle_findClosestRedshift, METH_VARARGS, "findClosestRedshift(ChannelsBundle self, double z, std::vector< double,std::allocator< double > > const & redshifts) -> double" },
  { "selectIndexes", _wrap_ChannelsBundle_selectIndexes, METH_VARARGS, "selectIndexes(ChannelsBundle self, string massCombRedshift, int ID, int IDbkg)" },
  { "getAlphasBetas", _wrap_ChannelsBundle_getAlphasBetas, METH_VARARGS, "getAlphasBetas(ChannelsBundle self, int ID, int IDbkg) -> std::vector< std::string,std::allocator< std::string > >" },
  { "selectProdChanId", _wrap_ChannelsBundle_selectProdChanId, METH_NOARGS, "selectProdChanId(ChannelsBundle self) -> std::vector< int,std::allocator< int > >" },
  { "selectedRates", _wrap_ChannelsBundle_selectedRates, METH_O, "selectedRates(ChannelsBundle self, std::vector< int,std::allocator< int > > const & indexes) -> std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >" },
  { "selectedEnergies", _wrap_ChannelsBundle_selectedEnergies, METH_O, "selectedEnergies(ChannelsBundle self, std::vector< int,std::allocator< int > > const & indexes) -> std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >" },
  { "getRate", _wrap_ChannelsBundle_getRate, METH_VARARGS, "getRate(ChannelsBundle self, int ID, int IDBkg, string massComb, double z, double E) -> double" },
  { "fillTableZeros", _wrap_ChannelsBundle_fillTableZeros, METH_VARARGS, "fillTableZeros(ChannelsBundle self, std::vector< double,std::allocator< double > > table, size_t size) -> std::vector< double,std::allocator< double > >" },
  { "computeInteractionProbabilities", _wrap_ChannelsBundle_computeInteractionProbabilities, METH_O, "computeInteractionProbabilities(ChannelsBundle self, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > rates)" },
  { "selectIndex", _wrap_ChannelsBundle_selectIndex, METH_VARARGS, "selectIndex(ChannelsBundle self, std::vector< double,std::allocator< double > > tabEnergy, double E)" },
  { "selectCDF", _wrap_ChannelsBundle_selectCDF, METH_NOARGS, "selectCDF(ChannelsBundle self) -> std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >" },
  { "selects", _wrap_ChannelsBundle_selects, METH_NOARGS, "selects(ChannelsBundle self) -> std::vector< double,std::allocator< double > >" },
  { "selectE", _wrap_ChannelsBundle_selectE, METH_NOARGS, "selectE(ChannelsBundle self) -> std::vector< double,std::allocator< double > >" },
  { "getSelectedIndexes", _wrap_ChannelsBundle_getSelectedIndexes, METH_NOARGS, "getSelectedIndexes(ChannelsBundle self) -> std::vector< int,std::allocator< int > >" },
  { "getSelectedIndex", _wrap_ChannelsBundle_getSelectedIndex, METH_NOARGS, "getSelectedIndex(ChannelsBundle self) -> int" },
  { "__disown__", Swig::Director::swig_pyobj_disown< nupropa::ChannelsBundle >, METH_NOARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__nupropa__ChannelsBundle_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.ChannelsBundle",                 /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_ChannelsBundle_destructor_closure,               /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__nupropa__ChannelsBundle_type.as_number,       /* tp_as_number */
    &SwigPyBuiltin__nupropa__ChannelsBundle_type.as_sequence,     /* tp_as_sequence */
    &SwigPyBuiltin__nupropa__ChannelsBundle_type.as_mapping,      /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__nupropa__ChannelsBundle_type.as_buffer,       /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "nupropa::ChannelsBundle",                /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__nupropa__ChannelsBundle_richcompare,           /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__nupropa__ChannelsBundle_methods,               /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__nupropa__ChannelsBundle_getset,                /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_ChannelsBundle,                 /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__nupropa__ChannelsBundle_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__nupropa__ChannelsBundle_type};

static SwigPyGetSet NeutrinoField___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet NeutrinoField_isRedshiftDependent_getset = { _wrap_NeutrinoField_isRedshiftDependent_get, _wrap_NeutrinoField_isRedshiftDependent_set };
static SwigPyGetSet NeutrinoField_mass_getset = { _wrap_NeutrinoField_mass_get, _wrap_NeutrinoField_mass_set };
static SwigPyGetSet NeutrinoField_fieldName_getset = { _wrap_NeutrinoField_fieldName_get, _wrap_NeutrinoField_fieldName_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__nupropa__NeutrinoField_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"NeutrinoField : p.nupropa::NeutrinoField", &NeutrinoField___dict___getset },
    { (char *)"isRedshiftDependent", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"isRedshiftDependent : bool", &NeutrinoField_isRedshiftDependent_getset },
    { (char *)"mass", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"mass : double", &NeutrinoField_mass_getset },
    { (char *)"fieldName", SwigPyBuiltin_FunpackGetterClosure, SwigPyBuiltin_FunpackSetterClosure, (char *)"fieldName : std::string", &NeutrinoField_fieldName_getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__nupropa__NeutrinoField_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__nupropa__NeutrinoField_methods[] = {
  { "getNeutrinoDensity", _wrap_NeutrinoField_getNeutrinoDensity, METH_VARARGS, "getNeutrinoDensity(NeutrinoField self, double eNeutrino, double z=0.) -> double" },
  { "getMinimumNeutrinoEnergy", _wrap_NeutrinoField_getMinimumNeutrinoEnergy, METH_O, "getMinimumNeutrinoEnergy(NeutrinoField self, double z) -> double" },
  { "getMaximumNeutrinoEnergy", _wrap_NeutrinoField_getMaximumNeutrinoEnergy, METH_O, "getMaximumNeutrinoEnergy(NeutrinoField self, double z) -> double" },
  { "getFieldName", _wrap_NeutrinoField_getFieldName, METH_NOARGS, "getFieldName(NeutrinoField self) -> string" },
  { "getRedshiftScaling", _wrap_NeutrinoField_getRedshiftScaling, METH_O, "getRedshiftScaling(NeutrinoField self, double z) -> double" },
  { "hasRedshiftDependence", _wrap_NeutrinoField_hasRedshiftDependence, METH_NOARGS, "hasRedshiftDependence(NeutrinoField self) -> bool" },
  { "setFieldName", _wrap_NeutrinoField_setFieldName, METH_O, "setFieldName(NeutrinoField self, string fieldName)" },
  { "getMass", _wrap_NeutrinoField_getMass, METH_NOARGS, "getMass(NeutrinoField self) -> int" },
  { "__disown__", Swig::Director::swig_pyobj_disown< nupropa::NeutrinoField >, METH_NOARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__nupropa__NeutrinoField_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.NeutrinoField",                  /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_NeutrinoField_destructor_closure,                /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__nupropa__NeutrinoField_type.as_number,        /* tp_as_number */
    &SwigPyBuiltin__nupropa__NeutrinoField_type.as_sequence,      /* tp_as_sequence */
    &SwigPyBuiltin__nupropa__NeutrinoField_type.as_mapping,       /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__nupropa__NeutrinoField_type.as_buffer,        /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "nupropa::NeutrinoField",                 /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__nupropa__NeutrinoField_richcompare,            /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__nupropa__NeutrinoField_methods,                /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__nupropa__NeutrinoField_getset,                 /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_NeutrinoField,                  /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__nupropa__NeutrinoField_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__nupropa__NeutrinoField_type};

static SwigPyGetSet BlackbodyNeutrinoField___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__nupropa__BlackbodyNeutrinoField_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"BlackbodyNeutrinoField : p.nupropa::BlackbodyNeutrinoField", &BlackbodyNeutrinoField___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__nupropa__BlackbodyNeutrinoField_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__nupropa__BlackbodyNeutrinoField_methods[] = {
  { "getNeutrinoDensity", _wrap_BlackbodyNeutrinoField_getNeutrinoDensity, METH_VARARGS, "getNeutrinoDensity(BlackbodyNeutrinoField self, double eNeutrino, double z=0.) -> double" },
  { "getMinimumNeutrinoEnergy", _wrap_BlackbodyNeutrinoField_getMinimumNeutrinoEnergy, METH_O, "getMinimumNeutrinoEnergy(BlackbodyNeutrinoField self, double z) -> double" },
  { "getMaximumNeutrinoEnergy", _wrap_BlackbodyNeutrinoField_getMaximumNeutrinoEnergy, METH_O, "getMaximumNeutrinoEnergy(BlackbodyNeutrinoField self, double z) -> double" },
  { "setQuantile", _wrap_BlackbodyNeutrinoField_setQuantile, METH_O, "setQuantile(BlackbodyNeutrinoField self, double q)" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__nupropa__BlackbodyNeutrinoField_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.BlackbodyNeutrinoField",         /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_BlackbodyNeutrinoField_destructor_closure,       /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__nupropa__BlackbodyNeutrinoField_type.as_number,/* tp_as_number */
    &SwigPyBuiltin__nupropa__BlackbodyNeutrinoField_type.as_sequence,/* tp_as_sequence */
    &SwigPyBuiltin__nupropa__BlackbodyNeutrinoField_type.as_mapping,/* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__nupropa__BlackbodyNeutrinoField_type.as_buffer,/* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "nupropa::BlackbodyNeutrinoField",        /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__nupropa__BlackbodyNeutrinoField_richcompare,   /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__nupropa__BlackbodyNeutrinoField_methods,       /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__nupropa__BlackbodyNeutrinoField_getset,        /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_BlackbodyNeutrinoField,         /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__nupropa__BlackbodyNeutrinoField_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__nupropa__BlackbodyNeutrinoField_type};

static SwigPyGetSet CnuBm1___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__nupropa__CnuBm1_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"CnuBm1 : p.nupropa::CnuBm1", &CnuBm1___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__nupropa__CnuBm1_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__nupropa__CnuBm1_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__nupropa__CnuBm1_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.CnuBm1",                         /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_CnuBm1_destructor_closure,   /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__nupropa__CnuBm1_type.as_number,               /* tp_as_number */
    &SwigPyBuiltin__nupropa__CnuBm1_type.as_sequence,             /* tp_as_sequence */
    &SwigPyBuiltin__nupropa__CnuBm1_type.as_mapping,              /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__nupropa__CnuBm1_type.as_buffer,               /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "nupropa::CnuBm1",                        /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__nupropa__CnuBm1_richcompare,                   /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__nupropa__CnuBm1_methods,   /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__nupropa__CnuBm1_getset,    /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_CnuBm1,                         /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__nupropa__CnuBm1_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__nupropa__CnuBm1_type};

static SwigPyGetSet CnuBm2___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__nupropa__CnuBm2_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"CnuBm2 : p.nupropa::CnuBm2", &CnuBm2___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__nupropa__CnuBm2_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__nupropa__CnuBm2_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__nupropa__CnuBm2_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.CnuBm2",                         /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_CnuBm2_destructor_closure,   /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__nupropa__CnuBm2_type.as_number,               /* tp_as_number */
    &SwigPyBuiltin__nupropa__CnuBm2_type.as_sequence,             /* tp_as_sequence */
    &SwigPyBuiltin__nupropa__CnuBm2_type.as_mapping,              /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__nupropa__CnuBm2_type.as_buffer,               /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "nupropa::CnuBm2",                        /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__nupropa__CnuBm2_richcompare,                   /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__nupropa__CnuBm2_methods,   /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__nupropa__CnuBm2_getset,    /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_CnuBm2,                         /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__nupropa__CnuBm2_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__nupropa__CnuBm2_type};

static SwigPyGetSet CnuBm3___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__nupropa__CnuBm3_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"CnuBm3 : p.nupropa::CnuBm3", &CnuBm3___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__nupropa__CnuBm3_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__nupropa__CnuBm3_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__nupropa__CnuBm3_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.CnuBm3",                         /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_CnuBm3_destructor_closure,   /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__nupropa__CnuBm3_type.as_number,               /* tp_as_number */
    &SwigPyBuiltin__nupropa__CnuBm3_type.as_sequence,             /* tp_as_sequence */
    &SwigPyBuiltin__nupropa__CnuBm3_type.as_mapping,              /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__nupropa__CnuBm3_type.as_buffer,               /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "nupropa::CnuBm3",                        /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__nupropa__CnuBm3_richcompare,                   /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__nupropa__CnuBm3_methods,   /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__nupropa__CnuBm3_getset,    /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_CnuBm3,                         /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__nupropa__CnuBm3_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__nupropa__CnuBm3_type};

static SwigPyGetSet RelativisticInteraction___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__nupropa__RelativisticInteraction_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"\n"
		"RelativisticInteraction : p.nupropa::RelativisticInteraction\n"
		"RelativisticInteraction : \n"
		"RelativisticInteraction : \n"
		"", &RelativisticInteraction___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__nupropa__RelativisticInteraction_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__nupropa__RelativisticInteraction_methods[] = {
  { "setBetaCom", _wrap_RelativisticInteraction_setBetaCom, METH_VARARGS, "setBetaCom(RelativisticInteraction self, double E, double m1, double m2, double s)" },
  { "setBetaPhotonCom", _wrap_RelativisticInteraction_setBetaPhotonCom, METH_VARARGS, "setBetaPhotonCom(RelativisticInteraction self, double E, double m1, double s)" },
  { "setGammaCom", _wrap_RelativisticInteraction_setGammaCom, METH_VARARGS, "setGammaCom(RelativisticInteraction self, double E, double s)" },
  { "getBetaCom", _wrap_RelativisticInteraction_getBetaCom, METH_NOARGS, "getBetaCom(RelativisticInteraction self) -> double" },
  { "getGammaCom", _wrap_RelativisticInteraction_getGammaCom, METH_NOARGS, "getGammaCom(RelativisticInteraction self) -> double" },
  { "computeProductsMomentumCom", _wrap_RelativisticInteraction_computeProductsMomentumCom, METH_VARARGS, "computeProductsMomentumCom(RelativisticInteraction self, double s, double m3, double m4) -> double" },
  { "getProductEnergiesLab", _wrap_RelativisticInteraction_getProductEnergiesLab, METH_VARARGS, "getProductEnergiesLab(RelativisticInteraction self, double s, double costh13_com, double m3, double m4) -> std::vector< double,std::allocator< double > >" },
  { "__disown__", Swig::Director::swig_pyobj_disown< nupropa::RelativisticInteraction >, METH_NOARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__nupropa__RelativisticInteraction_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.RelativisticInteraction",        /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_RelativisticInteraction_destructor_closure,      /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__nupropa__RelativisticInteraction_type.as_number,/* tp_as_number */
    &SwigPyBuiltin__nupropa__RelativisticInteraction_type.as_sequence,/* tp_as_sequence */
    &SwigPyBuiltin__nupropa__RelativisticInteraction_type.as_mapping,/* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__nupropa__RelativisticInteraction_type.as_buffer,/* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "nupropa::RelativisticInteraction",       /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__nupropa__RelativisticInteraction_richcompare,  /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__nupropa__RelativisticInteraction_methods,      /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__nupropa__RelativisticInteraction_getset,       /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_RelativisticInteraction,        /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__nupropa__RelativisticInteraction_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__nupropa__RelativisticInteraction_type};

static SwigPyGetSet ParticleData___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__nupropa__ParticleData_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"\n"
		"ParticleData : p.nupropa::ParticleData\n"
		"ParticleData : \n"
		"", &ParticleData___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__nupropa__ParticleData_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__nupropa__ParticleData_methods[] = {
  { "setParticleIDmass", _wrap_ParticleData_setParticleIDmass, METH_O, "setParticleIDmass(ParticleData self, std::unordered_map< int,double > IDmass)" },
  { "getParticleMass", _wrap_ParticleData_getParticleMass, METH_O, "getParticleMass(ParticleData self, int ID) -> double" },
  { "addNewParticle", _wrap_ParticleData_addNewParticle, METH_VARARGS, "addNewParticle(ParticleData self, int ID, double mass)" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__nupropa__ParticleData_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.ParticleData",                   /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_ParticleData_destructor_closure,                 /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__nupropa__ParticleData_type.as_number,         /* tp_as_number */
    &SwigPyBuiltin__nupropa__ParticleData_type.as_sequence,       /* tp_as_sequence */
    &SwigPyBuiltin__nupropa__ParticleData_type.as_mapping,        /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__nupropa__ParticleData_type.as_buffer,         /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "nupropa::ParticleData",                  /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__nupropa__ParticleData_richcompare,             /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__nupropa__ParticleData_methods,                 /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__nupropa__ParticleData_getset,                  /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_ParticleData,                   /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__nupropa__ParticleData_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__nupropa__ParticleData_type};

static SwigPyGetSet NeutrinoMixing___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__nupropa__NeutrinoMixing_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"\n"
		"NeutrinoMixing : p.nupropa::NeutrinoMixing\n"
		"NeutrinoMixing : \n"
		"", &NeutrinoMixing___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__nupropa__NeutrinoMixing_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__nupropa__NeutrinoMixing_methods[] = {
  { "setTheta", _wrap_NeutrinoMixing_setTheta, METH_VARARGS, "setTheta(NeutrinoMixing self, double theta13, double theta23, double theta12)" },
  { "setDelta", _wrap_NeutrinoMixing_setDelta, METH_O, "setDelta(NeutrinoMixing self, double delta)" },
  { "setMasses", _wrap_NeutrinoMixing_setMasses, METH_VARARGS, "setMasses(NeutrinoMixing self, double mass1, double mass2, double mass3)" },
  { "buildUpmnsMatrix", _wrap_NeutrinoMixing_buildUpmnsMatrix, METH_NOARGS, "buildUpmnsMatrix(NeutrinoMixing self)" },
  { "getUpmnsMatrix", _wrap_NeutrinoMixing_getUpmnsMatrix, METH_NOARGS, "getUpmnsMatrix(NeutrinoMixing self) -> Eigen::Matrix3cd" },
  { "getFlavourMassProbabilities", _wrap_NeutrinoMixing_getFlavourMassProbabilities, METH_NOARGS, "getFlavourMassProbabilities(NeutrinoMixing self) -> Eigen::Matrix3cd" },
  { "IdToFlavourIndex", _wrap_NeutrinoMixing_IdToFlavourIndex, METH_O, "IdToFlavourIndex(NeutrinoMixing self, int ID) -> int" },
  { "flavourIndexToId", _wrap_NeutrinoMixing_flavourIndexToId, METH_O, "flavourIndexToId(NeutrinoMixing self, int index) -> int" },
  { "massIndexToMass", _wrap_NeutrinoMixing_massIndexToMass, METH_O, "massIndexToMass(NeutrinoMixing self, int index) -> double" },
  { "massToIndexMass", _wrap_NeutrinoMixing_massToIndexMass, METH_O, "massToIndexMass(NeutrinoMixing self, double mass) -> int" },
  { "fromFlavourToMass", _wrap_NeutrinoMixing_fromFlavourToMass, METH_O, "fromFlavourToMass(NeutrinoMixing self, int ID) -> double" },
  { "fromMassToFlavour", _wrap_NeutrinoMixing_fromMassToFlavour, METH_O, "fromMassToFlavour(NeutrinoMixing self, double mass) -> int" },
  { "precomputeOscillationTerms", _wrap_NeutrinoMixing_precomputeOscillationTerms, METH_NOARGS, "precomputeOscillationTerms(NeutrinoMixing self)" },
  { "oscillateFlavour", _wrap_NeutrinoMixing_oscillateFlavour, METH_VARARGS, "oscillateFlavour(NeutrinoMixing self, int ID, double E, double L) -> int" },
  { "__disown__", Swig::Director::swig_pyobj_disown< nupropa::NeutrinoMixing >, METH_NOARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__nupropa__NeutrinoMixing_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.NeutrinoMixing",                 /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_NeutrinoMixing_destructor_closure,               /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__nupropa__NeutrinoMixing_type.as_number,       /* tp_as_number */
    &SwigPyBuiltin__nupropa__NeutrinoMixing_type.as_sequence,     /* tp_as_sequence */
    &SwigPyBuiltin__nupropa__NeutrinoMixing_type.as_mapping,      /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__nupropa__NeutrinoMixing_type.as_buffer,       /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "nupropa::NeutrinoMixing",                /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__nupropa__NeutrinoMixing_richcompare,           /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__nupropa__NeutrinoMixing_methods,               /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__nupropa__NeutrinoMixing_getset,                /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_NeutrinoMixing,                 /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__nupropa__NeutrinoMixing_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__nupropa__NeutrinoMixing_type};

static SwigPyGetSet NeutrinoOscillation___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__nupropa__NeutrinoOscillation_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"\n"
		"NeutrinoOscillation : p.nupropa::NeutrinoOscillation\n"
		"NeutrinoOscillation : \n"
		"", &NeutrinoOscillation___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__nupropa__NeutrinoOscillation_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__nupropa__NeutrinoOscillation_methods[] = {
  { "setNeutrinoMixing", _wrap_NeutrinoOscillation_setNeutrinoMixing, METH_O, "setNeutrinoMixing(NeutrinoOscillation self, NeutrinoMixingRefPtr neutrinoMixing)" },
  { "process", _wrap_NeutrinoOscillation_process, METH_O, "process(NeutrinoOscillation self, Candidate candidate)" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__nupropa__NeutrinoOscillation_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "nupropa.NeutrinoOscillation",            /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_NeutrinoOscillation_destructor_closure,          /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__nupropa__NeutrinoOscillation_type.as_number,  /* tp_as_number */
    &SwigPyBuiltin__nupropa__NeutrinoOscillation_type.as_sequence,/* tp_as_sequence */
    &SwigPyBuiltin__nupropa__NeutrinoOscillation_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__nupropa__NeutrinoOscillation_type.as_buffer,  /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "nupropa::NeutrinoOscillation",           /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__nupropa__NeutrinoOscillation_richcompare,      /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__nupropa__NeutrinoOscillation_methods,          /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__nupropa__NeutrinoOscillation_getset,           /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_NeutrinoOscillation,            /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__nupropa__NeutrinoOscillation_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__nupropa__NeutrinoOscillation_type};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_crpropa__AbstractAccelerationModuleTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::AbstractAccelerationModule *) x));
}
static void *_p_crpropa__AbstractConditionTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::AbstractCondition *) x));
}
static void *_p_crpropa__AdiabaticCoolingTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::AdiabaticCooling *) x));
}
static void *_p_crpropa__CandidateSplittingTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::CandidateSplitting *) x));
}
static void *_p_crpropa__ConstantMomentumDiffusionTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ConstantMomentumDiffusion *) x));
}
static void *_p_crpropa__CubicBoundaryTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::CubicBoundary *) x));
}
static void *_p_crpropa__CylindricalBoundaryTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::CylindricalBoundary *) x));
}
static void *_p_crpropa__DeactivationTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::Deactivation *) x));
}
static void *_p_crpropa__DetectionLengthTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::DetectionLength *) x));
}
static void *_p_crpropa__DiffusionSDETo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::DiffusionSDE *) x));
}
static void *_p_crpropa__DirectedFlowScatteringTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractAccelerationModule *) ((crpropa::DirectedFlowScattering *) x));
}
static void *_p_crpropa__EMDoublePairProductionTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::EMDoublePairProduction *) x));
}
static void *_p_crpropa__EMInverseComptonScatteringTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::EMInverseComptonScattering *) x));
}
static void *_p_crpropa__EMPairProductionTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::EMPairProduction *) x));
}
static void *_p_crpropa__EMTripletPairProductionTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::EMTripletPairProduction *) x));
}
static void *_p_crpropa__ElasticScatteringTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ElasticScattering *) x));
}
static void *_p_crpropa__ElectronPairProductionTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ElectronPairProduction *) x));
}
static void *_p_crpropa__EllipsoidalBoundaryTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::EllipsoidalBoundary *) x));
}
static void *_p_crpropa__EmissionMapFillerTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::EmissionMapFiller *) x));
}
static void *_p_crpropa__FutureRedshiftTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::FutureRedshift *) x));
}
static void *_p_crpropa__MaximumTrajectoryLengthTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::MaximumTrajectoryLength *) x));
}
static void *_p_crpropa__MinimumChargeNumberTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::MinimumChargeNumber *) x));
}
static void *_p_crpropa__MinimumEnergyTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::MinimumEnergy *) x));
}
static void *_p_crpropa__MinimumEnergyPerParticleIdTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::MinimumEnergyPerParticleId *) x));
}
static void *_p_crpropa__MinimumRedshiftTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::MinimumRedshift *) x));
}
static void *_p_crpropa__MinimumRigidityTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::MinimumRigidity *) x));
}
static void *_p_crpropa__ModuleListTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ModuleList *) x));
}
static void *_p_crpropa__ModuleListRunnerTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ModuleListRunner *) x));
}
static void *_p_crpropa__NuclearDecayTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::NuclearDecay *) x));
}
static void *_p_crpropa__ObserverTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::Observer *) x));
}
static void *_p_crpropa__OutputTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::Output *) x));
}
static void *_p_crpropa__ParticleCollectorTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ParticleCollector *) x));
}
static void *_p_crpropa__ParticleFilterTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::ParticleFilter *) x));
}
static void *_p_crpropa__ParticleSplittingTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ParticleSplitting *) x));
}
static void *_p_crpropa__PerformanceModuleTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::PerformanceModule *) x));
}
static void *_p_crpropa__PeriodicBoxTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::PeriodicBox *) x));
}
static void *_p_crpropa__PhotoDisintegrationTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::PhotoDisintegration *) x));
}
static void *_p_crpropa__PhotoPionProductionTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::PhotoPionProduction *) x));
}
static void *_p_crpropa__PhotonOutput1DTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::PhotonOutput1D *) x));
}
static void *_p_crpropa__PropagationBPTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::PropagationBP *) x));
}
static void *_p_crpropa__PropagationCKTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::PropagationCK *) x));
}
static void *_p_crpropa__RedshiftTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::Redshift *) x));
}
static void *_p_crpropa__ReflectiveBoxTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ReflectiveBox *) x));
}
static void *_p_crpropa__ReflectiveShellTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ReflectiveShell *) x));
}
static void *_p_crpropa__RestrictToRegionTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::RestrictToRegion *) x));
}
static void *_p_crpropa__SecondOrderFermiTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractAccelerationModule *) ((crpropa::SecondOrderFermi *) x));
}
static void *_p_crpropa__ShellOutputTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ShellOutput *) x));
}
static void *_p_crpropa__ShellOutput1DTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ShellOutput1D *) x));
}
static void *_p_crpropa__ShellPropertyOutputTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ShellPropertyOutput *) x));
}
static void *_p_crpropa__SimplePropagationTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::SimplePropagation *) x));
}
static void *_p_crpropa__SphericalBoundaryTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::SphericalBoundary *) x));
}
static void *_p_crpropa__SynchrotronRadiationTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::SynchrotronRadiation *) x));
}
static void *_p_crpropa__TextOutputTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::Output *) ((crpropa::TextOutput *) x));
}
static void *_p_nupropa__NeutrinoAntineutrinoInteractionTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((nupropa::NeutrinoAntineutrinoInteraction *) x));
}
static void *_p_nupropa__NeutrinoNeutrinoInteractionTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((nupropa::NeutrinoNeutrinoInteraction *) x));
}
static void *_p_nupropa__NeutrinoOscillationTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((nupropa::NeutrinoOscillation *) x));
}
static void *_p_nupropa__NeutrinoPhotonInteractionTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((nupropa::NeutrinoPhotonInteraction *) x));
}
static void *_p_crpropa__AbstractAccelerationModuleTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::AbstractAccelerationModule *) x));
}
static void *_p_crpropa__AbstractConditionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::AbstractCondition *) x));
}
static void *_p_crpropa__AdiabaticCoolingTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::AdiabaticCooling *) x));
}
static void *_p_crpropa__AdvectionFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::AdvectionField *) x));
}
static void *_p_crpropa__AdvectionFieldListTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::AdvectionField *) ((crpropa::AdvectionFieldList *) x));
}
static void *_p_crpropa__ArchimedeanSpiralFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::ArchimedeanSpiralField *) x));
}
static void *_p_crpropa__BlackbodyPhotonFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *) ((crpropa::BlackbodyPhotonField *) x));
}
static void *_p_crpropa__CMBTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::BlackbodyPhotonField *) ((crpropa::CMB *) x));
}
static void *_p_crpropa__CMZFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::CMZField *) x));
}
static void *_p_crpropa__CandidateTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::Candidate *) x));
}
static void *_p_crpropa__CandidateSplittingTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::CandidateSplitting *) x));
}
static void *_p_crpropa__ConstantDensityTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Density *) ((crpropa::ConstantDensity *) x));
}
static void *_p_crpropa__ConstantMomentumDiffusionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ConstantMomentumDiffusion *) x));
}
static void *_p_crpropa__ConstantSphericalAdvectionFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::AdvectionField *) ((crpropa::ConstantSphericalAdvectionField *) x));
}
static void *_p_crpropa__CordesTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Density *) ((crpropa::Cordes *) x));
}
static void *_p_crpropa__CubicBoundaryTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::CubicBoundary *) x));
}
static void *_p_crpropa__CylindricalBoundaryTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::CylindricalBoundary *) x));
}
static void *_p_crpropa__CylindricalProjectionMapTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::CylindricalProjectionMap *) x));
}
static void *_p_crpropa__DeactivationTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::Deactivation *) x));
}
static void *_p_crpropa__DensityTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::Density *) x));
}
static void *_p_crpropa__DensityGridTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Density *) ((crpropa::DensityGrid *) x));
}
static void *_p_crpropa__DensityListTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Density *) ((crpropa::DensityList *) x));
}
static void *_p_crpropa__DetectionLengthTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::DetectionLength *) x));
}
static void *_p_crpropa__DiffusionSDETo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::DiffusionSDE *) x));
}
static void *_p_crpropa__DirectedFlowOfScatterCentersTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::StepLengthModifier *) ((crpropa::DirectedFlowOfScatterCenters *) x));
}
static void *_p_crpropa__DirectedFlowScatteringTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractAccelerationModule *) ((crpropa::DirectedFlowScattering *) x));
}
static void *_p_crpropa__EMDoublePairProductionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::EMDoublePairProduction *) x));
}
static void *_p_crpropa__EMInverseComptonScatteringTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::EMInverseComptonScattering *) x));
}
static void *_p_crpropa__EMPairProductionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::EMPairProduction *) x));
}
static void *_p_crpropa__EMTripletPairProductionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::EMTripletPairProduction *) x));
}
static void *_p_crpropa__ElasticScatteringTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ElasticScattering *) x));
}
static void *_p_crpropa__ElectronPairProductionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ElectronPairProduction *) x));
}
static void *_p_crpropa__EllipsoidalBoundaryTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::EllipsoidalBoundary *) x));
}
static void *_p_crpropa__EmissionMapTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::EmissionMap *) x));
}
static void *_p_crpropa__EmissionMapFillerTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::EmissionMapFiller *) x));
}
static void *_p_crpropa__FerriereTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Density *) ((crpropa::Ferriere *) x));
}
static void *_p_crpropa__FutureRedshiftTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::FutureRedshift *) x));
}
static void *_p_crpropa__GridT_crpropa__Vector3T_double_t_tTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::Grid< crpropa::Vector3< double > > *) x));
}
static void *_p_crpropa__GridT_crpropa__Vector3T_float_t_tTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::Grid< crpropa::Vector3< float > > *) x));
}
static void *_p_crpropa__GridT_double_tTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::Grid< double > *) x));
}
static void *_p_crpropa__GridT_float_tTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::Grid< float > *) x));
}
static void *_p_crpropa__GridPropertiesTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::GridProperties *) x));
}
static void *_p_crpropa__IRB_Dominguez11To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Dominguez11 *) x));
}
static void *_p_crpropa__IRB_Finke10To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Finke10 *) x));
}
static void *_p_crpropa__IRB_Finke22To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Finke22 *) x));
}
static void *_p_crpropa__IRB_Franceschini08To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Franceschini08 *) x));
}
static void *_p_crpropa__IRB_Gilmore12To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Gilmore12 *) x));
}
static void *_p_crpropa__IRB_Kneiske04To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Kneiske04 *) x));
}
static void *_p_crpropa__IRB_Saldana21To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Saldana21 *) x));
}
static void *_p_crpropa__IRB_Saldana21_lowerTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Saldana21_lower *) x));
}
static void *_p_crpropa__IRB_Saldana21_upperTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Saldana21_upper *) x));
}
static void *_p_crpropa__IRB_Stecker05To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Stecker05 *) x));
}
static void *_p_crpropa__IRB_Stecker16_lowerTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Stecker16_lower *) x));
}
static void *_p_crpropa__IRB_Stecker16_upperTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Stecker16_upper *) x));
}
static void *_p_crpropa__JF12FieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::JF12Field *) x));
}
static void *_p_crpropa__JF12FieldSolenoidalTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *)(crpropa::JF12Field *) ((crpropa::JF12FieldSolenoidal *) x));
}
static void *_p_crpropa__KST24FieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::KST24Field *) x));
}
static void *_p_crpropa__LogarithmicSpiralFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::LogarithmicSpiralField *) x));
}
static void *_p_crpropa__MagneticDipoleFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::MagneticDipoleField *) x));
}
static void *_p_crpropa__MagneticFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::MagneticField *) x));
}
static void *_p_crpropa__MagneticFieldEvolutionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::MagneticFieldEvolution *) x));
}
static void *_p_crpropa__MagneticFieldGridTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::MagneticFieldGrid *) x));
}
static void *_p_crpropa__MagneticFieldListTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::MagneticFieldList *) x));
}
static void *_p_crpropa__MaximumTrajectoryLengthTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::MaximumTrajectoryLength *) x));
}
static void *_p_crpropa__MinimumChargeNumberTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::MinimumChargeNumber *) x));
}
static void *_p_crpropa__MinimumEnergyTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::MinimumEnergy *) x));
}
static void *_p_crpropa__MinimumEnergyPerParticleIdTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::MinimumEnergyPerParticleId *) x));
}
static void *_p_crpropa__MinimumRedshiftTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::MinimumRedshift *) x));
}
static void *_p_crpropa__MinimumRigidityTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::MinimumRigidity *) x));
}
static void *_p_crpropa__ModulatedMagneticFieldGridTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::ModulatedMagneticFieldGrid *) x));
}
static void *_p_crpropa__ModuleTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::Module *) x));
}
static void *_p_crpropa__ModuleListTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ModuleList *) x));
}
static void *_p_crpropa__ModuleListRunnerTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ModuleListRunner *) x));
}
static void *_p_crpropa__NakanishiTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Density *) ((crpropa::Nakanishi *) x));
}
static void *_p_crpropa__NuclearDecayTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::NuclearDecay *) x));
}
static void *_p_crpropa__ObliqueAdvectionShockTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::AdvectionField *) ((crpropa::ObliqueAdvectionShock *) x));
}
static void *_p_crpropa__ObserverTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::Observer *) x));
}
static void *_p_crpropa__Observer1DTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::Observer1D *) x));
}
static void *_p_crpropa__ObserverDetectAllTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverDetectAll *) x));
}
static void *_p_crpropa__ObserverElectronVetoTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverElectronVeto *) x));
}
static void *_p_crpropa__ObserverFeatureTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::ObserverFeature *) x));
}
static void *_p_crpropa__ObserverInactiveVetoTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverInactiveVeto *) x));
}
static void *_p_crpropa__ObserverNeutrinoVetoTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverNeutrinoVeto *) x));
}
static void *_p_crpropa__ObserverNucleusVetoTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverNucleusVeto *) x));
}
static void *_p_crpropa__ObserverParticleIdVetoTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverParticleIdVeto *) x));
}
static void *_p_crpropa__ObserverPhotonVetoTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverPhotonVeto *) x));
}
static void *_p_crpropa__ObserverRedshiftWindowTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverRedshiftWindow *) x));
}
static void *_p_crpropa__ObserverSurfaceTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverSurface *) x));
}
static void *_p_crpropa__ObserverTimeEvolutionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverTimeEvolution *) x));
}
static void *_p_crpropa__ObserverTrackingTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverTracking *) x));
}
static void *_p_crpropa__OneDimensionalCartesianShockTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::AdvectionField *) ((crpropa::OneDimensionalCartesianShock *) x));
}
static void *_p_crpropa__OneDimensionalSphericalShockTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::AdvectionField *) ((crpropa::OneDimensionalSphericalShock *) x));
}
static void *_p_crpropa__OutputTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::Output *) x));
}
static void *_p_crpropa__PT11FieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::PT11Field *) x));
}
static void *_p_crpropa__ParaxialBoxTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Surface *) ((crpropa::ParaxialBox *) x));
}
static void *_p_crpropa__ParticleCollectorTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ParticleCollector *) x));
}
static void *_p_crpropa__ParticleFilterTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::ParticleFilter *) x));
}
static void *_p_crpropa__ParticleSplittingTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ParticleSplitting *) x));
}
static void *_p_crpropa__PerformanceModuleTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::PerformanceModule *) x));
}
static void *_p_crpropa__PeriodicBoxTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::PeriodicBox *) x));
}
static void *_p_crpropa__PeriodicMagneticFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::PeriodicMagneticField *) x));
}
static void *_p_crpropa__PhotoDisintegrationTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::PhotoDisintegration *) x));
}
static void *_p_crpropa__PhotoPionProductionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::PhotoPionProduction *) x));
}
static void *_p_crpropa__PhotonFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::PhotonField *) x));
}
static void *_p_crpropa__PhotonOutput1DTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::PhotonOutput1D *) x));
}
static void *_p_crpropa__PlanckJF12bFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *)(crpropa::JF12Field *) ((crpropa::PlanckJF12bField *) x));
}
static void *_p_crpropa__PlaneTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Surface *) ((crpropa::Plane *) x));
}
static void *_p_crpropa__PlaneWaveTurbulenceTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *)(crpropa::TurbulentField *) ((crpropa::PlaneWaveTurbulence *) x));
}
static void *_p_crpropa__PolarizedSingleModeMagneticFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::PolarizedSingleModeMagneticField *) x));
}
static void *_p_crpropa__PropagationBPTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::PropagationBP *) x));
}
static void *_p_crpropa__PropagationCKTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::PropagationCK *) x));
}
static void *_p_crpropa__QuasiLinearTheoryTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::StepLengthModifier *) ((crpropa::QuasiLinearTheory *) x));
}
static void *_p_crpropa__RedshiftTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::Redshift *) x));
}
static void *_p_crpropa__ReflectiveBoxTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ReflectiveBox *) x));
}
static void *_p_crpropa__ReflectiveShellTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ReflectiveShell *) x));
}
static void *_p_crpropa__RestrictToRegionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::RestrictToRegion *) x));
}
static void *_p_crpropa__SecondOrderFermiTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractAccelerationModule *) ((crpropa::SecondOrderFermi *) x));
}
static void *_p_crpropa__ShellOutputTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ShellOutput *) x));
}
static void *_p_crpropa__ShellOutput1DTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ShellOutput1D *) x));
}
static void *_p_crpropa__ShellPropertyOutputTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ShellPropertyOutput *) x));
}
static void *_p_crpropa__SimplePropagationTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::SimplePropagation *) x));
}
static void *_p_crpropa__SourceTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceInterface *) ((crpropa::Source *) x));
}
static void *_p_crpropa__SourceCompositionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceComposition *) x));
}
static void *_p_crpropa__SourceDensityGridTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceDensityGrid *) x));
}
static void *_p_crpropa__SourceDensityGrid1DTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceDensityGrid1D *) x));
}
static void *_p_crpropa__SourceDirectedEmissionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceDirectedEmission *) x));
}
static void *_p_crpropa__SourceDirectionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceDirection *) x));
}
static void *_p_crpropa__SourceEmissionConeTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceEmissionCone *) x));
}
static void *_p_crpropa__SourceEmissionMapTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceEmissionMap *) x));
}
static void *_p_crpropa__SourceEnergyTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceEnergy *) x));
}
static void *_p_crpropa__SourceFeatureTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::SourceFeature *) x));
}
static void *_p_crpropa__SourceInterfaceTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::SourceInterface *) x));
}
static void *_p_crpropa__SourceIsotropicEmissionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceIsotropicEmission *) x));
}
static void *_p_crpropa__SourceLambertDistributionOnSphereTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceLambertDistributionOnSphere *) x));
}
static void *_p_crpropa__SourceListTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceInterface *) ((crpropa::SourceList *) x));
}
static void *_p_crpropa__SourceMassDistributionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceMassDistribution *) x));
}
static void *_p_crpropa__SourceMultipleParticleTypesTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceMultipleParticleTypes *) x));
}
static void *_p_crpropa__SourceMultiplePositionsTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceMultiplePositions *) x));
}
static void *_p_crpropa__SourceParticleTypeTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceParticleType *) x));
}
static void *_p_crpropa__SourcePositionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourcePosition *) x));
}
static void *_p_crpropa__SourcePowerLawSpectrumTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourcePowerLawSpectrum *) x));
}
static void *_p_crpropa__SourcePulsarDistributionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourcePulsarDistribution *) x));
}
static void *_p_crpropa__SourceRedshiftTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceRedshift *) x));
}
static void *_p_crpropa__SourceRedshift1DTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceRedshift1D *) x));
}
static void *_p_crpropa__SourceRedshiftEvolutionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceRedshiftEvolution *) x));
}
static void *_p_crpropa__SourceSNRDistributionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceSNRDistribution *) x));
}
static void *_p_crpropa__SourceTagTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceTag *) x));
}
static void *_p_crpropa__SourceUniform1DTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceUniform1D *) x));
}
static void *_p_crpropa__SourceUniformBoxTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceUniformBox *) x));
}
static void *_p_crpropa__SourceUniformCylinderTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceUniformCylinder *) x));
}
static void *_p_crpropa__SourceUniformHollowSphereTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceUniformHollowSphere *) x));
}
static void *_p_crpropa__SourceUniformRedshiftTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceUniformRedshift *) x));
}
static void *_p_crpropa__SourceUniformShellTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceUniformShell *) x));
}
static void *_p_crpropa__SourceUniformSphereTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceUniformSphere *) x));
}
static void *_p_crpropa__SphereTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Surface *) ((crpropa::Sphere *) x));
}
static void *_p_crpropa__SphericalAdvectionFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::AdvectionField *) ((crpropa::SphericalAdvectionField *) x));
}
static void *_p_crpropa__SphericalAdvectionShockTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::AdvectionField *) ((crpropa::SphericalAdvectionShock *) x));
}
static void *_p_crpropa__SphericalBoundaryTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::SphericalBoundary *) x));
}
static void *_p_crpropa__StepLengthModifierTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::StepLengthModifier *) x));
}
static void *_p_crpropa__SurfaceTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::Surface *) x));
}
static void *_p_crpropa__SynchrotronRadiationTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::SynchrotronRadiation *) x));
}
static void *_p_crpropa__TF17FieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::TF17Field *) x));
}
static void *_p_crpropa__TabularPhotonFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *) ((crpropa::TabularPhotonField *) x));
}
static void *_p_crpropa__TextOutputTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::Output *) ((crpropa::TextOutput *) x));
}
static void *_p_crpropa__ToroidalHaloFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::ToroidalHaloField *) x));
}
static void *_p_crpropa__TurbulenceSpectrumTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::TurbulenceSpectrum *) x));
}
static void *_p_crpropa__TurbulentFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::TurbulentField *) x));
}
static void *_p_crpropa__UF23FieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::UF23Field *) x));
}
static void *_p_crpropa__URB_Fixsen11To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::URB_Fixsen11 *) x));
}
static void *_p_crpropa__URB_Nitu21To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::URB_Nitu21 *) x));
}
static void *_p_crpropa__URB_Protheroe96To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::URB_Protheroe96 *) x));
}
static void *_p_crpropa__UniformAdvectionFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::AdvectionField *) ((crpropa::UniformAdvectionField *) x));
}
static void *_p_crpropa__UniformMagneticFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::UniformMagneticField *) x));
}
static void *_p_nupropa__BlackbodyNeutrinoFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (nupropa::NeutrinoField *) ((nupropa::BlackbodyNeutrinoField *) x));
}
static void *_p_nupropa__ChannelsTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((nupropa::Channels *) x));
}
static void *_p_nupropa__ChannelsBundleTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((nupropa::ChannelsBundle *) x));
}
static void *_p_nupropa__CnuBm1To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (nupropa::NeutrinoField *)(nupropa::BlackbodyNeutrinoField *) ((nupropa::CnuBm1 *) x));
}
static void *_p_nupropa__CnuBm2To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (nupropa::NeutrinoField *)(nupropa::BlackbodyNeutrinoField *) ((nupropa::CnuBm2 *) x));
}
static void *_p_nupropa__CnuBm3To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (nupropa::NeutrinoField *)(nupropa::BlackbodyNeutrinoField *) ((nupropa::CnuBm3 *) x));
}
static void *_p_nupropa__NeutrinoAntineutrinoInteractionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((nupropa::NeutrinoAntineutrinoInteraction *) x));
}
static void *_p_nupropa__NeutrinoFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((nupropa::NeutrinoField *) x));
}
static void *_p_nupropa__NeutrinoMixingTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((nupropa::NeutrinoMixing *) x));
}
static void *_p_nupropa__NeutrinoNeutrinoInteractionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((nupropa::NeutrinoNeutrinoInteraction *) x));
}
static void *_p_nupropa__NeutrinoOscillationTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((nupropa::NeutrinoOscillation *) x));
}
static void *_p_nupropa__NeutrinoPhotonInteractionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((nupropa::NeutrinoPhotonInteraction *) x));
}
static void *_p_nupropa__RelativisticInteractionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((nupropa::RelativisticInteraction *) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) (std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &))  ((std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &))  ((std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &))  ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &))  ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &))  ((std::basic_ios< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *)(std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *) ((std::basic_istream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *) ((std::basic_ostream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_nupropa__CnuBm1To_p_nupropa__BlackbodyNeutrinoField(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((nupropa::BlackbodyNeutrinoField *)  ((nupropa::CnuBm1 *) x));
}
static void *_p_nupropa__CnuBm2To_p_nupropa__BlackbodyNeutrinoField(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((nupropa::BlackbodyNeutrinoField *)  ((nupropa::CnuBm2 *) x));
}
static void *_p_nupropa__CnuBm3To_p_nupropa__BlackbodyNeutrinoField(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((nupropa::BlackbodyNeutrinoField *)  ((nupropa::CnuBm3 *) x));
}
static void *_p_nupropa__BlackbodyNeutrinoFieldTo_p_nupropa__NeutrinoField(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((nupropa::NeutrinoField *)  ((nupropa::BlackbodyNeutrinoField *) x));
}
static void *_p_nupropa__CnuBm1To_p_nupropa__NeutrinoField(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((nupropa::NeutrinoField *) (nupropa::BlackbodyNeutrinoField *) ((nupropa::CnuBm1 *) x));
}
static void *_p_nupropa__CnuBm2To_p_nupropa__NeutrinoField(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((nupropa::NeutrinoField *) (nupropa::BlackbodyNeutrinoField *) ((nupropa::CnuBm2 *) x));
}
static void *_p_nupropa__CnuBm3To_p_nupropa__NeutrinoField(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((nupropa::NeutrinoField *) (nupropa::BlackbodyNeutrinoField *) ((nupropa::CnuBm3 *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *) (std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_istream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_ostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *)  ((std::basic_ios< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *)(std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *) ((std::basic_istream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *) ((std::basic_ostream< char,std::char_traits< char > > *) x));
}
static swig_type_info _swigt__p_Eigen__Matrix3cd = {"_p_Eigen__Matrix3cd", "Eigen::Matrix3cd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PropertyMap = {"_p_PropertyMap", "PropertyMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SwigPyObject = {"_p_SwigPyObject", "SwigPyObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vector3c = {"_p_Vector3c", "Vector3c *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_candidate_vector_t = {"_p_candidate_vector_t", "candidate_vector_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "std::basic_istream< char >::char_type *|char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char_type = {"_p_char_type", "char_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_complex_d = {"_p_complex_d", "complex_d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_complex_f = {"_p_complex_f", "complex_f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__Candidate = {"_p_crpropa__Candidate", "crpropa::Candidate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__GridT_crpropa__Vector3T_double_t_t = {"_p_crpropa__GridT_crpropa__Vector3T_double_t_t", "crpropa::Grid3d *|crpropa::Grid< crpropa::Vector3< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__GridT_crpropa__Vector3T_float_t_t = {"_p_crpropa__GridT_crpropa__Vector3T_float_t_t", "crpropa::Grid3f *|crpropa::Grid< crpropa::Vector3< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__GridT_double_t = {"_p_crpropa__GridT_double_t", "crpropa::Grid1d *|crpropa::Grid< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__GridT_float_t = {"_p_crpropa__GridT_float_t", "crpropa::Grid1f *|crpropa::Grid< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__Module = {"_p_crpropa__Module", "crpropa::Module *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__AbstractAccelerationModule = {"_p_crpropa__AbstractAccelerationModule", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__AbstractCondition = {"_p_crpropa__AbstractCondition", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__AdiabaticCooling = {"_p_crpropa__AdiabaticCooling", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__CandidateSplitting = {"_p_crpropa__CandidateSplitting", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ConstantMomentumDiffusion = {"_p_crpropa__ConstantMomentumDiffusion", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__CubicBoundary = {"_p_crpropa__CubicBoundary", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__CylindricalBoundary = {"_p_crpropa__CylindricalBoundary", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Deactivation = {"_p_crpropa__Deactivation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__DetectionLength = {"_p_crpropa__DetectionLength", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__DiffusionSDE = {"_p_crpropa__DiffusionSDE", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__DirectedFlowScattering = {"_p_crpropa__DirectedFlowScattering", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__EMDoublePairProduction = {"_p_crpropa__EMDoublePairProduction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__EMInverseComptonScattering = {"_p_crpropa__EMInverseComptonScattering", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__EMPairProduction = {"_p_crpropa__EMPairProduction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__EMTripletPairProduction = {"_p_crpropa__EMTripletPairProduction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ElasticScattering = {"_p_crpropa__ElasticScattering", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ElectronPairProduction = {"_p_crpropa__ElectronPairProduction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__EllipsoidalBoundary = {"_p_crpropa__EllipsoidalBoundary", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__EmissionMapFiller = {"_p_crpropa__EmissionMapFiller", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__FutureRedshift = {"_p_crpropa__FutureRedshift", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MaximumTrajectoryLength = {"_p_crpropa__MaximumTrajectoryLength", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MinimumChargeNumber = {"_p_crpropa__MinimumChargeNumber", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MinimumEnergy = {"_p_crpropa__MinimumEnergy", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MinimumEnergyPerParticleId = {"_p_crpropa__MinimumEnergyPerParticleId", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MinimumRedshift = {"_p_crpropa__MinimumRedshift", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MinimumRigidity = {"_p_crpropa__MinimumRigidity", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ModuleList = {"_p_crpropa__ModuleList", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ModuleListRunner = {"_p_crpropa__ModuleListRunner", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__NuclearDecay = {"_p_crpropa__NuclearDecay", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Observer = {"_p_crpropa__Observer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Output = {"_p_crpropa__Output", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ParticleCollector = {"_p_crpropa__ParticleCollector", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ParticleFilter = {"_p_crpropa__ParticleFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ParticleSplitting = {"_p_crpropa__ParticleSplitting", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PerformanceModule = {"_p_crpropa__PerformanceModule", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PeriodicBox = {"_p_crpropa__PeriodicBox", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PhotoDisintegration = {"_p_crpropa__PhotoDisintegration", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PhotoPionProduction = {"_p_crpropa__PhotoPionProduction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PhotonOutput1D = {"_p_crpropa__PhotonOutput1D", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PropagationBP = {"_p_crpropa__PropagationBP", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PropagationCK = {"_p_crpropa__PropagationCK", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Redshift = {"_p_crpropa__Redshift", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ReflectiveBox = {"_p_crpropa__ReflectiveBox", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ReflectiveShell = {"_p_crpropa__ReflectiveShell", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__RestrictToRegion = {"_p_crpropa__RestrictToRegion", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SecondOrderFermi = {"_p_crpropa__SecondOrderFermi", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ShellOutput = {"_p_crpropa__ShellOutput", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ShellOutput1D = {"_p_crpropa__ShellOutput1D", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ShellPropertyOutput = {"_p_crpropa__ShellPropertyOutput", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SimplePropagation = {"_p_crpropa__SimplePropagation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SphericalBoundary = {"_p_crpropa__SphericalBoundary", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SynchrotronRadiation = {"_p_crpropa__SynchrotronRadiation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__TextOutput = {"_p_crpropa__TextOutput", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Referenced = {"_p_crpropa__Referenced", "crpropa::Referenced *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__AdvectionField = {"_p_crpropa__AdvectionField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__AdvectionFieldList = {"_p_crpropa__AdvectionFieldList", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ArchimedeanSpiralField = {"_p_crpropa__ArchimedeanSpiralField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__BlackbodyPhotonField = {"_p_crpropa__BlackbodyPhotonField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__CMB = {"_p_crpropa__CMB", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__CMZField = {"_p_crpropa__CMZField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ConstantDensity = {"_p_crpropa__ConstantDensity", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ConstantSphericalAdvectionField = {"_p_crpropa__ConstantSphericalAdvectionField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Cordes = {"_p_crpropa__Cordes", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__CylindricalProjectionMap = {"_p_crpropa__CylindricalProjectionMap", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Density = {"_p_crpropa__Density", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__DensityGrid = {"_p_crpropa__DensityGrid", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__DensityList = {"_p_crpropa__DensityList", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__DirectedFlowOfScatterCenters = {"_p_crpropa__DirectedFlowOfScatterCenters", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__EmissionMap = {"_p_crpropa__EmissionMap", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Ferriere = {"_p_crpropa__Ferriere", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__GridProperties = {"_p_crpropa__GridProperties", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Dominguez11 = {"_p_crpropa__IRB_Dominguez11", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Finke10 = {"_p_crpropa__IRB_Finke10", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Finke22 = {"_p_crpropa__IRB_Finke22", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Franceschini08 = {"_p_crpropa__IRB_Franceschini08", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Gilmore12 = {"_p_crpropa__IRB_Gilmore12", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Kneiske04 = {"_p_crpropa__IRB_Kneiske04", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Saldana21 = {"_p_crpropa__IRB_Saldana21", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Saldana21_lower = {"_p_crpropa__IRB_Saldana21_lower", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Saldana21_upper = {"_p_crpropa__IRB_Saldana21_upper", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Stecker05 = {"_p_crpropa__IRB_Stecker05", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Stecker16_lower = {"_p_crpropa__IRB_Stecker16_lower", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Stecker16_upper = {"_p_crpropa__IRB_Stecker16_upper", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__JF12Field = {"_p_crpropa__JF12Field", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__JF12FieldSolenoidal = {"_p_crpropa__JF12FieldSolenoidal", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__KST24Field = {"_p_crpropa__KST24Field", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__LogarithmicSpiralField = {"_p_crpropa__LogarithmicSpiralField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MagneticDipoleField = {"_p_crpropa__MagneticDipoleField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MagneticField = {"_p_crpropa__MagneticField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MagneticFieldEvolution = {"_p_crpropa__MagneticFieldEvolution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MagneticFieldGrid = {"_p_crpropa__MagneticFieldGrid", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MagneticFieldList = {"_p_crpropa__MagneticFieldList", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ModulatedMagneticFieldGrid = {"_p_crpropa__ModulatedMagneticFieldGrid", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Nakanishi = {"_p_crpropa__Nakanishi", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObliqueAdvectionShock = {"_p_crpropa__ObliqueAdvectionShock", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Observer1D = {"_p_crpropa__Observer1D", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverDetectAll = {"_p_crpropa__ObserverDetectAll", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverElectronVeto = {"_p_crpropa__ObserverElectronVeto", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverFeature = {"_p_crpropa__ObserverFeature", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverInactiveVeto = {"_p_crpropa__ObserverInactiveVeto", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverNeutrinoVeto = {"_p_crpropa__ObserverNeutrinoVeto", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverNucleusVeto = {"_p_crpropa__ObserverNucleusVeto", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverParticleIdVeto = {"_p_crpropa__ObserverParticleIdVeto", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverPhotonVeto = {"_p_crpropa__ObserverPhotonVeto", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverRedshiftWindow = {"_p_crpropa__ObserverRedshiftWindow", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverSurface = {"_p_crpropa__ObserverSurface", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverTimeEvolution = {"_p_crpropa__ObserverTimeEvolution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverTracking = {"_p_crpropa__ObserverTracking", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__OneDimensionalCartesianShock = {"_p_crpropa__OneDimensionalCartesianShock", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__OneDimensionalSphericalShock = {"_p_crpropa__OneDimensionalSphericalShock", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PT11Field = {"_p_crpropa__PT11Field", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ParaxialBox = {"_p_crpropa__ParaxialBox", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PeriodicMagneticField = {"_p_crpropa__PeriodicMagneticField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PhotonField = {"_p_crpropa__PhotonField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PlanckJF12bField = {"_p_crpropa__PlanckJF12bField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Plane = {"_p_crpropa__Plane", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PlaneWaveTurbulence = {"_p_crpropa__PlaneWaveTurbulence", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PolarizedSingleModeMagneticField = {"_p_crpropa__PolarizedSingleModeMagneticField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__QuasiLinearTheory = {"_p_crpropa__QuasiLinearTheory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Source = {"_p_crpropa__Source", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceComposition = {"_p_crpropa__SourceComposition", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceDensityGrid = {"_p_crpropa__SourceDensityGrid", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceDensityGrid1D = {"_p_crpropa__SourceDensityGrid1D", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceDirectedEmission = {"_p_crpropa__SourceDirectedEmission", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceDirection = {"_p_crpropa__SourceDirection", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceEmissionCone = {"_p_crpropa__SourceEmissionCone", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceEmissionMap = {"_p_crpropa__SourceEmissionMap", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceEnergy = {"_p_crpropa__SourceEnergy", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceFeature = {"_p_crpropa__SourceFeature", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceInterface = {"_p_crpropa__SourceInterface", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceIsotropicEmission = {"_p_crpropa__SourceIsotropicEmission", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceLambertDistributionOnSphere = {"_p_crpropa__SourceLambertDistributionOnSphere", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceList = {"_p_crpropa__SourceList", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceMassDistribution = {"_p_crpropa__SourceMassDistribution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceMultipleParticleTypes = {"_p_crpropa__SourceMultipleParticleTypes", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceMultiplePositions = {"_p_crpropa__SourceMultiplePositions", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceParticleType = {"_p_crpropa__SourceParticleType", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourcePosition = {"_p_crpropa__SourcePosition", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourcePowerLawSpectrum = {"_p_crpropa__SourcePowerLawSpectrum", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourcePulsarDistribution = {"_p_crpropa__SourcePulsarDistribution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceRedshift = {"_p_crpropa__SourceRedshift", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceRedshift1D = {"_p_crpropa__SourceRedshift1D", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceRedshiftEvolution = {"_p_crpropa__SourceRedshiftEvolution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceSNRDistribution = {"_p_crpropa__SourceSNRDistribution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceTag = {"_p_crpropa__SourceTag", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceUniform1D = {"_p_crpropa__SourceUniform1D", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceUniformBox = {"_p_crpropa__SourceUniformBox", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceUniformCylinder = {"_p_crpropa__SourceUniformCylinder", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceUniformHollowSphere = {"_p_crpropa__SourceUniformHollowSphere", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceUniformRedshift = {"_p_crpropa__SourceUniformRedshift", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceUniformShell = {"_p_crpropa__SourceUniformShell", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceUniformSphere = {"_p_crpropa__SourceUniformSphere", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Sphere = {"_p_crpropa__Sphere", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SphericalAdvectionField = {"_p_crpropa__SphericalAdvectionField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SphericalAdvectionShock = {"_p_crpropa__SphericalAdvectionShock", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__StepLengthModifier = {"_p_crpropa__StepLengthModifier", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Surface = {"_p_crpropa__Surface", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__TF17Field = {"_p_crpropa__TF17Field", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__TabularPhotonField = {"_p_crpropa__TabularPhotonField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ToroidalHaloField = {"_p_crpropa__ToroidalHaloField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__TurbulenceSpectrum = {"_p_crpropa__TurbulenceSpectrum", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__TurbulentField = {"_p_crpropa__TurbulentField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__UF23Field = {"_p_crpropa__UF23Field", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__URB_Fixsen11 = {"_p_crpropa__URB_Fixsen11", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__URB_Nitu21 = {"_p_crpropa__URB_Nitu21", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__URB_Protheroe96 = {"_p_crpropa__URB_Protheroe96", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__UniformAdvectionField = {"_p_crpropa__UniformAdvectionField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__UniformMagneticField = {"_p_crpropa__UniformMagneticField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Vector3T_double_t = {"_p_crpropa__Vector3T_double_t", "crpropa::Vector3d *|crpropa::Vector3< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__Vector3T_float_t = {"_p_crpropa__Vector3T_float_t", "crpropa::Vector3f *|crpropa::Vector3< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__ref_ptrT_Channels_t = {"_p_crpropa__ref_ptrT_Channels_t", "crpropa::ref_ptr< Channels > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__ref_ptrT_NeutrinoField_t = {"_p_crpropa__ref_ptrT_NeutrinoField_t", "crpropa::ref_ptr< NeutrinoField > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__ref_ptrT_NeutrinoMixing_t = {"_p_crpropa__ref_ptrT_NeutrinoMixing_t", "crpropa::ref_ptr< NeutrinoMixing > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__ref_ptrT_crpropa__PhotonField_t = {"_p_crpropa__ref_ptrT_crpropa__PhotonField_t", "crpropa::ref_ptr< crpropa::PhotonField > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t = {"_p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t", "crpropa::ref_ptr< nupropa::ChannelsBundle > *", 0, 0, (void*)&SwigPyBuiltin__crpropa__ref_ptrT_nupropa__ChannelsBundle_t_clientdata, 0};
static swig_type_info _swigt__p_crpropa__ref_ptrT_nupropa__Channels_t = {"_p_crpropa__ref_ptrT_nupropa__Channels_t", "crpropa::ref_ptr< nupropa::Channels > *", 0, 0, (void*)&SwigPyBuiltin__crpropa__ref_ptrT_nupropa__Channels_t_clientdata, 0};
static swig_type_info _swigt__p_crpropa__ref_ptrT_nupropa__NeutrinoField_t = {"_p_crpropa__ref_ptrT_nupropa__NeutrinoField_t", "crpropa::ref_ptr< nupropa::NeutrinoField > *", 0, 0, (void*)&SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoField_t_clientdata, 0};
static swig_type_info _swigt__p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t = {"_p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t", "crpropa::ref_ptr< nupropa::NeutrinoMixing > *", 0, 0, (void*)&SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoMixing_t_clientdata, 0};
static swig_type_info _swigt__p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t = {"_p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t", "crpropa::ref_ptr< nupropa::RelativisticInteraction > *", 0, 0, (void*)&SwigPyBuiltin__crpropa__ref_ptrT_nupropa__RelativisticInteraction_t_clientdata, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_element_type = {"_p_element_type", "element_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void = {"_p_f_enum_std__ios_base__event_r_std__ios_base_int__void", "std::ios_base::event_callback|void (*)(enum std::ios_base::event,std::ios_base &,int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t", "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__ios_base = {"_p_f_r_std__ios_base__r_std__ios_base", "std::ios_base &(*)(std::ios_base &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fmtflags = {"_p_fmtflags", "fmtflags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int32_t *|int_fast16_t *|int_fast32_t *|int_least32_t *|intptr_t *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int_type = {"_p_int_type", "int_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iostate = {"_p_iostate", "iostate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_t = {"_p_key_t", "key_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64_t *|int_fast64_t *|int_least64_t *|intmax_t *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_map_t = {"_p_map_t", "map_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_module_list_t = {"_p_module_list_t", "module_list_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_nupropa__BlackbodyNeutrinoField = {"_p_nupropa__BlackbodyNeutrinoField", "nupropa::BlackbodyNeutrinoField *", 0, 0, (void*)&SwigPyBuiltin__nupropa__BlackbodyNeutrinoField_clientdata, 0};
static swig_type_info _swigt__p_nupropa__Channels = {"_p_nupropa__Channels", "nupropa::Channels *", 0, 0, (void*)&SwigPyBuiltin__nupropa__Channels_clientdata, 0};
static swig_type_info _swigt__p_nupropa__ChannelsBundle = {"_p_nupropa__ChannelsBundle", "nupropa::ChannelsBundle *", 0, 0, (void*)&SwigPyBuiltin__nupropa__ChannelsBundle_clientdata, 0};
static swig_type_info _swigt__p_nupropa__CnuBm1 = {"_p_nupropa__CnuBm1", "nupropa::CnuBm1 *", 0, 0, (void*)&SwigPyBuiltin__nupropa__CnuBm1_clientdata, 0};
static swig_type_info _swigt__p_nupropa__CnuBm2 = {"_p_nupropa__CnuBm2", "nupropa::CnuBm2 *", 0, 0, (void*)&SwigPyBuiltin__nupropa__CnuBm2_clientdata, 0};
static swig_type_info _swigt__p_nupropa__CnuBm3 = {"_p_nupropa__CnuBm3", "nupropa::CnuBm3 *", 0, 0, (void*)&SwigPyBuiltin__nupropa__CnuBm3_clientdata, 0};
static swig_type_info _swigt__p_nupropa__NeutrinoAntineutrinoInteraction = {"_p_nupropa__NeutrinoAntineutrinoInteraction", "nupropa::NeutrinoAntineutrinoInteraction *", 0, 0, (void*)&SwigPyBuiltin__nupropa__NeutrinoAntineutrinoInteraction_clientdata, 0};
static swig_type_info _swigt__p_nupropa__NeutrinoField = {"_p_nupropa__NeutrinoField", "nupropa::NeutrinoField *", 0, 0, (void*)&SwigPyBuiltin__nupropa__NeutrinoField_clientdata, 0};
static swig_type_info _swigt__p_nupropa__NeutrinoMixing = {"_p_nupropa__NeutrinoMixing", "nupropa::NeutrinoMixing *", 0, 0, (void*)&SwigPyBuiltin__nupropa__NeutrinoMixing_clientdata, 0};
static swig_type_info _swigt__p_nupropa__NeutrinoNeutrinoInteraction = {"_p_nupropa__NeutrinoNeutrinoInteraction", "nupropa::NeutrinoNeutrinoInteraction *", 0, 0, (void*)&SwigPyBuiltin__nupropa__NeutrinoNeutrinoInteraction_clientdata, 0};
static swig_type_info _swigt__p_nupropa__NeutrinoOscillation = {"_p_nupropa__NeutrinoOscillation", "nupropa::NeutrinoOscillation *", 0, 0, (void*)&SwigPyBuiltin__nupropa__NeutrinoOscillation_clientdata, 0};
static swig_type_info _swigt__p_nupropa__NeutrinoPhotonInteraction = {"_p_nupropa__NeutrinoPhotonInteraction", "nupropa::NeutrinoPhotonInteraction *", 0, 0, (void*)&SwigPyBuiltin__nupropa__NeutrinoPhotonInteraction_clientdata, 0};
static swig_type_info _swigt__p_nupropa__ParticleData = {"_p_nupropa__ParticleData", "nupropa::ParticleData *", 0, 0, (void*)&SwigPyBuiltin__nupropa__ParticleData_clientdata, 0};
static swig_type_info _swigt__p_nupropa__RelativisticInteraction = {"_p_nupropa__RelativisticInteraction", "nupropa::RelativisticInteraction *", 0, 0, (void*)&SwigPyBuiltin__nupropa__RelativisticInteraction_clientdata, 0};
static swig_type_info _swigt__p_off_type = {"_p_off_type", "off_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openmode = {"_p_openmode", "openmode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pos_type = {"_p_pos_type", "pos_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reference = {"_p_reference", "reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_seekdir = {"_p_seekdir", "seekdir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "int16_t *|int_least16_t *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "int8_t *|int_fast8_t *|int_least8_t *|signed char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "std::streamsize *|size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_state_type = {"_p_state_type", "state_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_char_t = {"_p_std__allocatorT_char_t", "std::basic_string< char >::allocator_type *|std::allocator< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iosT_char_std__char_traitsT_char_t_t", "std::basic_ios< char,std::char_traits< char > > *|std::ios *|std::basic_ios< char > *", 0, 0, (void*)&SwigPyBuiltin__std__basic_iosT_char_t_clientdata, 0};
static swig_type_info _swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t", "std::basic_iostream< char,std::char_traits< char > > *|std::iostream *|std::basic_iostream< char > *", 0, 0, (void*)&SwigPyBuiltin__std__basic_iostreamT_char_t_clientdata, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::basic_istream< char,std::char_traits< char > > *|std::istream *|std::basic_istream< char > *", 0, 0, (void*)&SwigPyBuiltin__std__basic_istreamT_char_t_clientdata, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::basic_ostream< char,std::char_traits< char > > *|std::ostream *|std::basic_ostream< char > *", 0, 0, (void*)&SwigPyBuiltin__std__basic_ostreamT_char_t_clientdata, 0};
static swig_type_info _swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t = {"_p_std__basic_streambufT_char_std__char_traitsT_char_t_t", "std::basic_streambuf< char,std::char_traits< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", "std::basic_string< char,std::char_traits< char >,std::allocator< char > > *|std::string *|std::basic_string< char > *", 0, 0, (void*)&SwigPyBuiltin__std__basic_stringT_char_t_clientdata, 0};
static swig_type_info _swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator = {"_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator", "std::basic_string< char,std::char_traits< char >,std::allocator< char > >::iterator *|std::basic_string< char >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__reverse_iterator = {"_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__reverse_iterator", "std::basic_string< char,std::char_traits< char >,std::allocator< char > >::reverse_iterator *|std::basic_string< char >::reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ios_base = {"_p_std__ios_base", "std::ios_base *", 0, 0, (void*)&SwigPyBuiltin__std__ios_base_clientdata, 0};
static swig_type_info _swigt__p_std__locale = {"_p_std__locale", "std::locale *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__unordered_mapT_int_double_t = {"_p_std__unordered_mapT_int_double_t", "std::unordered_map< int,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_bool_std__allocatorT_bool_t_t = {"_p_std__vectorT_bool_std__allocatorT_bool_t_t", "std::vector< bool,std::allocator< bool > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_std__allocatorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_t_t = {"_p_std__vectorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_std__allocatorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_t_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::allocator< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t = {"_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t", "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t = {"_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t", "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_streamoff = {"_p_streamoff", "std::basic_istream< char >::off_type *|std::basic_ostream< char >::off_type *|streamoff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_streampos = {"_p_streampos", "std::basic_istream< char >::pos_type *|std::basic_ostream< char >::pos_type *|streampos *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)&SwigPyBuiltin__swig__SwigPyIterator_clientdata, 0};
static swig_type_info _swigt__p_traits_type = {"_p_traits_type", "traits_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "uint8_t *|uint_fast8_t *|uint_least8_t *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint32_t *|uint_fast16_t *|uint_fast32_t *|uint_least32_t *|uintptr_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64_t *|uint_fast64_t *|uint_least64_t *|uintmax_t *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "uint16_t *|uint_least16_t *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vector_const_iterator = {"_p_vector_const_iterator", "vector_const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vector_iterator = {"_p_vector_iterator", "vector_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vector_t = {"_p_vector_t", "vector_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Eigen__Matrix3cd,
  &_swigt__p_PropertyMap,
  &_swigt__p_SwigPyObject,
  &_swigt__p_Vector3c,
  &_swigt__p_allocator_type,
  &_swigt__p_bool,
  &_swigt__p_candidate_vector_t,
  &_swigt__p_char,
  &_swigt__p_char_type,
  &_swigt__p_complex_d,
  &_swigt__p_complex_f,
  &_swigt__p_const_iterator,
  &_swigt__p_const_reference,
  &_swigt__p_crpropa__AbstractAccelerationModule,
  &_swigt__p_crpropa__AbstractCondition,
  &_swigt__p_crpropa__AdiabaticCooling,
  &_swigt__p_crpropa__AdvectionField,
  &_swigt__p_crpropa__AdvectionFieldList,
  &_swigt__p_crpropa__ArchimedeanSpiralField,
  &_swigt__p_crpropa__BlackbodyPhotonField,
  &_swigt__p_crpropa__CMB,
  &_swigt__p_crpropa__CMZField,
  &_swigt__p_crpropa__Candidate,
  &_swigt__p_crpropa__CandidateSplitting,
  &_swigt__p_crpropa__ConstantDensity,
  &_swigt__p_crpropa__ConstantMomentumDiffusion,
  &_swigt__p_crpropa__ConstantSphericalAdvectionField,
  &_swigt__p_crpropa__Cordes,
  &_swigt__p_crpropa__CubicBoundary,
  &_swigt__p_crpropa__CylindricalBoundary,
  &_swigt__p_crpropa__CylindricalProjectionMap,
  &_swigt__p_crpropa__Deactivation,
  &_swigt__p_crpropa__Density,
  &_swigt__p_crpropa__DensityGrid,
  &_swigt__p_crpropa__DensityList,
  &_swigt__p_crpropa__DetectionLength,
  &_swigt__p_crpropa__DiffusionSDE,
  &_swigt__p_crpropa__DirectedFlowOfScatterCenters,
  &_swigt__p_crpropa__DirectedFlowScattering,
  &_swigt__p_crpropa__EMDoublePairProduction,
  &_swigt__p_crpropa__EMInverseComptonScattering,
  &_swigt__p_crpropa__EMPairProduction,
  &_swigt__p_crpropa__EMTripletPairProduction,
  &_swigt__p_crpropa__ElasticScattering,
  &_swigt__p_crpropa__ElectronPairProduction,
  &_swigt__p_crpropa__EllipsoidalBoundary,
  &_swigt__p_crpropa__EmissionMap,
  &_swigt__p_crpropa__EmissionMapFiller,
  &_swigt__p_crpropa__Ferriere,
  &_swigt__p_crpropa__FutureRedshift,
  &_swigt__p_crpropa__GridProperties,
  &_swigt__p_crpropa__GridT_crpropa__Vector3T_double_t_t,
  &_swigt__p_crpropa__GridT_crpropa__Vector3T_float_t_t,
  &_swigt__p_crpropa__GridT_double_t,
  &_swigt__p_crpropa__GridT_float_t,
  &_swigt__p_crpropa__IRB_Dominguez11,
  &_swigt__p_crpropa__IRB_Finke10,
  &_swigt__p_crpropa__IRB_Finke22,
  &_swigt__p_crpropa__IRB_Franceschini08,
  &_swigt__p_crpropa__IRB_Gilmore12,
  &_swigt__p_crpropa__IRB_Kneiske04,
  &_swigt__p_crpropa__IRB_Saldana21,
  &_swigt__p_crpropa__IRB_Saldana21_lower,
  &_swigt__p_crpropa__IRB_Saldana21_upper,
  &_swigt__p_crpropa__IRB_Stecker05,
  &_swigt__p_crpropa__IRB_Stecker16_lower,
  &_swigt__p_crpropa__IRB_Stecker16_upper,
  &_swigt__p_crpropa__JF12Field,
  &_swigt__p_crpropa__JF12FieldSolenoidal,
  &_swigt__p_crpropa__KST24Field,
  &_swigt__p_crpropa__LogarithmicSpiralField,
  &_swigt__p_crpropa__MagneticDipoleField,
  &_swigt__p_crpropa__MagneticField,
  &_swigt__p_crpropa__MagneticFieldEvolution,
  &_swigt__p_crpropa__MagneticFieldGrid,
  &_swigt__p_crpropa__MagneticFieldList,
  &_swigt__p_crpropa__MaximumTrajectoryLength,
  &_swigt__p_crpropa__MinimumChargeNumber,
  &_swigt__p_crpropa__MinimumEnergy,
  &_swigt__p_crpropa__MinimumEnergyPerParticleId,
  &_swigt__p_crpropa__MinimumRedshift,
  &_swigt__p_crpropa__MinimumRigidity,
  &_swigt__p_crpropa__ModulatedMagneticFieldGrid,
  &_swigt__p_crpropa__Module,
  &_swigt__p_crpropa__ModuleList,
  &_swigt__p_crpropa__ModuleListRunner,
  &_swigt__p_crpropa__Nakanishi,
  &_swigt__p_crpropa__NuclearDecay,
  &_swigt__p_crpropa__ObliqueAdvectionShock,
  &_swigt__p_crpropa__Observer,
  &_swigt__p_crpropa__Observer1D,
  &_swigt__p_crpropa__ObserverDetectAll,
  &_swigt__p_crpropa__ObserverElectronVeto,
  &_swigt__p_crpropa__ObserverFeature,
  &_swigt__p_crpropa__ObserverInactiveVeto,
  &_swigt__p_crpropa__ObserverNeutrinoVeto,
  &_swigt__p_crpropa__ObserverNucleusVeto,
  &_swigt__p_crpropa__ObserverParticleIdVeto,
  &_swigt__p_crpropa__ObserverPhotonVeto,
  &_swigt__p_crpropa__ObserverRedshiftWindow,
  &_swigt__p_crpropa__ObserverSurface,
  &_swigt__p_crpropa__ObserverTimeEvolution,
  &_swigt__p_crpropa__ObserverTracking,
  &_swigt__p_crpropa__OneDimensionalCartesianShock,
  &_swigt__p_crpropa__OneDimensionalSphericalShock,
  &_swigt__p_crpropa__Output,
  &_swigt__p_crpropa__PT11Field,
  &_swigt__p_crpropa__ParaxialBox,
  &_swigt__p_crpropa__ParticleCollector,
  &_swigt__p_crpropa__ParticleFilter,
  &_swigt__p_crpropa__ParticleSplitting,
  &_swigt__p_crpropa__PerformanceModule,
  &_swigt__p_crpropa__PeriodicBox,
  &_swigt__p_crpropa__PeriodicMagneticField,
  &_swigt__p_crpropa__PhotoDisintegration,
  &_swigt__p_crpropa__PhotoPionProduction,
  &_swigt__p_crpropa__PhotonField,
  &_swigt__p_crpropa__PhotonOutput1D,
  &_swigt__p_crpropa__PlanckJF12bField,
  &_swigt__p_crpropa__Plane,
  &_swigt__p_crpropa__PlaneWaveTurbulence,
  &_swigt__p_crpropa__PolarizedSingleModeMagneticField,
  &_swigt__p_crpropa__PropagationBP,
  &_swigt__p_crpropa__PropagationCK,
  &_swigt__p_crpropa__QuasiLinearTheory,
  &_swigt__p_crpropa__Redshift,
  &_swigt__p_crpropa__Referenced,
  &_swigt__p_crpropa__ReflectiveBox,
  &_swigt__p_crpropa__ReflectiveShell,
  &_swigt__p_crpropa__RestrictToRegion,
  &_swigt__p_crpropa__SecondOrderFermi,
  &_swigt__p_crpropa__ShellOutput,
  &_swigt__p_crpropa__ShellOutput1D,
  &_swigt__p_crpropa__ShellPropertyOutput,
  &_swigt__p_crpropa__SimplePropagation,
  &_swigt__p_crpropa__Source,
  &_swigt__p_crpropa__SourceComposition,
  &_swigt__p_crpropa__SourceDensityGrid,
  &_swigt__p_crpropa__SourceDensityGrid1D,
  &_swigt__p_crpropa__SourceDirectedEmission,
  &_swigt__p_crpropa__SourceDirection,
  &_swigt__p_crpropa__SourceEmissionCone,
  &_swigt__p_crpropa__SourceEmissionMap,
  &_swigt__p_crpropa__SourceEnergy,
  &_swigt__p_crpropa__SourceFeature,
  &_swigt__p_crpropa__SourceInterface,
  &_swigt__p_crpropa__SourceIsotropicEmission,
  &_swigt__p_crpropa__SourceLambertDistributionOnSphere,
  &_swigt__p_crpropa__SourceList,
  &_swigt__p_crpropa__SourceMassDistribution,
  &_swigt__p_crpropa__SourceMultipleParticleTypes,
  &_swigt__p_crpropa__SourceMultiplePositions,
  &_swigt__p_crpropa__SourceParticleType,
  &_swigt__p_crpropa__SourcePosition,
  &_swigt__p_crpropa__SourcePowerLawSpectrum,
  &_swigt__p_crpropa__SourcePulsarDistribution,
  &_swigt__p_crpropa__SourceRedshift,
  &_swigt__p_crpropa__SourceRedshift1D,
  &_swigt__p_crpropa__SourceRedshiftEvolution,
  &_swigt__p_crpropa__SourceSNRDistribution,
  &_swigt__p_crpropa__SourceTag,
  &_swigt__p_crpropa__SourceUniform1D,
  &_swigt__p_crpropa__SourceUniformBox,
  &_swigt__p_crpropa__SourceUniformCylinder,
  &_swigt__p_crpropa__SourceUniformHollowSphere,
  &_swigt__p_crpropa__SourceUniformRedshift,
  &_swigt__p_crpropa__SourceUniformShell,
  &_swigt__p_crpropa__SourceUniformSphere,
  &_swigt__p_crpropa__Sphere,
  &_swigt__p_crpropa__SphericalAdvectionField,
  &_swigt__p_crpropa__SphericalAdvectionShock,
  &_swigt__p_crpropa__SphericalBoundary,
  &_swigt__p_crpropa__StepLengthModifier,
  &_swigt__p_crpropa__Surface,
  &_swigt__p_crpropa__SynchrotronRadiation,
  &_swigt__p_crpropa__TF17Field,
  &_swigt__p_crpropa__TabularPhotonField,
  &_swigt__p_crpropa__TextOutput,
  &_swigt__p_crpropa__ToroidalHaloField,
  &_swigt__p_crpropa__TurbulenceSpectrum,
  &_swigt__p_crpropa__TurbulentField,
  &_swigt__p_crpropa__UF23Field,
  &_swigt__p_crpropa__URB_Fixsen11,
  &_swigt__p_crpropa__URB_Nitu21,
  &_swigt__p_crpropa__URB_Protheroe96,
  &_swigt__p_crpropa__UniformAdvectionField,
  &_swigt__p_crpropa__UniformMagneticField,
  &_swigt__p_crpropa__Vector3T_double_t,
  &_swigt__p_crpropa__Vector3T_float_t,
  &_swigt__p_crpropa__ref_ptrT_Channels_t,
  &_swigt__p_crpropa__ref_ptrT_NeutrinoField_t,
  &_swigt__p_crpropa__ref_ptrT_NeutrinoMixing_t,
  &_swigt__p_crpropa__ref_ptrT_crpropa__PhotonField_t,
  &_swigt__p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t,
  &_swigt__p_crpropa__ref_ptrT_nupropa__Channels_t,
  &_swigt__p_crpropa__ref_ptrT_nupropa__NeutrinoField_t,
  &_swigt__p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t,
  &_swigt__p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_element_type,
  &_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__ios_base,
  &_swigt__p_first_type,
  &_swigt__p_float,
  &_swigt__p_fmtflags,
  &_swigt__p_int,
  &_swigt__p_int_type,
  &_swigt__p_iostate,
  &_swigt__p_iterator,
  &_swigt__p_key_t,
  &_swigt__p_key_type,
  &_swigt__p_long,
  &_swigt__p_long_double,
  &_swigt__p_long_long,
  &_swigt__p_map_t,
  &_swigt__p_module_list_t,
  &_swigt__p_nupropa__BlackbodyNeutrinoField,
  &_swigt__p_nupropa__Channels,
  &_swigt__p_nupropa__ChannelsBundle,
  &_swigt__p_nupropa__CnuBm1,
  &_swigt__p_nupropa__CnuBm2,
  &_swigt__p_nupropa__CnuBm3,
  &_swigt__p_nupropa__NeutrinoAntineutrinoInteraction,
  &_swigt__p_nupropa__NeutrinoField,
  &_swigt__p_nupropa__NeutrinoMixing,
  &_swigt__p_nupropa__NeutrinoNeutrinoInteraction,
  &_swigt__p_nupropa__NeutrinoOscillation,
  &_swigt__p_nupropa__NeutrinoPhotonInteraction,
  &_swigt__p_nupropa__ParticleData,
  &_swigt__p_nupropa__RelativisticInteraction,
  &_swigt__p_off_type,
  &_swigt__p_openmode,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_void,
  &_swigt__p_pos_type,
  &_swigt__p_reference,
  &_swigt__p_second_type,
  &_swigt__p_seekdir,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_state_type,
  &_swigt__p_std__allocatorT_char_t,
  &_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator,
  &_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__reverse_iterator,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__ios_base,
  &_swigt__p_std__locale,
  &_swigt__p_std__unordered_mapT_int_double_t,
  &_swigt__p_std__vectorT_bool_std__allocatorT_bool_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_std__allocatorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,
  &_swigt__p_streamoff,
  &_swigt__p_streampos,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_traits_type,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_vector_const_iterator,
  &_swigt__p_vector_iterator,
  &_swigt__p_vector_t,
};

static swig_cast_info _swigc__p_Eigen__Matrix3cd[] = {  {&_swigt__p_Eigen__Matrix3cd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PropertyMap[] = {  {&_swigt__p_PropertyMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SwigPyObject[] = {  {&_swigt__p_SwigPyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vector3c[] = {  {&_swigt__p_Vector3c, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_candidate_vector_t[] = {  {&_swigt__p_candidate_vector_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char_type[] = {  {&_swigt__p_char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_complex_d[] = {  {&_swigt__p_complex_d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_complex_f[] = {  {&_swigt__p_complex_f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Candidate[] = {  {&_swigt__p_crpropa__Candidate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__GridT_crpropa__Vector3T_double_t_t[] = {  {&_swigt__p_crpropa__GridT_crpropa__Vector3T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__GridT_crpropa__Vector3T_float_t_t[] = {  {&_swigt__p_crpropa__GridT_crpropa__Vector3T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__GridT_double_t[] = {  {&_swigt__p_crpropa__GridT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__GridT_float_t[] = {  {&_swigt__p_crpropa__GridT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__AbstractAccelerationModule[] = {{&_swigt__p_crpropa__AbstractAccelerationModule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__AbstractCondition[] = {{&_swigt__p_crpropa__AbstractCondition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__AdiabaticCooling[] = {{&_swigt__p_crpropa__AdiabaticCooling, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__CandidateSplitting[] = {{&_swigt__p_crpropa__CandidateSplitting, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ConstantMomentumDiffusion[] = {{&_swigt__p_crpropa__ConstantMomentumDiffusion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__CubicBoundary[] = {{&_swigt__p_crpropa__CubicBoundary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__CylindricalBoundary[] = {{&_swigt__p_crpropa__CylindricalBoundary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Deactivation[] = {{&_swigt__p_crpropa__Deactivation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__DetectionLength[] = {{&_swigt__p_crpropa__DetectionLength, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__DiffusionSDE[] = {{&_swigt__p_crpropa__DiffusionSDE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__DirectedFlowScattering[] = {{&_swigt__p_crpropa__DirectedFlowScattering, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__EMDoublePairProduction[] = {{&_swigt__p_crpropa__EMDoublePairProduction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__EMInverseComptonScattering[] = {{&_swigt__p_crpropa__EMInverseComptonScattering, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__EMPairProduction[] = {{&_swigt__p_crpropa__EMPairProduction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__EMTripletPairProduction[] = {{&_swigt__p_crpropa__EMTripletPairProduction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ElasticScattering[] = {{&_swigt__p_crpropa__ElasticScattering, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ElectronPairProduction[] = {{&_swigt__p_crpropa__ElectronPairProduction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__EllipsoidalBoundary[] = {{&_swigt__p_crpropa__EllipsoidalBoundary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__EmissionMapFiller[] = {{&_swigt__p_crpropa__EmissionMapFiller, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__FutureRedshift[] = {{&_swigt__p_crpropa__FutureRedshift, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MaximumTrajectoryLength[] = {{&_swigt__p_crpropa__MaximumTrajectoryLength, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MinimumChargeNumber[] = {{&_swigt__p_crpropa__MinimumChargeNumber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MinimumEnergy[] = {{&_swigt__p_crpropa__MinimumEnergy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MinimumEnergyPerParticleId[] = {{&_swigt__p_crpropa__MinimumEnergyPerParticleId, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MinimumRedshift[] = {{&_swigt__p_crpropa__MinimumRedshift, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MinimumRigidity[] = {{&_swigt__p_crpropa__MinimumRigidity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ModuleList[] = {{&_swigt__p_crpropa__ModuleList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ModuleListRunner[] = {{&_swigt__p_crpropa__ModuleListRunner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__NuclearDecay[] = {{&_swigt__p_crpropa__NuclearDecay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Observer[] = {{&_swigt__p_crpropa__Observer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Output[] = {{&_swigt__p_crpropa__Output, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ParticleCollector[] = {{&_swigt__p_crpropa__ParticleCollector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ParticleFilter[] = {{&_swigt__p_crpropa__ParticleFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ParticleSplitting[] = {{&_swigt__p_crpropa__ParticleSplitting, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PerformanceModule[] = {{&_swigt__p_crpropa__PerformanceModule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PeriodicBox[] = {{&_swigt__p_crpropa__PeriodicBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PhotoDisintegration[] = {{&_swigt__p_crpropa__PhotoDisintegration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PhotoPionProduction[] = {{&_swigt__p_crpropa__PhotoPionProduction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PhotonOutput1D[] = {{&_swigt__p_crpropa__PhotonOutput1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PropagationBP[] = {{&_swigt__p_crpropa__PropagationBP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PropagationCK[] = {{&_swigt__p_crpropa__PropagationCK, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Redshift[] = {{&_swigt__p_crpropa__Redshift, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ReflectiveBox[] = {{&_swigt__p_crpropa__ReflectiveBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ReflectiveShell[] = {{&_swigt__p_crpropa__ReflectiveShell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__RestrictToRegion[] = {{&_swigt__p_crpropa__RestrictToRegion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SecondOrderFermi[] = {{&_swigt__p_crpropa__SecondOrderFermi, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ShellOutput[] = {{&_swigt__p_crpropa__ShellOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ShellOutput1D[] = {{&_swigt__p_crpropa__ShellOutput1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ShellPropertyOutput[] = {{&_swigt__p_crpropa__ShellPropertyOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SimplePropagation[] = {{&_swigt__p_crpropa__SimplePropagation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SphericalBoundary[] = {{&_swigt__p_crpropa__SphericalBoundary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SynchrotronRadiation[] = {{&_swigt__p_crpropa__SynchrotronRadiation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__TextOutput[] = {{&_swigt__p_crpropa__TextOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Module[] = {  {&_swigt__p_crpropa__Module, 0, 0, 0},  {&_swigt__p_crpropa__AbstractAccelerationModule, _p_crpropa__AbstractAccelerationModuleTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__AbstractCondition, _p_crpropa__AbstractConditionTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__AdiabaticCooling, _p_crpropa__AdiabaticCoolingTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__CandidateSplitting, _p_crpropa__CandidateSplittingTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ConstantMomentumDiffusion, _p_crpropa__ConstantMomentumDiffusionTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__CubicBoundary, _p_crpropa__CubicBoundaryTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__CylindricalBoundary, _p_crpropa__CylindricalBoundaryTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__Deactivation, _p_crpropa__DeactivationTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__DetectionLength, _p_crpropa__DetectionLengthTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__DiffusionSDE, _p_crpropa__DiffusionSDETo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__DirectedFlowScattering, _p_crpropa__DirectedFlowScatteringTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__EMDoublePairProduction, _p_crpropa__EMDoublePairProductionTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__EMInverseComptonScattering, _p_crpropa__EMInverseComptonScatteringTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__EMPairProduction, _p_crpropa__EMPairProductionTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__EMTripletPairProduction, _p_crpropa__EMTripletPairProductionTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ElasticScattering, _p_crpropa__ElasticScatteringTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ElectronPairProduction, _p_crpropa__ElectronPairProductionTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__EllipsoidalBoundary, _p_crpropa__EllipsoidalBoundaryTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__EmissionMapFiller, _p_crpropa__EmissionMapFillerTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__FutureRedshift, _p_crpropa__FutureRedshiftTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__MaximumTrajectoryLength, _p_crpropa__MaximumTrajectoryLengthTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__MinimumChargeNumber, _p_crpropa__MinimumChargeNumberTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__MinimumEnergy, _p_crpropa__MinimumEnergyTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__MinimumEnergyPerParticleId, _p_crpropa__MinimumEnergyPerParticleIdTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__MinimumRedshift, _p_crpropa__MinimumRedshiftTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__MinimumRigidity, _p_crpropa__MinimumRigidityTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ModuleList, _p_crpropa__ModuleListTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ModuleListRunner, _p_crpropa__ModuleListRunnerTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__NuclearDecay, _p_crpropa__NuclearDecayTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__Observer, _p_crpropa__ObserverTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__Output, _p_crpropa__OutputTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ParticleCollector, _p_crpropa__ParticleCollectorTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ParticleFilter, _p_crpropa__ParticleFilterTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ParticleSplitting, _p_crpropa__ParticleSplittingTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__PerformanceModule, _p_crpropa__PerformanceModuleTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__PeriodicBox, _p_crpropa__PeriodicBoxTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__PhotoDisintegration, _p_crpropa__PhotoDisintegrationTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__PhotoPionProduction, _p_crpropa__PhotoPionProductionTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__PhotonOutput1D, _p_crpropa__PhotonOutput1DTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__PropagationBP, _p_crpropa__PropagationBPTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__PropagationCK, _p_crpropa__PropagationCKTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__Redshift, _p_crpropa__RedshiftTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ReflectiveBox, _p_crpropa__ReflectiveBoxTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ReflectiveShell, _p_crpropa__ReflectiveShellTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__RestrictToRegion, _p_crpropa__RestrictToRegionTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__SecondOrderFermi, _p_crpropa__SecondOrderFermiTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ShellOutput, _p_crpropa__ShellOutputTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ShellOutput1D, _p_crpropa__ShellOutput1DTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ShellPropertyOutput, _p_crpropa__ShellPropertyOutputTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__SimplePropagation, _p_crpropa__SimplePropagationTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__SphericalBoundary, _p_crpropa__SphericalBoundaryTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__SynchrotronRadiation, _p_crpropa__SynchrotronRadiationTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__TextOutput, _p_crpropa__TextOutputTo_p_crpropa__Module, 0, 0},  {&_swigt__p_nupropa__NeutrinoAntineutrinoInteraction, _p_nupropa__NeutrinoAntineutrinoInteractionTo_p_crpropa__Module, 0, 0},  {&_swigt__p_nupropa__NeutrinoNeutrinoInteraction, _p_nupropa__NeutrinoNeutrinoInteractionTo_p_crpropa__Module, 0, 0},  {&_swigt__p_nupropa__NeutrinoOscillation, _p_nupropa__NeutrinoOscillationTo_p_crpropa__Module, 0, 0},  {&_swigt__p_nupropa__NeutrinoPhotonInteraction, _p_nupropa__NeutrinoPhotonInteractionTo_p_crpropa__Module, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__AdvectionField[] = {{&_swigt__p_crpropa__AdvectionField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__AdvectionFieldList[] = {{&_swigt__p_crpropa__AdvectionFieldList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ArchimedeanSpiralField[] = {{&_swigt__p_crpropa__ArchimedeanSpiralField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__BlackbodyPhotonField[] = {{&_swigt__p_crpropa__BlackbodyPhotonField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__CMB[] = {{&_swigt__p_crpropa__CMB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__CMZField[] = {{&_swigt__p_crpropa__CMZField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ConstantDensity[] = {{&_swigt__p_crpropa__ConstantDensity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ConstantSphericalAdvectionField[] = {{&_swigt__p_crpropa__ConstantSphericalAdvectionField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Cordes[] = {{&_swigt__p_crpropa__Cordes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__CylindricalProjectionMap[] = {{&_swigt__p_crpropa__CylindricalProjectionMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Density[] = {{&_swigt__p_crpropa__Density, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__DensityGrid[] = {{&_swigt__p_crpropa__DensityGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__DensityList[] = {{&_swigt__p_crpropa__DensityList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__DirectedFlowOfScatterCenters[] = {{&_swigt__p_crpropa__DirectedFlowOfScatterCenters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__EmissionMap[] = {{&_swigt__p_crpropa__EmissionMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Ferriere[] = {{&_swigt__p_crpropa__Ferriere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__GridProperties[] = {{&_swigt__p_crpropa__GridProperties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Dominguez11[] = {{&_swigt__p_crpropa__IRB_Dominguez11, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Finke10[] = {{&_swigt__p_crpropa__IRB_Finke10, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Finke22[] = {{&_swigt__p_crpropa__IRB_Finke22, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Franceschini08[] = {{&_swigt__p_crpropa__IRB_Franceschini08, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Gilmore12[] = {{&_swigt__p_crpropa__IRB_Gilmore12, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Kneiske04[] = {{&_swigt__p_crpropa__IRB_Kneiske04, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Saldana21[] = {{&_swigt__p_crpropa__IRB_Saldana21, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Saldana21_lower[] = {{&_swigt__p_crpropa__IRB_Saldana21_lower, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Saldana21_upper[] = {{&_swigt__p_crpropa__IRB_Saldana21_upper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Stecker05[] = {{&_swigt__p_crpropa__IRB_Stecker05, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Stecker16_lower[] = {{&_swigt__p_crpropa__IRB_Stecker16_lower, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Stecker16_upper[] = {{&_swigt__p_crpropa__IRB_Stecker16_upper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__JF12Field[] = {{&_swigt__p_crpropa__JF12Field, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__JF12FieldSolenoidal[] = {{&_swigt__p_crpropa__JF12FieldSolenoidal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__KST24Field[] = {{&_swigt__p_crpropa__KST24Field, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__LogarithmicSpiralField[] = {{&_swigt__p_crpropa__LogarithmicSpiralField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MagneticDipoleField[] = {{&_swigt__p_crpropa__MagneticDipoleField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MagneticField[] = {{&_swigt__p_crpropa__MagneticField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MagneticFieldEvolution[] = {{&_swigt__p_crpropa__MagneticFieldEvolution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MagneticFieldGrid[] = {{&_swigt__p_crpropa__MagneticFieldGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MagneticFieldList[] = {{&_swigt__p_crpropa__MagneticFieldList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ModulatedMagneticFieldGrid[] = {{&_swigt__p_crpropa__ModulatedMagneticFieldGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Nakanishi[] = {{&_swigt__p_crpropa__Nakanishi, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObliqueAdvectionShock[] = {{&_swigt__p_crpropa__ObliqueAdvectionShock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Observer1D[] = {{&_swigt__p_crpropa__Observer1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverDetectAll[] = {{&_swigt__p_crpropa__ObserverDetectAll, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverElectronVeto[] = {{&_swigt__p_crpropa__ObserverElectronVeto, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverFeature[] = {{&_swigt__p_crpropa__ObserverFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverInactiveVeto[] = {{&_swigt__p_crpropa__ObserverInactiveVeto, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverNeutrinoVeto[] = {{&_swigt__p_crpropa__ObserverNeutrinoVeto, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverNucleusVeto[] = {{&_swigt__p_crpropa__ObserverNucleusVeto, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverParticleIdVeto[] = {{&_swigt__p_crpropa__ObserverParticleIdVeto, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverPhotonVeto[] = {{&_swigt__p_crpropa__ObserverPhotonVeto, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverRedshiftWindow[] = {{&_swigt__p_crpropa__ObserverRedshiftWindow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverSurface[] = {{&_swigt__p_crpropa__ObserverSurface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverTimeEvolution[] = {{&_swigt__p_crpropa__ObserverTimeEvolution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverTracking[] = {{&_swigt__p_crpropa__ObserverTracking, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__OneDimensionalCartesianShock[] = {{&_swigt__p_crpropa__OneDimensionalCartesianShock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__OneDimensionalSphericalShock[] = {{&_swigt__p_crpropa__OneDimensionalSphericalShock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PT11Field[] = {{&_swigt__p_crpropa__PT11Field, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ParaxialBox[] = {{&_swigt__p_crpropa__ParaxialBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PeriodicMagneticField[] = {{&_swigt__p_crpropa__PeriodicMagneticField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PhotonField[] = {{&_swigt__p_crpropa__PhotonField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PlanckJF12bField[] = {{&_swigt__p_crpropa__PlanckJF12bField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Plane[] = {{&_swigt__p_crpropa__Plane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PlaneWaveTurbulence[] = {{&_swigt__p_crpropa__PlaneWaveTurbulence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PolarizedSingleModeMagneticField[] = {{&_swigt__p_crpropa__PolarizedSingleModeMagneticField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__QuasiLinearTheory[] = {{&_swigt__p_crpropa__QuasiLinearTheory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Source[] = {{&_swigt__p_crpropa__Source, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceComposition[] = {{&_swigt__p_crpropa__SourceComposition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceDensityGrid[] = {{&_swigt__p_crpropa__SourceDensityGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceDensityGrid1D[] = {{&_swigt__p_crpropa__SourceDensityGrid1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceDirectedEmission[] = {{&_swigt__p_crpropa__SourceDirectedEmission, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceDirection[] = {{&_swigt__p_crpropa__SourceDirection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceEmissionCone[] = {{&_swigt__p_crpropa__SourceEmissionCone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceEmissionMap[] = {{&_swigt__p_crpropa__SourceEmissionMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceEnergy[] = {{&_swigt__p_crpropa__SourceEnergy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceFeature[] = {{&_swigt__p_crpropa__SourceFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceInterface[] = {{&_swigt__p_crpropa__SourceInterface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceIsotropicEmission[] = {{&_swigt__p_crpropa__SourceIsotropicEmission, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceLambertDistributionOnSphere[] = {{&_swigt__p_crpropa__SourceLambertDistributionOnSphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceList[] = {{&_swigt__p_crpropa__SourceList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceMassDistribution[] = {{&_swigt__p_crpropa__SourceMassDistribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceMultipleParticleTypes[] = {{&_swigt__p_crpropa__SourceMultipleParticleTypes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceMultiplePositions[] = {{&_swigt__p_crpropa__SourceMultiplePositions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceParticleType[] = {{&_swigt__p_crpropa__SourceParticleType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourcePosition[] = {{&_swigt__p_crpropa__SourcePosition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourcePowerLawSpectrum[] = {{&_swigt__p_crpropa__SourcePowerLawSpectrum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourcePulsarDistribution[] = {{&_swigt__p_crpropa__SourcePulsarDistribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceRedshift[] = {{&_swigt__p_crpropa__SourceRedshift, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceRedshift1D[] = {{&_swigt__p_crpropa__SourceRedshift1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceRedshiftEvolution[] = {{&_swigt__p_crpropa__SourceRedshiftEvolution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceSNRDistribution[] = {{&_swigt__p_crpropa__SourceSNRDistribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceTag[] = {{&_swigt__p_crpropa__SourceTag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceUniform1D[] = {{&_swigt__p_crpropa__SourceUniform1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceUniformBox[] = {{&_swigt__p_crpropa__SourceUniformBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceUniformCylinder[] = {{&_swigt__p_crpropa__SourceUniformCylinder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceUniformHollowSphere[] = {{&_swigt__p_crpropa__SourceUniformHollowSphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceUniformRedshift[] = {{&_swigt__p_crpropa__SourceUniformRedshift, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceUniformShell[] = {{&_swigt__p_crpropa__SourceUniformShell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceUniformSphere[] = {{&_swigt__p_crpropa__SourceUniformSphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Sphere[] = {{&_swigt__p_crpropa__Sphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SphericalAdvectionField[] = {{&_swigt__p_crpropa__SphericalAdvectionField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SphericalAdvectionShock[] = {{&_swigt__p_crpropa__SphericalAdvectionShock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__StepLengthModifier[] = {{&_swigt__p_crpropa__StepLengthModifier, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Surface[] = {{&_swigt__p_crpropa__Surface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__TF17Field[] = {{&_swigt__p_crpropa__TF17Field, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__TabularPhotonField[] = {{&_swigt__p_crpropa__TabularPhotonField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ToroidalHaloField[] = {{&_swigt__p_crpropa__ToroidalHaloField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__TurbulenceSpectrum[] = {{&_swigt__p_crpropa__TurbulenceSpectrum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__TurbulentField[] = {{&_swigt__p_crpropa__TurbulentField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__UF23Field[] = {{&_swigt__p_crpropa__UF23Field, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__URB_Fixsen11[] = {{&_swigt__p_crpropa__URB_Fixsen11, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__URB_Nitu21[] = {{&_swigt__p_crpropa__URB_Nitu21, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__URB_Protheroe96[] = {{&_swigt__p_crpropa__URB_Protheroe96, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__UniformAdvectionField[] = {{&_swigt__p_crpropa__UniformAdvectionField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__UniformMagneticField[] = {{&_swigt__p_crpropa__UniformMagneticField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Referenced[] = {  {&_swigt__p_crpropa__Referenced, 0, 0, 0},  {&_swigt__p_crpropa__AbstractAccelerationModule, _p_crpropa__AbstractAccelerationModuleTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__AbstractCondition, _p_crpropa__AbstractConditionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__AdiabaticCooling, _p_crpropa__AdiabaticCoolingTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__AdvectionField, _p_crpropa__AdvectionFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__AdvectionFieldList, _p_crpropa__AdvectionFieldListTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ArchimedeanSpiralField, _p_crpropa__ArchimedeanSpiralFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__BlackbodyPhotonField, _p_crpropa__BlackbodyPhotonFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__CMB, _p_crpropa__CMBTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__CMZField, _p_crpropa__CMZFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Candidate, _p_crpropa__CandidateTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__CandidateSplitting, _p_crpropa__CandidateSplittingTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ConstantDensity, _p_crpropa__ConstantDensityTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ConstantMomentumDiffusion, _p_crpropa__ConstantMomentumDiffusionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ConstantSphericalAdvectionField, _p_crpropa__ConstantSphericalAdvectionFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Cordes, _p_crpropa__CordesTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__CubicBoundary, _p_crpropa__CubicBoundaryTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__CylindricalBoundary, _p_crpropa__CylindricalBoundaryTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__CylindricalProjectionMap, _p_crpropa__CylindricalProjectionMapTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Deactivation, _p_crpropa__DeactivationTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Density, _p_crpropa__DensityTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__DensityGrid, _p_crpropa__DensityGridTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__DensityList, _p_crpropa__DensityListTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__DetectionLength, _p_crpropa__DetectionLengthTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__DiffusionSDE, _p_crpropa__DiffusionSDETo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__DirectedFlowOfScatterCenters, _p_crpropa__DirectedFlowOfScatterCentersTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__DirectedFlowScattering, _p_crpropa__DirectedFlowScatteringTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__EMDoublePairProduction, _p_crpropa__EMDoublePairProductionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__EMInverseComptonScattering, _p_crpropa__EMInverseComptonScatteringTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__EMPairProduction, _p_crpropa__EMPairProductionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__EMTripletPairProduction, _p_crpropa__EMTripletPairProductionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ElasticScattering, _p_crpropa__ElasticScatteringTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ElectronPairProduction, _p_crpropa__ElectronPairProductionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__EllipsoidalBoundary, _p_crpropa__EllipsoidalBoundaryTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__EmissionMap, _p_crpropa__EmissionMapTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__EmissionMapFiller, _p_crpropa__EmissionMapFillerTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Ferriere, _p_crpropa__FerriereTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__FutureRedshift, _p_crpropa__FutureRedshiftTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__GridProperties, _p_crpropa__GridPropertiesTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__GridT_crpropa__Vector3T_double_t_t, _p_crpropa__GridT_crpropa__Vector3T_double_t_tTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__GridT_crpropa__Vector3T_float_t_t, _p_crpropa__GridT_crpropa__Vector3T_float_t_tTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__GridT_double_t, _p_crpropa__GridT_double_tTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__GridT_float_t, _p_crpropa__GridT_float_tTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Dominguez11, _p_crpropa__IRB_Dominguez11To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Finke10, _p_crpropa__IRB_Finke10To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Finke22, _p_crpropa__IRB_Finke22To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Franceschini08, _p_crpropa__IRB_Franceschini08To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Gilmore12, _p_crpropa__IRB_Gilmore12To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Kneiske04, _p_crpropa__IRB_Kneiske04To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Saldana21, _p_crpropa__IRB_Saldana21To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Saldana21_lower, _p_crpropa__IRB_Saldana21_lowerTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Saldana21_upper, _p_crpropa__IRB_Saldana21_upperTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Stecker05, _p_crpropa__IRB_Stecker05To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Stecker16_lower, _p_crpropa__IRB_Stecker16_lowerTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Stecker16_upper, _p_crpropa__IRB_Stecker16_upperTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__JF12Field, _p_crpropa__JF12FieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__JF12FieldSolenoidal, _p_crpropa__JF12FieldSolenoidalTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__KST24Field, _p_crpropa__KST24FieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__LogarithmicSpiralField, _p_crpropa__LogarithmicSpiralFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MagneticDipoleField, _p_crpropa__MagneticDipoleFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MagneticField, _p_crpropa__MagneticFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MagneticFieldEvolution, _p_crpropa__MagneticFieldEvolutionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MagneticFieldGrid, _p_crpropa__MagneticFieldGridTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MagneticFieldList, _p_crpropa__MagneticFieldListTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MaximumTrajectoryLength, _p_crpropa__MaximumTrajectoryLengthTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MinimumChargeNumber, _p_crpropa__MinimumChargeNumberTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MinimumEnergy, _p_crpropa__MinimumEnergyTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MinimumEnergyPerParticleId, _p_crpropa__MinimumEnergyPerParticleIdTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MinimumRedshift, _p_crpropa__MinimumRedshiftTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MinimumRigidity, _p_crpropa__MinimumRigidityTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ModulatedMagneticFieldGrid, _p_crpropa__ModulatedMagneticFieldGridTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Module, _p_crpropa__ModuleTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ModuleList, _p_crpropa__ModuleListTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ModuleListRunner, _p_crpropa__ModuleListRunnerTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Nakanishi, _p_crpropa__NakanishiTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__NuclearDecay, _p_crpropa__NuclearDecayTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObliqueAdvectionShock, _p_crpropa__ObliqueAdvectionShockTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Observer, _p_crpropa__ObserverTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Observer1D, _p_crpropa__Observer1DTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverDetectAll, _p_crpropa__ObserverDetectAllTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverElectronVeto, _p_crpropa__ObserverElectronVetoTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverFeature, _p_crpropa__ObserverFeatureTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverInactiveVeto, _p_crpropa__ObserverInactiveVetoTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverNeutrinoVeto, _p_crpropa__ObserverNeutrinoVetoTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverNucleusVeto, _p_crpropa__ObserverNucleusVetoTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverParticleIdVeto, _p_crpropa__ObserverParticleIdVetoTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverPhotonVeto, _p_crpropa__ObserverPhotonVetoTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverRedshiftWindow, _p_crpropa__ObserverRedshiftWindowTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverSurface, _p_crpropa__ObserverSurfaceTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverTimeEvolution, _p_crpropa__ObserverTimeEvolutionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverTracking, _p_crpropa__ObserverTrackingTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__OneDimensionalCartesianShock, _p_crpropa__OneDimensionalCartesianShockTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__OneDimensionalSphericalShock, _p_crpropa__OneDimensionalSphericalShockTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Output, _p_crpropa__OutputTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PT11Field, _p_crpropa__PT11FieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ParaxialBox, _p_crpropa__ParaxialBoxTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ParticleCollector, _p_crpropa__ParticleCollectorTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ParticleFilter, _p_crpropa__ParticleFilterTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ParticleSplitting, _p_crpropa__ParticleSplittingTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PerformanceModule, _p_crpropa__PerformanceModuleTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PeriodicBox, _p_crpropa__PeriodicBoxTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PeriodicMagneticField, _p_crpropa__PeriodicMagneticFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PhotoDisintegration, _p_crpropa__PhotoDisintegrationTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PhotoPionProduction, _p_crpropa__PhotoPionProductionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PhotonField, _p_crpropa__PhotonFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PhotonOutput1D, _p_crpropa__PhotonOutput1DTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PlanckJF12bField, _p_crpropa__PlanckJF12bFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Plane, _p_crpropa__PlaneTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PlaneWaveTurbulence, _p_crpropa__PlaneWaveTurbulenceTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PolarizedSingleModeMagneticField, _p_crpropa__PolarizedSingleModeMagneticFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PropagationBP, _p_crpropa__PropagationBPTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PropagationCK, _p_crpropa__PropagationCKTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__QuasiLinearTheory, _p_crpropa__QuasiLinearTheoryTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Redshift, _p_crpropa__RedshiftTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ReflectiveBox, _p_crpropa__ReflectiveBoxTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ReflectiveShell, _p_crpropa__ReflectiveShellTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__RestrictToRegion, _p_crpropa__RestrictToRegionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SecondOrderFermi, _p_crpropa__SecondOrderFermiTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ShellOutput, _p_crpropa__ShellOutputTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ShellOutput1D, _p_crpropa__ShellOutput1DTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ShellPropertyOutput, _p_crpropa__ShellPropertyOutputTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SimplePropagation, _p_crpropa__SimplePropagationTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Source, _p_crpropa__SourceTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceComposition, _p_crpropa__SourceCompositionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceDensityGrid, _p_crpropa__SourceDensityGridTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceDensityGrid1D, _p_crpropa__SourceDensityGrid1DTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceDirectedEmission, _p_crpropa__SourceDirectedEmissionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceDirection, _p_crpropa__SourceDirectionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceEmissionCone, _p_crpropa__SourceEmissionConeTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceEmissionMap, _p_crpropa__SourceEmissionMapTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceEnergy, _p_crpropa__SourceEnergyTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceFeature, _p_crpropa__SourceFeatureTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceInterface, _p_crpropa__SourceInterfaceTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceIsotropicEmission, _p_crpropa__SourceIsotropicEmissionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceLambertDistributionOnSphere, _p_crpropa__SourceLambertDistributionOnSphereTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceList, _p_crpropa__SourceListTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceMassDistribution, _p_crpropa__SourceMassDistributionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceMultipleParticleTypes, _p_crpropa__SourceMultipleParticleTypesTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceMultiplePositions, _p_crpropa__SourceMultiplePositionsTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceParticleType, _p_crpropa__SourceParticleTypeTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourcePosition, _p_crpropa__SourcePositionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourcePowerLawSpectrum, _p_crpropa__SourcePowerLawSpectrumTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourcePulsarDistribution, _p_crpropa__SourcePulsarDistributionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceRedshift, _p_crpropa__SourceRedshiftTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceRedshift1D, _p_crpropa__SourceRedshift1DTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceRedshiftEvolution, _p_crpropa__SourceRedshiftEvolutionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceSNRDistribution, _p_crpropa__SourceSNRDistributionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceTag, _p_crpropa__SourceTagTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceUniform1D, _p_crpropa__SourceUniform1DTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceUniformBox, _p_crpropa__SourceUniformBoxTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceUniformCylinder, _p_crpropa__SourceUniformCylinderTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceUniformHollowSphere, _p_crpropa__SourceUniformHollowSphereTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceUniformRedshift, _p_crpropa__SourceUniformRedshiftTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceUniformShell, _p_crpropa__SourceUniformShellTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceUniformSphere, _p_crpropa__SourceUniformSphereTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Sphere, _p_crpropa__SphereTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SphericalAdvectionField, _p_crpropa__SphericalAdvectionFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SphericalAdvectionShock, _p_crpropa__SphericalAdvectionShockTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SphericalBoundary, _p_crpropa__SphericalBoundaryTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__StepLengthModifier, _p_crpropa__StepLengthModifierTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Surface, _p_crpropa__SurfaceTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SynchrotronRadiation, _p_crpropa__SynchrotronRadiationTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__TF17Field, _p_crpropa__TF17FieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__TabularPhotonField, _p_crpropa__TabularPhotonFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__TextOutput, _p_crpropa__TextOutputTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ToroidalHaloField, _p_crpropa__ToroidalHaloFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__TurbulenceSpectrum, _p_crpropa__TurbulenceSpectrumTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__TurbulentField, _p_crpropa__TurbulentFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__UF23Field, _p_crpropa__UF23FieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__URB_Fixsen11, _p_crpropa__URB_Fixsen11To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__URB_Nitu21, _p_crpropa__URB_Nitu21To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__URB_Protheroe96, _p_crpropa__URB_Protheroe96To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__UniformAdvectionField, _p_crpropa__UniformAdvectionFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__UniformMagneticField, _p_crpropa__UniformMagneticFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_nupropa__BlackbodyNeutrinoField, _p_nupropa__BlackbodyNeutrinoFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_nupropa__Channels, _p_nupropa__ChannelsTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_nupropa__ChannelsBundle, _p_nupropa__ChannelsBundleTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_nupropa__CnuBm1, _p_nupropa__CnuBm1To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_nupropa__CnuBm2, _p_nupropa__CnuBm2To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_nupropa__CnuBm3, _p_nupropa__CnuBm3To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_nupropa__NeutrinoAntineutrinoInteraction, _p_nupropa__NeutrinoAntineutrinoInteractionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_nupropa__NeutrinoField, _p_nupropa__NeutrinoFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_nupropa__NeutrinoMixing, _p_nupropa__NeutrinoMixingTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_nupropa__NeutrinoNeutrinoInteraction, _p_nupropa__NeutrinoNeutrinoInteractionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_nupropa__NeutrinoOscillation, _p_nupropa__NeutrinoOscillationTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_nupropa__NeutrinoPhotonInteraction, _p_nupropa__NeutrinoPhotonInteractionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_nupropa__RelativisticInteraction, _p_nupropa__RelativisticInteractionTo_p_crpropa__Referenced, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Vector3T_double_t[] = {  {&_swigt__p_crpropa__Vector3T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Vector3T_float_t[] = {  {&_swigt__p_crpropa__Vector3T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ref_ptrT_Channels_t[] = {  {&_swigt__p_crpropa__ref_ptrT_Channels_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ref_ptrT_NeutrinoField_t[] = {  {&_swigt__p_crpropa__ref_ptrT_NeutrinoField_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ref_ptrT_NeutrinoMixing_t[] = {  {&_swigt__p_crpropa__ref_ptrT_NeutrinoMixing_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ref_ptrT_crpropa__PhotonField_t[] = {  {&_swigt__p_crpropa__ref_ptrT_crpropa__PhotonField_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t[] = {  {&_swigt__p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ref_ptrT_nupropa__Channels_t[] = {  {&_swigt__p_crpropa__ref_ptrT_nupropa__Channels_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ref_ptrT_nupropa__NeutrinoField_t[] = {  {&_swigt__p_crpropa__ref_ptrT_nupropa__NeutrinoField_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t[] = {  {&_swigt__p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t[] = {  {&_swigt__p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_element_type[] = {  {&_swigt__p_element_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void[] = {  {&_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__ios_base[] = {  {&_swigt__p_f_r_std__ios_base__r_std__ios_base, 0, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fmtflags[] = {  {&_swigt__p_fmtflags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int_type[] = {  {&_swigt__p_int_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iostate[] = {  {&_swigt__p_iostate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_t[] = {  {&_swigt__p_key_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_map_t[] = {  {&_swigt__p_map_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_module_list_t[] = {  {&_swigt__p_module_list_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nupropa__BlackbodyNeutrinoField[] = {  {&_swigt__p_nupropa__BlackbodyNeutrinoField, 0, 0, 0},  {&_swigt__p_nupropa__CnuBm1, _p_nupropa__CnuBm1To_p_nupropa__BlackbodyNeutrinoField, 0, 0},  {&_swigt__p_nupropa__CnuBm2, _p_nupropa__CnuBm2To_p_nupropa__BlackbodyNeutrinoField, 0, 0},  {&_swigt__p_nupropa__CnuBm3, _p_nupropa__CnuBm3To_p_nupropa__BlackbodyNeutrinoField, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nupropa__Channels[] = {  {&_swigt__p_nupropa__Channels, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nupropa__ChannelsBundle[] = {  {&_swigt__p_nupropa__ChannelsBundle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nupropa__CnuBm1[] = {  {&_swigt__p_nupropa__CnuBm1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nupropa__CnuBm2[] = {  {&_swigt__p_nupropa__CnuBm2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nupropa__CnuBm3[] = {  {&_swigt__p_nupropa__CnuBm3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nupropa__NeutrinoAntineutrinoInteraction[] = {  {&_swigt__p_nupropa__NeutrinoAntineutrinoInteraction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nupropa__NeutrinoField[] = {  {&_swigt__p_nupropa__NeutrinoField, 0, 0, 0},  {&_swigt__p_nupropa__BlackbodyNeutrinoField, _p_nupropa__BlackbodyNeutrinoFieldTo_p_nupropa__NeutrinoField, 0, 0},  {&_swigt__p_nupropa__CnuBm1, _p_nupropa__CnuBm1To_p_nupropa__NeutrinoField, 0, 0},  {&_swigt__p_nupropa__CnuBm2, _p_nupropa__CnuBm2To_p_nupropa__NeutrinoField, 0, 0},  {&_swigt__p_nupropa__CnuBm3, _p_nupropa__CnuBm3To_p_nupropa__NeutrinoField, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nupropa__NeutrinoMixing[] = {  {&_swigt__p_nupropa__NeutrinoMixing, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nupropa__NeutrinoNeutrinoInteraction[] = {  {&_swigt__p_nupropa__NeutrinoNeutrinoInteraction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nupropa__NeutrinoOscillation[] = {  {&_swigt__p_nupropa__NeutrinoOscillation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nupropa__NeutrinoPhotonInteraction[] = {  {&_swigt__p_nupropa__NeutrinoPhotonInteraction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nupropa__ParticleData[] = {  {&_swigt__p_nupropa__ParticleData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nupropa__RelativisticInteraction[] = {  {&_swigt__p_nupropa__RelativisticInteraction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_off_type[] = {  {&_swigt__p_off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openmode[] = {  {&_swigt__p_openmode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pos_type[] = {  {&_swigt__p_pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reference[] = {  {&_swigt__p_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_seekdir[] = {  {&_swigt__p_seekdir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_state_type[] = {  {&_swigt__p_state_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_char_t[] = {  {&_swigt__p_std__allocatorT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_streambufT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator[] = {  {&_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__reverse_iterator[] = {  {&_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ios_base[] = {  {&_swigt__p_std__ios_base, 0, 0, 0},  {&_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t, _p_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__locale[] = {  {&_swigt__p_std__locale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__unordered_mapT_int_double_t[] = {  {&_swigt__p_std__unordered_mapT_int_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_bool_std__allocatorT_bool_t_t[] = {  {&_swigt__p_std__vectorT_bool_std__allocatorT_bool_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_std__allocatorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_std__allocatorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_streamoff[] = {  {&_swigt__p_streamoff, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_streampos[] = {  {&_swigt__p_streampos, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_traits_type[] = {  {&_swigt__p_traits_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vector_const_iterator[] = {  {&_swigt__p_vector_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vector_iterator[] = {  {&_swigt__p_vector_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vector_t[] = {  {&_swigt__p_vector_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Eigen__Matrix3cd,
  _swigc__p_PropertyMap,
  _swigc__p_SwigPyObject,
  _swigc__p_Vector3c,
  _swigc__p_allocator_type,
  _swigc__p_bool,
  _swigc__p_candidate_vector_t,
  _swigc__p_char,
  _swigc__p_char_type,
  _swigc__p_complex_d,
  _swigc__p_complex_f,
  _swigc__p_const_iterator,
  _swigc__p_const_reference,
  _swigc__p_crpropa__AbstractAccelerationModule,
  _swigc__p_crpropa__AbstractCondition,
  _swigc__p_crpropa__AdiabaticCooling,
  _swigc__p_crpropa__AdvectionField,
  _swigc__p_crpropa__AdvectionFieldList,
  _swigc__p_crpropa__ArchimedeanSpiralField,
  _swigc__p_crpropa__BlackbodyPhotonField,
  _swigc__p_crpropa__CMB,
  _swigc__p_crpropa__CMZField,
  _swigc__p_crpropa__Candidate,
  _swigc__p_crpropa__CandidateSplitting,
  _swigc__p_crpropa__ConstantDensity,
  _swigc__p_crpropa__ConstantMomentumDiffusion,
  _swigc__p_crpropa__ConstantSphericalAdvectionField,
  _swigc__p_crpropa__Cordes,
  _swigc__p_crpropa__CubicBoundary,
  _swigc__p_crpropa__CylindricalBoundary,
  _swigc__p_crpropa__CylindricalProjectionMap,
  _swigc__p_crpropa__Deactivation,
  _swigc__p_crpropa__Density,
  _swigc__p_crpropa__DensityGrid,
  _swigc__p_crpropa__DensityList,
  _swigc__p_crpropa__DetectionLength,
  _swigc__p_crpropa__DiffusionSDE,
  _swigc__p_crpropa__DirectedFlowOfScatterCenters,
  _swigc__p_crpropa__DirectedFlowScattering,
  _swigc__p_crpropa__EMDoublePairProduction,
  _swigc__p_crpropa__EMInverseComptonScattering,
  _swigc__p_crpropa__EMPairProduction,
  _swigc__p_crpropa__EMTripletPairProduction,
  _swigc__p_crpropa__ElasticScattering,
  _swigc__p_crpropa__ElectronPairProduction,
  _swigc__p_crpropa__EllipsoidalBoundary,
  _swigc__p_crpropa__EmissionMap,
  _swigc__p_crpropa__EmissionMapFiller,
  _swigc__p_crpropa__Ferriere,
  _swigc__p_crpropa__FutureRedshift,
  _swigc__p_crpropa__GridProperties,
  _swigc__p_crpropa__GridT_crpropa__Vector3T_double_t_t,
  _swigc__p_crpropa__GridT_crpropa__Vector3T_float_t_t,
  _swigc__p_crpropa__GridT_double_t,
  _swigc__p_crpropa__GridT_float_t,
  _swigc__p_crpropa__IRB_Dominguez11,
  _swigc__p_crpropa__IRB_Finke10,
  _swigc__p_crpropa__IRB_Finke22,
  _swigc__p_crpropa__IRB_Franceschini08,
  _swigc__p_crpropa__IRB_Gilmore12,
  _swigc__p_crpropa__IRB_Kneiske04,
  _swigc__p_crpropa__IRB_Saldana21,
  _swigc__p_crpropa__IRB_Saldana21_lower,
  _swigc__p_crpropa__IRB_Saldana21_upper,
  _swigc__p_crpropa__IRB_Stecker05,
  _swigc__p_crpropa__IRB_Stecker16_lower,
  _swigc__p_crpropa__IRB_Stecker16_upper,
  _swigc__p_crpropa__JF12Field,
  _swigc__p_crpropa__JF12FieldSolenoidal,
  _swigc__p_crpropa__KST24Field,
  _swigc__p_crpropa__LogarithmicSpiralField,
  _swigc__p_crpropa__MagneticDipoleField,
  _swigc__p_crpropa__MagneticField,
  _swigc__p_crpropa__MagneticFieldEvolution,
  _swigc__p_crpropa__MagneticFieldGrid,
  _swigc__p_crpropa__MagneticFieldList,
  _swigc__p_crpropa__MaximumTrajectoryLength,
  _swigc__p_crpropa__MinimumChargeNumber,
  _swigc__p_crpropa__MinimumEnergy,
  _swigc__p_crpropa__MinimumEnergyPerParticleId,
  _swigc__p_crpropa__MinimumRedshift,
  _swigc__p_crpropa__MinimumRigidity,
  _swigc__p_crpropa__ModulatedMagneticFieldGrid,
  _swigc__p_crpropa__Module,
  _swigc__p_crpropa__ModuleList,
  _swigc__p_crpropa__ModuleListRunner,
  _swigc__p_crpropa__Nakanishi,
  _swigc__p_crpropa__NuclearDecay,
  _swigc__p_crpropa__ObliqueAdvectionShock,
  _swigc__p_crpropa__Observer,
  _swigc__p_crpropa__Observer1D,
  _swigc__p_crpropa__ObserverDetectAll,
  _swigc__p_crpropa__ObserverElectronVeto,
  _swigc__p_crpropa__ObserverFeature,
  _swigc__p_crpropa__ObserverInactiveVeto,
  _swigc__p_crpropa__ObserverNeutrinoVeto,
  _swigc__p_crpropa__ObserverNucleusVeto,
  _swigc__p_crpropa__ObserverParticleIdVeto,
  _swigc__p_crpropa__ObserverPhotonVeto,
  _swigc__p_crpropa__ObserverRedshiftWindow,
  _swigc__p_crpropa__ObserverSurface,
  _swigc__p_crpropa__ObserverTimeEvolution,
  _swigc__p_crpropa__ObserverTracking,
  _swigc__p_crpropa__OneDimensionalCartesianShock,
  _swigc__p_crpropa__OneDimensionalSphericalShock,
  _swigc__p_crpropa__Output,
  _swigc__p_crpropa__PT11Field,
  _swigc__p_crpropa__ParaxialBox,
  _swigc__p_crpropa__ParticleCollector,
  _swigc__p_crpropa__ParticleFilter,
  _swigc__p_crpropa__ParticleSplitting,
  _swigc__p_crpropa__PerformanceModule,
  _swigc__p_crpropa__PeriodicBox,
  _swigc__p_crpropa__PeriodicMagneticField,
  _swigc__p_crpropa__PhotoDisintegration,
  _swigc__p_crpropa__PhotoPionProduction,
  _swigc__p_crpropa__PhotonField,
  _swigc__p_crpropa__PhotonOutput1D,
  _swigc__p_crpropa__PlanckJF12bField,
  _swigc__p_crpropa__Plane,
  _swigc__p_crpropa__PlaneWaveTurbulence,
  _swigc__p_crpropa__PolarizedSingleModeMagneticField,
  _swigc__p_crpropa__PropagationBP,
  _swigc__p_crpropa__PropagationCK,
  _swigc__p_crpropa__QuasiLinearTheory,
  _swigc__p_crpropa__Redshift,
  _swigc__p_crpropa__Referenced,
  _swigc__p_crpropa__ReflectiveBox,
  _swigc__p_crpropa__ReflectiveShell,
  _swigc__p_crpropa__RestrictToRegion,
  _swigc__p_crpropa__SecondOrderFermi,
  _swigc__p_crpropa__ShellOutput,
  _swigc__p_crpropa__ShellOutput1D,
  _swigc__p_crpropa__ShellPropertyOutput,
  _swigc__p_crpropa__SimplePropagation,
  _swigc__p_crpropa__Source,
  _swigc__p_crpropa__SourceComposition,
  _swigc__p_crpropa__SourceDensityGrid,
  _swigc__p_crpropa__SourceDensityGrid1D,
  _swigc__p_crpropa__SourceDirectedEmission,
  _swigc__p_crpropa__SourceDirection,
  _swigc__p_crpropa__SourceEmissionCone,
  _swigc__p_crpropa__SourceEmissionMap,
  _swigc__p_crpropa__SourceEnergy,
  _swigc__p_crpropa__SourceFeature,
  _swigc__p_crpropa__SourceInterface,
  _swigc__p_crpropa__SourceIsotropicEmission,
  _swigc__p_crpropa__SourceLambertDistributionOnSphere,
  _swigc__p_crpropa__SourceList,
  _swigc__p_crpropa__SourceMassDistribution,
  _swigc__p_crpropa__SourceMultipleParticleTypes,
  _swigc__p_crpropa__SourceMultiplePositions,
  _swigc__p_crpropa__SourceParticleType,
  _swigc__p_crpropa__SourcePosition,
  _swigc__p_crpropa__SourcePowerLawSpectrum,
  _swigc__p_crpropa__SourcePulsarDistribution,
  _swigc__p_crpropa__SourceRedshift,
  _swigc__p_crpropa__SourceRedshift1D,
  _swigc__p_crpropa__SourceRedshiftEvolution,
  _swigc__p_crpropa__SourceSNRDistribution,
  _swigc__p_crpropa__SourceTag,
  _swigc__p_crpropa__SourceUniform1D,
  _swigc__p_crpropa__SourceUniformBox,
  _swigc__p_crpropa__SourceUniformCylinder,
  _swigc__p_crpropa__SourceUniformHollowSphere,
  _swigc__p_crpropa__SourceUniformRedshift,
  _swigc__p_crpropa__SourceUniformShell,
  _swigc__p_crpropa__SourceUniformSphere,
  _swigc__p_crpropa__Sphere,
  _swigc__p_crpropa__SphericalAdvectionField,
  _swigc__p_crpropa__SphericalAdvectionShock,
  _swigc__p_crpropa__SphericalBoundary,
  _swigc__p_crpropa__StepLengthModifier,
  _swigc__p_crpropa__Surface,
  _swigc__p_crpropa__SynchrotronRadiation,
  _swigc__p_crpropa__TF17Field,
  _swigc__p_crpropa__TabularPhotonField,
  _swigc__p_crpropa__TextOutput,
  _swigc__p_crpropa__ToroidalHaloField,
  _swigc__p_crpropa__TurbulenceSpectrum,
  _swigc__p_crpropa__TurbulentField,
  _swigc__p_crpropa__UF23Field,
  _swigc__p_crpropa__URB_Fixsen11,
  _swigc__p_crpropa__URB_Nitu21,
  _swigc__p_crpropa__URB_Protheroe96,
  _swigc__p_crpropa__UniformAdvectionField,
  _swigc__p_crpropa__UniformMagneticField,
  _swigc__p_crpropa__Vector3T_double_t,
  _swigc__p_crpropa__Vector3T_float_t,
  _swigc__p_crpropa__ref_ptrT_Channels_t,
  _swigc__p_crpropa__ref_ptrT_NeutrinoField_t,
  _swigc__p_crpropa__ref_ptrT_NeutrinoMixing_t,
  _swigc__p_crpropa__ref_ptrT_crpropa__PhotonField_t,
  _swigc__p_crpropa__ref_ptrT_nupropa__ChannelsBundle_t,
  _swigc__p_crpropa__ref_ptrT_nupropa__Channels_t,
  _swigc__p_crpropa__ref_ptrT_nupropa__NeutrinoField_t,
  _swigc__p_crpropa__ref_ptrT_nupropa__NeutrinoMixing_t,
  _swigc__p_crpropa__ref_ptrT_nupropa__RelativisticInteraction_t,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_element_type,
  _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__ios_base,
  _swigc__p_first_type,
  _swigc__p_float,
  _swigc__p_fmtflags,
  _swigc__p_int,
  _swigc__p_int_type,
  _swigc__p_iostate,
  _swigc__p_iterator,
  _swigc__p_key_t,
  _swigc__p_key_type,
  _swigc__p_long,
  _swigc__p_long_double,
  _swigc__p_long_long,
  _swigc__p_map_t,
  _swigc__p_module_list_t,
  _swigc__p_nupropa__BlackbodyNeutrinoField,
  _swigc__p_nupropa__Channels,
  _swigc__p_nupropa__ChannelsBundle,
  _swigc__p_nupropa__CnuBm1,
  _swigc__p_nupropa__CnuBm2,
  _swigc__p_nupropa__CnuBm3,
  _swigc__p_nupropa__NeutrinoAntineutrinoInteraction,
  _swigc__p_nupropa__NeutrinoField,
  _swigc__p_nupropa__NeutrinoMixing,
  _swigc__p_nupropa__NeutrinoNeutrinoInteraction,
  _swigc__p_nupropa__NeutrinoOscillation,
  _swigc__p_nupropa__NeutrinoPhotonInteraction,
  _swigc__p_nupropa__ParticleData,
  _swigc__p_nupropa__RelativisticInteraction,
  _swigc__p_off_type,
  _swigc__p_openmode,
  _swigc__p_p_PyObject,
  _swigc__p_p_void,
  _swigc__p_pos_type,
  _swigc__p_reference,
  _swigc__p_second_type,
  _swigc__p_seekdir,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_state_type,
  _swigc__p_std__allocatorT_char_t,
  _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_streambufT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator,
  _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__reverse_iterator,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__ios_base,
  _swigc__p_std__locale,
  _swigc__p_std__unordered_mapT_int_double_t,
  _swigc__p_std__vectorT_bool_std__allocatorT_bool_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_std__allocatorT_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,
  _swigc__p_streamoff,
  _swigc__p_streampos,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_traits_type,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_vector_const_iterator,
  _swigc__p_vector_iterator,
  _swigc__p_vector_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_POINTER, "endl_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &value))(std::endl< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{ SWIG_PY_POINTER, "ends_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &value))(std::ends< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{ SWIG_PY_POINTER, "flush_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &value))(std::flush< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
static PyTypeObject *builtin_bases[4];

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------
   * Patch %callback methods' docstrings to hold the callback ptrs
   * -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        const swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif




/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  /* type 'swig::SwigPyIterator' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__swig__SwigPyIterator_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'SwigPyIterator'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "SwigPyIterator", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "SwigPyIterator");
  d = md;
  
  /* type 'std::ios_base' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__ios_base_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  globals = SWIG_globals();
  if (!globals) {
    PyErr_SetString(PyExc_TypeError, "Failure to create SWIG globals.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  PyDict_SetItemString(md, "cvar", globals);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "cvar");
  SWIG_addvarlink(globals, "ios_base_boolalpha", Swig_var_ios_base_boolalpha_get, Swig_var_ios_base_boolalpha_set);
  SWIG_addvarlink(globals, "ios_base_dec", Swig_var_ios_base_dec_get, Swig_var_ios_base_dec_set);
  SWIG_addvarlink(globals, "ios_base_fixed", Swig_var_ios_base_fixed_get, Swig_var_ios_base_fixed_set);
  SWIG_addvarlink(globals, "ios_base_hex", Swig_var_ios_base_hex_get, Swig_var_ios_base_hex_set);
  SWIG_addvarlink(globals, "ios_base_internal", Swig_var_ios_base_internal_get, Swig_var_ios_base_internal_set);
  SWIG_addvarlink(globals, "ios_base_left", Swig_var_ios_base_left_get, Swig_var_ios_base_left_set);
  SWIG_addvarlink(globals, "ios_base_oct", Swig_var_ios_base_oct_get, Swig_var_ios_base_oct_set);
  SWIG_addvarlink(globals, "ios_base_right", Swig_var_ios_base_right_get, Swig_var_ios_base_right_set);
  SWIG_addvarlink(globals, "ios_base_scientific", Swig_var_ios_base_scientific_get, Swig_var_ios_base_scientific_set);
  SWIG_addvarlink(globals, "ios_base_showbase", Swig_var_ios_base_showbase_get, Swig_var_ios_base_showbase_set);
  SWIG_addvarlink(globals, "ios_base_showpoint", Swig_var_ios_base_showpoint_get, Swig_var_ios_base_showpoint_set);
  SWIG_addvarlink(globals, "ios_base_showpos", Swig_var_ios_base_showpos_get, Swig_var_ios_base_showpos_set);
  SWIG_addvarlink(globals, "ios_base_skipws", Swig_var_ios_base_skipws_get, Swig_var_ios_base_skipws_set);
  SWIG_addvarlink(globals, "ios_base_unitbuf", Swig_var_ios_base_unitbuf_get, Swig_var_ios_base_unitbuf_set);
  SWIG_addvarlink(globals, "ios_base_uppercase", Swig_var_ios_base_uppercase_get, Swig_var_ios_base_uppercase_set);
  SWIG_addvarlink(globals, "ios_base_adjustfield", Swig_var_ios_base_adjustfield_get, Swig_var_ios_base_adjustfield_set);
  SWIG_addvarlink(globals, "ios_base_basefield", Swig_var_ios_base_basefield_get, Swig_var_ios_base_basefield_set);
  SWIG_addvarlink(globals, "ios_base_floatfield", Swig_var_ios_base_floatfield_get, Swig_var_ios_base_floatfield_set);
  SWIG_addvarlink(globals, "ios_base_badbit", Swig_var_ios_base_badbit_get, Swig_var_ios_base_badbit_set);
  SWIG_addvarlink(globals, "ios_base_eofbit", Swig_var_ios_base_eofbit_get, Swig_var_ios_base_eofbit_set);
  SWIG_addvarlink(globals, "ios_base_failbit", Swig_var_ios_base_failbit_get, Swig_var_ios_base_failbit_set);
  SWIG_addvarlink(globals, "ios_base_goodbit", Swig_var_ios_base_goodbit_get, Swig_var_ios_base_goodbit_set);
  SWIG_addvarlink(globals, "ios_base_app", Swig_var_ios_base_app_get, Swig_var_ios_base_app_set);
  SWIG_addvarlink(globals, "ios_base_ate", Swig_var_ios_base_ate_get, Swig_var_ios_base_ate_set);
  SWIG_addvarlink(globals, "ios_base_binary", Swig_var_ios_base_binary_get, Swig_var_ios_base_binary_set);
  SWIG_addvarlink(globals, "ios_base_ios_base_in", Swig_var_ios_base_ios_base_in_get, Swig_var_ios_base_ios_base_in_set);
  SWIG_addvarlink(globals, "ios_base_out", Swig_var_ios_base_out_get, Swig_var_ios_base_out_set);
  SWIG_addvarlink(globals, "ios_base_trunc", Swig_var_ios_base_trunc_get, Swig_var_ios_base_trunc_set);
  SWIG_addvarlink(globals, "ios_base_beg", Swig_var_ios_base_beg_get, Swig_var_ios_base_beg_set);
  SWIG_addvarlink(globals, "ios_base_cur", Swig_var_ios_base_cur_get, Swig_var_ios_base_cur_set);
  SWIG_addvarlink(globals, "ios_base_end", Swig_var_ios_base_end_get, Swig_var_ios_base_end_set);
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "erase_event",SWIG_From_int(static_cast< int >(std::ios_base::erase_event)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "imbue_event",SWIG_From_int(static_cast< int >(std::ios_base::imbue_event)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "copyfmt_event",SWIG_From_int(static_cast< int >(std::ios_base::copyfmt_event)));
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_scientific_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_floatfield_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_failbit_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_hex_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_right_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_basefield_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_trunc_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_end_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_left_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_showpoint_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_showpos_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_boolalpha_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_eofbit_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_out_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_unitbuf_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_oct_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_internal_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_binary_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_ios_base_in_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_skipws_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_uppercase_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_cur_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_goodbit_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_app_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_dec_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_adjustfield_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_fixed_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_ate_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_beg_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_showbase_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_badbit_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ios_base'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "ios_base", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ios_base");
  d = md;
  
  /* type 'std::basic_ios< char >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__basic_iosT_char_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_std__ios_base");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ios' as base 'std::ios_base' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ios'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "ios", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ios");
  d = md;
  
  /* type 'std::basic_string< char >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__basic_stringT_char_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SWIG_addvarlink(globals, "string_npos", Swig_var_string_npos_get, Swig_var_string_npos_set);
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  static_getset = SwigPyStaticVar_new_getset(metatype, &string_npos_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject *) static_getset);
  Py_DECREF(static_getset);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'string'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "string", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "string");
  d = md;
  SWIG_addvarlink(globals, "cin", Swig_var_cin_get, Swig_var_cin_set);
  PyDict_SetItemString(md, "cin", PyObject_GetAttrString(globals, "cin"));
  SwigPyBuiltin_AddPublicSymbol(public_interface, "cin");
  SWIG_addvarlink(globals, "cout", Swig_var_cout_get, Swig_var_cout_set);
  PyDict_SetItemString(md, "cout", PyObject_GetAttrString(globals, "cout"));
  SwigPyBuiltin_AddPublicSymbol(public_interface, "cout");
  SWIG_addvarlink(globals, "cerr", Swig_var_cerr_get, Swig_var_cerr_set);
  PyDict_SetItemString(md, "cerr", PyObject_GetAttrString(globals, "cerr"));
  SwigPyBuiltin_AddPublicSymbol(public_interface, "cerr");
  SWIG_addvarlink(globals, "clog", Swig_var_clog_get, Swig_var_clog_set);
  PyDict_SetItemString(md, "clog", PyObject_GetAttrString(globals, "clog"));
  SwigPyBuiltin_AddPublicSymbol(public_interface, "clog");
  
  /* type 'std::basic_ostream< char >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__basic_ostreamT_char_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_std__basic_iosT_char_std__char_traitsT_char_t_t");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ostream' as base 'std::basic_ios<(char)>' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ostream'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "ostream", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ostream");
  d = md;
  
  /* type 'std::basic_istream< char >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__basic_istreamT_char_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_std__basic_iosT_char_std__char_traitsT_char_t_t");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'istream' as base 'std::basic_ios<(char)>' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'istream'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "istream", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "istream");
  d = md;
  
  /* type 'std::basic_iostream< char >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__basic_iostreamT_char_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_std__basic_istreamT_char_std__char_traitsT_char_t_t");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'iostream' as base 'std::basic_istream<(char)>' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_basetype = SWIG_MangledTypeQuery("_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'iostream' as base 'std::basic_ostream<(char)>' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'iostream'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "iostream", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "iostream");
  d = md;
  
  
  
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "SHARED_PTR_DISOWN",SWIG_From_int(static_cast< int >(0)));
  
  /* type 'crpropa::ref_ptr< nupropa::Channels >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__crpropa__ref_ptrT_nupropa__Channels_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ChannelsRefPtr'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "ChannelsRefPtr", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ChannelsRefPtr");
  d = md;
  
  /* type 'crpropa::ref_ptr< nupropa::ChannelsBundle >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__crpropa__ref_ptrT_nupropa__ChannelsBundle_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ChannelsBundleRefPtr'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "ChannelsBundleRefPtr", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ChannelsBundleRefPtr");
  d = md;
  
  /* type 'crpropa::ref_ptr< nupropa::NeutrinoField >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoField_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'NeutrinoFieldRefPtr'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "NeutrinoFieldRefPtr", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "NeutrinoFieldRefPtr");
  d = md;
  
  /* type 'crpropa::ref_ptr< nupropa::NeutrinoMixing >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__crpropa__ref_ptrT_nupropa__NeutrinoMixing_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'NeutrinoMixingRefPtr'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "NeutrinoMixingRefPtr", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "NeutrinoMixingRefPtr");
  d = md;
  
  /* type 'crpropa::ref_ptr< nupropa::RelativisticInteraction >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__crpropa__ref_ptrT_nupropa__RelativisticInteraction_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'RelativisticInteractionRefPtr'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "RelativisticInteractionRefPtr", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "RelativisticInteractionRefPtr");
  d = md;
  
  /* type 'nupropa::NeutrinoNeutrinoInteraction' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__nupropa__NeutrinoNeutrinoInteraction_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_crpropa__Module");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'NeutrinoNeutrinoInteraction' as base 'crpropa::Module' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'NeutrinoNeutrinoInteraction'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "NeutrinoNeutrinoInteraction", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "NeutrinoNeutrinoInteraction");
  d = md;
  
  /* type 'nupropa::NeutrinoAntineutrinoInteraction' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__nupropa__NeutrinoAntineutrinoInteraction_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_crpropa__Module");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'NeutrinoAntineutrinoInteraction' as base 'crpropa::Module' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'NeutrinoAntineutrinoInteraction'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "NeutrinoAntineutrinoInteraction", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "NeutrinoAntineutrinoInteraction");
  d = md;
  
  /* type 'nupropa::NeutrinoPhotonInteraction' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__nupropa__NeutrinoPhotonInteraction_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_crpropa__Module");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'NeutrinoPhotonInteraction' as base 'crpropa::Module' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'NeutrinoPhotonInteraction'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "NeutrinoPhotonInteraction", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "NeutrinoPhotonInteraction");
  d = md;
  
  /* type 'nupropa::Channels' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__nupropa__Channels_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_crpropa__Referenced");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Channels' as base 'crpropa::Referenced' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Channels'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Channels", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Channels");
  d = md;
  
  /* type 'nupropa::ChannelsBundle' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__nupropa__ChannelsBundle_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_crpropa__Referenced");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ChannelsBundle' as base 'crpropa::Referenced' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ChannelsBundle'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "ChannelsBundle", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ChannelsBundle");
  d = md;
  
  /* type 'nupropa::NeutrinoField' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__nupropa__NeutrinoField_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_crpropa__Referenced");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'NeutrinoField' as base 'crpropa::Referenced' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'NeutrinoField'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "NeutrinoField", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "NeutrinoField");
  d = md;
  
  /* type 'nupropa::BlackbodyNeutrinoField' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__nupropa__BlackbodyNeutrinoField_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_nupropa__NeutrinoField");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'BlackbodyNeutrinoField' as base 'nupropa::NeutrinoField' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'BlackbodyNeutrinoField'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "BlackbodyNeutrinoField", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "BlackbodyNeutrinoField");
  d = md;
  
  /* type 'nupropa::CnuBm1' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__nupropa__CnuBm1_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_nupropa__BlackbodyNeutrinoField");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CnuBm1' as base 'nupropa::BlackbodyNeutrinoField' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CnuBm1'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CnuBm1", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CnuBm1");
  d = md;
  
  /* type 'nupropa::CnuBm2' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__nupropa__CnuBm2_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_nupropa__BlackbodyNeutrinoField");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CnuBm2' as base 'nupropa::BlackbodyNeutrinoField' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CnuBm2'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CnuBm2", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CnuBm2");
  d = md;
  
  /* type 'nupropa::CnuBm3' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__nupropa__CnuBm3_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_nupropa__BlackbodyNeutrinoField");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CnuBm3' as base 'nupropa::BlackbodyNeutrinoField' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CnuBm3'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CnuBm3", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CnuBm3");
  d = md;
  
  /* type 'nupropa::RelativisticInteraction' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__nupropa__RelativisticInteraction_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_crpropa__Referenced");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'RelativisticInteraction' as base 'crpropa::Referenced' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'RelativisticInteraction'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "RelativisticInteraction", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "RelativisticInteraction");
  d = md;
  
  /* type 'nupropa::ParticleData' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__nupropa__ParticleData_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ParticleData'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "ParticleData", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ParticleData");
  d = md;
  
  /* type 'nupropa::NeutrinoMixing' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__nupropa__NeutrinoMixing_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_crpropa__Referenced");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'NeutrinoMixing' as base 'crpropa::Referenced' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'NeutrinoMixing'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "NeutrinoMixing", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "NeutrinoMixing");
  d = md;
  
  /* type 'nupropa::NeutrinoOscillation' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__nupropa__NeutrinoOscillation_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_crpropa__Module");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'NeutrinoOscillation' as base 'crpropa::Module' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'NeutrinoOscillation'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "NeutrinoOscillation", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "NeutrinoOscillation");
  d = md;
  
  /* Initialize threading */
  SWIG_PYTHON_INITIALIZE_THREADS;
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

